Warning: Using default recursion bound of 1
[TAG: AV_OUTPUT] ----- Analyzing websocket.av.bpl ------
[TAG: AV_STATS] #Procs : 18
[TAG: AV_STATS] #Asserts : 60
Relaxing environment constraints
RelaxEnvironment: 0 env constraints and 0 assertions
[TAG: AV_DEBUG] Recursion Bound: 1
Setting Corral timeout to 0 seconds
Verifying program while tracking: {assertsPassed, $Alloc}
Program has a potential bug: True bug
Corral took: 0.92 seconds

Boogie verification time: 0.16 s
Time spent reading-writing programs: 0.97 s

Time spent checking a program (1): 0.61 s
Time spent checking a path (1): 0.31 s

Number of procedures inlined: 3
Time elapsed so far: 0.980694
List of non-cmd-line arguments to EE = 
ExplainError:Timeout = 1000
############# Implementation = CorralMain_SeqInstr_trace_1_trace_1 #################
ExplainError[Precond]: Num of conditionals considered by slice/Total Num conditionals = 0/0
ExplainError[Precond]: Num of relevant source lines considered by slice/Total source lines = 1/3
ExplainError[Precond]: Sliced Trace => 
	#### sourceFile = websocket.c, sourceLine = 32, 
		 assert assertsPassed;
	assertsPassed := $Alloc[$base(inline$WebSocketMessage_trace_1_trace_1$0$inline$__SMACK_check_memory_safety$0$p)];
	inline$WebSocketMessage_trace_1_trace_1$0$inline$__SMACK_check_memory_safety$0$p := inline$WebSocketMessage_trace_1_trace_1$0$$p2;
	inline$WebSocketMessage_trace_1_trace_1$0$$p2 := $bitcast.ref.ref(inline$WebSocketMessage_trace_1_trace_1$0$$p1);
	inline$WebSocketMessage_trace_1_trace_1$0$$p1 := $add.ref($add.ref(inline$WebSocketMessage_trace_1_trace_1$0$e, $mul.ref(0, 16)), $mul.ref(4, 1));

..Atom:!$Alloc[$base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__36, $mul.ref(0, 16)), $mul.ref(4, 1))))]	
 Filtered atoms before true/false = !$Alloc[$base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__36, $mul.ref(0, 16)), $mul.ref(4, 1))))]
..
 Filtered atoms = !$Alloc[$base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__36, $mul.ref(0, 16)), $mul.ref(4, 1))))]
.
 Found a conjunctive cube cover !$Alloc[$base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__36, $mul.ref(0, 16)), $mul.ref(4, 1))))]



-------------------- Pre at Start in DNF [Size = 1] ---------------------
...Atom:!$Alloc[$base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__36, $mul.ref(0, 16)), $mul.ref(4, 1))))]	--------------------- Feasible Count = 1 ----------------------------
Disjunct = !$Alloc[$base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__36, $mul.ref(0, 16)), $mul.ref(4, 1))))], IsNecessary= True
Disjunct = false, IsNecessary= False
.ExplainError Rootcause = !$Alloc[$base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__36, $mul.ref(0, 16)), $mul.ref(4, 1))))]


The list disjuncts
---------------------

	 !complex-obj6 
------------


The list of complex objs definitions 
	complex-obj0 ==> $mul.ref(0, 16)
	complex-obj1 ==> $add.ref(alloc_e_WebSocketMessage__36, complex-obj0)
	complex-obj2 ==> $mul.ref(4, 1)
	complex-obj3 ==> $add.ref(complex-obj1, complex-obj2)
	complex-obj4 ==> $bitcast.ref.ref(complex-obj3)
	complex-obj5 ==> $base(complex-obj4)
	complex-obj6 ==> $Alloc[complex-obj5]
[TAG: AV_DEBUG] The output of ExplainError => Status = SUCCESS Exprs = (!complex-obj6	)
[TAG: AV_DEBUG] List of used vars in $Alloc[$base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__36, $mul.ref(0, 16)), $mul.ref(4, 1))))] => $Alloc, alloc_e_WebSocketMessage__36
[TAG: AV_DEBUG] The substituted expression for $Alloc[$base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__36, $mul.ref(0, 16)), $mul.ref(4, 1))))] is $Alloc[$base($bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 16)), $mul.ref(4, 1))))]
[TAG: AV_OUTPUT] EXPLAINERROR-BLOCK :: (forall x_5: ref :: unknownTrigger_4(x_5) ==> $Alloc[$base($bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 16)), $mul.ref(4, 1))))])
Printing trace Trace0
Stubs used along the trace: {}
Checking inconsistency
CheckInconsistency: 1 soft constraints and 3 assertions (0 pruned)
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has a potential bug: True bug
Corral took: 0.67 seconds
CorralMain L_BAF_2 7
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has a potential bug: True bug
Corral took: 0.62 seconds
CorralMain L_BAF_0 7
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has a potential bug: True bug
Corral took: 0.65 seconds
CorralMain L_BAF_1 7
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has no bugs
Procedures that hit the recursion bound: 
Corral took: 0.25 seconds
Inconsistency check took: 2.54 seconds
Relaxing environment constraints
RelaxEnvironment: 0 env constraints and 3 assertions
[TAG: AV_DEBUG] Recursion Bound: 1
Setting Corral timeout to 0 seconds
Verifying program while tracking: {assertsPassed, $Alloc}
Program has a potential bug: True bug
Corral took: 0.67 seconds

Boogie verification time: 0.35 s
Time spent reading-writing programs: 4.01 s

Time spent checking a program (6): 2.24 s
Time spent checking a path (5): 1.53 s

Number of procedures inlined: 3
Time elapsed so far: 5.63837
List of non-cmd-line arguments to EE = 
ExplainError:Timeout = 1000
############# Implementation = CorralMain_SeqInstr_trace_1_trace_1 #################
ExplainError[Precond]: Num of conditionals considered by slice/Total Num conditionals = 0/0
ExplainError[Precond]: Num of relevant source lines considered by slice/Total source lines = 1/2
ExplainError[Precond]: Sliced Trace => 
	#### sourceFile = websocket.c, sourceLine = 20, 
		 assert assertsPassed;
	assertsPassed := $Alloc[$base(inline$WebSocketClose_trace_1_trace_1$0$inline$__SMACK_check_memory_safety$0$p)];
	inline$WebSocketClose_trace_1_trace_1$0$inline$__SMACK_check_memory_safety$0$p := inline$WebSocketClose_trace_1_trace_1$0$$p1;
	inline$WebSocketClose_trace_1_trace_1$0$$p1 := $bitcast.ref.ref(inline$WebSocketClose_trace_1_trace_1$0$$p0);
	inline$WebSocketClose_trace_1_trace_1$0$$p0 := $add.ref($add.ref(inline$WebSocketClose_trace_1_trace_1$0$e, $mul.ref(0, 524)), $mul.ref(4, 1));

..Atom:!$Alloc[$base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__141, $mul.ref(0, 524)), $mul.ref(4, 1))))]	
 Filtered atoms before true/false = !$Alloc[$base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__141, $mul.ref(0, 524)), $mul.ref(4, 1))))]
..
 Filtered atoms = !$Alloc[$base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__141, $mul.ref(0, 524)), $mul.ref(4, 1))))]
.
 Found a conjunctive cube cover !$Alloc[$base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__141, $mul.ref(0, 524)), $mul.ref(4, 1))))]



-------------------- Pre at Start in DNF [Size = 1] ---------------------
...Atom:!$Alloc[$base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__141, $mul.ref(0, 524)), $mul.ref(4, 1))))]	--------------------- Feasible Count = 1 ----------------------------
Disjunct = !$Alloc[$base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__141, $mul.ref(0, 524)), $mul.ref(4, 1))))], IsNecessary= True
Disjunct = false, IsNecessary= False
.ExplainError Rootcause = !$Alloc[$base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__141, $mul.ref(0, 524)), $mul.ref(4, 1))))]


The list disjuncts
---------------------

	 !complex-obj6 
------------


The list of complex objs definitions 
	complex-obj0 ==> $mul.ref(0, 524)
	complex-obj1 ==> $add.ref(alloc_e_WebSocketClose__141, complex-obj0)
	complex-obj2 ==> $mul.ref(4, 1)
	complex-obj3 ==> $add.ref(complex-obj1, complex-obj2)
	complex-obj4 ==> $bitcast.ref.ref(complex-obj3)
	complex-obj5 ==> $base(complex-obj4)
	complex-obj6 ==> $Alloc[complex-obj5]
[TAG: AV_DEBUG] The output of ExplainError => Status = SUCCESS Exprs = (!complex-obj6	)
[TAG: AV_DEBUG] List of used vars in $Alloc[$base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__141, $mul.ref(0, 524)), $mul.ref(4, 1))))] => $Alloc, alloc_e_WebSocketClose__141
[TAG: AV_DEBUG] The substituted expression for $Alloc[$base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__141, $mul.ref(0, 524)), $mul.ref(4, 1))))] is $Alloc[$base($bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 524)), $mul.ref(4, 1))))]
[TAG: AV_OUTPUT] EXPLAINERROR-BLOCK :: (forall x_5: ref :: unknownTrigger_6(x_5) ==> $Alloc[$base($bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 524)), $mul.ref(4, 1))))])
Printing trace Trace1
Stubs used along the trace: {}
Checking inconsistency
CheckInconsistency: 2 soft constraints and 3 assertions (0 pruned)
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has a potential bug: True bug
Corral took: 0.64 seconds
CorralMain L_BAF_2 7
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has a potential bug: True bug
Corral took: 0.62 seconds
CorralMain L_BAF_0 7
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has a potential bug: True bug
Corral took: 0.63 seconds
CorralMain L_BAF_1 7
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has no bugs
Procedures that hit the recursion bound: 
Corral took: 0.27 seconds
Inconsistency check took: 2.48 seconds
Relaxing environment constraints
RelaxEnvironment: 0 env constraints and 3 assertions
[TAG: AV_DEBUG] Recursion Bound: 1
Setting Corral timeout to 0 seconds
Verifying program while tracking: {assertsPassed, $Alloc}
Program has a potential bug: True bug
Corral took: 0.64 seconds

Boogie verification time: 0.54 s
Time spent reading-writing programs: 6.99 s

Time spent checking a program (11): 3.90 s
Time spent checking a path (9): 2.66 s

Number of procedures inlined: 3
Time elapsed so far: 10.068483
List of non-cmd-line arguments to EE = 
ExplainError:Timeout = 1000
############# Implementation = CorralMain_SeqInstr_trace_1_trace_1 #################
ExplainError[Precond]: Num of conditionals considered by slice/Total Num conditionals = 0/0
ExplainError[Precond]: Num of relevant source lines considered by slice/Total source lines = 1/2
ExplainError[Precond]: Sliced Trace => 
	#### sourceFile = websocket.c, sourceLine = 20, 
		 assert assertsPassed;
	assertsPassed := $sle.ref.bool($base(inline$WebSocketClose_trace_1_trace_1$0$inline$__SMACK_check_memory_safety$0$p), inline$WebSocketClose_trace_1_trace_1$0$inline$__SMACK_check_memory_safety$0$p);
	inline$WebSocketClose_trace_1_trace_1$0$inline$__SMACK_check_memory_safety$0$p := inline$WebSocketClose_trace_1_trace_1$0$$p1;
	inline$WebSocketClose_trace_1_trace_1$0$$p1 := $bitcast.ref.ref(inline$WebSocketClose_trace_1_trace_1$0$$p0);
	inline$WebSocketClose_trace_1_trace_1$0$$p0 := $add.ref($add.ref(inline$WebSocketClose_trace_1_trace_1$0$e, $mul.ref(0, 524)), $mul.ref(4, 1));

..Atom:!$sle.ref.bool($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__196, $mul.ref(0, 524)), $mul.ref(4, 1)))), $bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__196, $mul.ref(0, 524)), $mul.ref(4, 1))))	
 Filtered atoms before true/false = !$sle.ref.bool($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__196, $mul.ref(0, 524)), $mul.ref(4, 1)))), $bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__196, $mul.ref(0, 524)), $mul.ref(4, 1))))
..
 Filtered atoms = !$sle.ref.bool($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__196, $mul.ref(0, 524)), $mul.ref(4, 1)))), $bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__196, $mul.ref(0, 524)), $mul.ref(4, 1))))
.
 Found a conjunctive cube cover !$sle.ref.bool($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__196, $mul.ref(0, 524)), $mul.ref(4, 1)))), $bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__196, $mul.ref(0, 524)), $mul.ref(4, 1))))



-------------------- Pre at Start in DNF [Size = 1] ---------------------
...Atom:!$sle.ref.bool($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__196, $mul.ref(0, 524)), $mul.ref(4, 1)))), $bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__196, $mul.ref(0, 524)), $mul.ref(4, 1))))	--------------------- Feasible Count = 1 ----------------------------
Disjunct = !$sle.ref.bool($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__196, $mul.ref(0, 524)), $mul.ref(4, 1)))), $bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__196, $mul.ref(0, 524)), $mul.ref(4, 1)))), IsNecessary= True
Disjunct = false, IsNecessary= False
.ExplainError Rootcause = !$sle.ref.bool($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__196, $mul.ref(0, 524)), $mul.ref(4, 1)))), $bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__196, $mul.ref(0, 524)), $mul.ref(4, 1))))


The list disjuncts
---------------------

	 !complex-obj6 
------------


The list of complex objs definitions 
	complex-obj0 ==> $mul.ref(0, 524)
	complex-obj1 ==> $add.ref(alloc_e_WebSocketClose__196, complex-obj0)
	complex-obj2 ==> $mul.ref(4, 1)
	complex-obj3 ==> $add.ref(complex-obj1, complex-obj2)
	complex-obj4 ==> $bitcast.ref.ref(complex-obj3)
	complex-obj5 ==> $base(complex-obj4)
	complex-obj6 ==> $sle.ref.bool(complex-obj5, complex-obj4)
[TAG: AV_DEBUG] The output of ExplainError => Status = SUCCESS Exprs = (!complex-obj6	)
[TAG: AV_DEBUG] List of used vars in $sle.ref.bool($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__196, $mul.ref(0, 524)), $mul.ref(4, 1)))), $bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__196, $mul.ref(0, 524)), $mul.ref(4, 1)))) => alloc_e_WebSocketClose__196
[TAG: AV_DEBUG] The substituted expression for $sle.ref.bool($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__196, $mul.ref(0, 524)), $mul.ref(4, 1)))), $bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__196, $mul.ref(0, 524)), $mul.ref(4, 1)))) is $sle.ref.bool($base($bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 524)), $mul.ref(4, 1)))), $bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 524)), $mul.ref(4, 1))))
[TAG: AV_OUTPUT] EXPLAINERROR-BLOCK :: (forall x_5: ref :: unknownTrigger_6(x_5) ==> $sle.ref.bool($base($bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 524)), $mul.ref(4, 1)))), $bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 524)), $mul.ref(4, 1)))))
Printing trace Trace2
Stubs used along the trace: {}
Checking inconsistency
CheckInconsistency: 3 soft constraints and 3 assertions (0 pruned)
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has a potential bug: True bug
Corral took: 0.63 seconds
CorralMain L_BAF_2 7
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has a potential bug: True bug
Corral took: 0.64 seconds
CorralMain L_BAF_0 7
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has a potential bug: True bug
Corral took: 0.61 seconds
CorralMain L_BAF_1 7
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has no bugs
Procedures that hit the recursion bound: 
Corral took: 0.29 seconds
Inconsistency check took: 2.51 seconds
Relaxing environment constraints
RelaxEnvironment: 0 env constraints and 3 assertions
[TAG: AV_DEBUG] Recursion Bound: 1
Setting Corral timeout to 0 seconds
Verifying program while tracking: {assertsPassed, $Alloc}
Program has a potential bug: True bug
Corral took: 0.69 seconds

Boogie verification time: 0.73 s
Time spent reading-writing programs: 10.02 s

Time spent checking a program (16): 5.60 s
Time spent checking a path (13): 3.83 s

Number of procedures inlined: 3
Time elapsed so far: 14.580544
List of non-cmd-line arguments to EE = 
ExplainError:Timeout = 1000
############# Implementation = CorralMain_SeqInstr_trace_1_trace_1 #################
ExplainError[Precond]: Num of conditionals considered by slice/Total Num conditionals = 0/0
ExplainError[Precond]: Num of relevant source lines considered by slice/Total source lines = 1/3
ExplainError[Precond]: Sliced Trace => 
	#### sourceFile = websocket.c, sourceLine = 32, 
		 assert assertsPassed;
	assertsPassed := $sle.ref.bool($base(inline$WebSocketMessage_trace_1_trace_1$0$inline$__SMACK_check_memory_safety$0$p), inline$WebSocketMessage_trace_1_trace_1$0$inline$__SMACK_check_memory_safety$0$p);
	inline$WebSocketMessage_trace_1_trace_1$0$inline$__SMACK_check_memory_safety$0$p := inline$WebSocketMessage_trace_1_trace_1$0$$p2;
	inline$WebSocketMessage_trace_1_trace_1$0$$p2 := $bitcast.ref.ref(inline$WebSocketMessage_trace_1_trace_1$0$$p1);
	inline$WebSocketMessage_trace_1_trace_1$0$$p1 := $add.ref($add.ref(inline$WebSocketMessage_trace_1_trace_1$0$e, $mul.ref(0, 16)), $mul.ref(4, 1));

..Atom:!$sle.ref.bool($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__251, $mul.ref(0, 16)), $mul.ref(4, 1)))), $bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__251, $mul.ref(0, 16)), $mul.ref(4, 1))))	
 Filtered atoms before true/false = !$sle.ref.bool($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__251, $mul.ref(0, 16)), $mul.ref(4, 1)))), $bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__251, $mul.ref(0, 16)), $mul.ref(4, 1))))
..
 Filtered atoms = !$sle.ref.bool($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__251, $mul.ref(0, 16)), $mul.ref(4, 1)))), $bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__251, $mul.ref(0, 16)), $mul.ref(4, 1))))
.
 Found a conjunctive cube cover !$sle.ref.bool($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__251, $mul.ref(0, 16)), $mul.ref(4, 1)))), $bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__251, $mul.ref(0, 16)), $mul.ref(4, 1))))



-------------------- Pre at Start in DNF [Size = 1] ---------------------
...Atom:!$sle.ref.bool($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__251, $mul.ref(0, 16)), $mul.ref(4, 1)))), $bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__251, $mul.ref(0, 16)), $mul.ref(4, 1))))	--------------------- Feasible Count = 1 ----------------------------
Disjunct = !$sle.ref.bool($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__251, $mul.ref(0, 16)), $mul.ref(4, 1)))), $bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__251, $mul.ref(0, 16)), $mul.ref(4, 1)))), IsNecessary= True
Disjunct = false, IsNecessary= False
.ExplainError Rootcause = !$sle.ref.bool($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__251, $mul.ref(0, 16)), $mul.ref(4, 1)))), $bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__251, $mul.ref(0, 16)), $mul.ref(4, 1))))


The list disjuncts
---------------------

	 !complex-obj6 
------------


The list of complex objs definitions 
	complex-obj0 ==> $mul.ref(0, 16)
	complex-obj1 ==> $add.ref(alloc_e_WebSocketMessage__251, complex-obj0)
	complex-obj2 ==> $mul.ref(4, 1)
	complex-obj3 ==> $add.ref(complex-obj1, complex-obj2)
	complex-obj4 ==> $bitcast.ref.ref(complex-obj3)
	complex-obj5 ==> $base(complex-obj4)
	complex-obj6 ==> $sle.ref.bool(complex-obj5, complex-obj4)
[TAG: AV_DEBUG] The output of ExplainError => Status = SUCCESS Exprs = (!complex-obj6	)
[TAG: AV_DEBUG] List of used vars in $sle.ref.bool($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__251, $mul.ref(0, 16)), $mul.ref(4, 1)))), $bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__251, $mul.ref(0, 16)), $mul.ref(4, 1)))) => alloc_e_WebSocketMessage__251
[TAG: AV_DEBUG] The substituted expression for $sle.ref.bool($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__251, $mul.ref(0, 16)), $mul.ref(4, 1)))), $bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__251, $mul.ref(0, 16)), $mul.ref(4, 1)))) is $sle.ref.bool($base($bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 16)), $mul.ref(4, 1)))), $bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 16)), $mul.ref(4, 1))))
[TAG: AV_OUTPUT] EXPLAINERROR-BLOCK :: (forall x_5: ref :: unknownTrigger_4(x_5) ==> $sle.ref.bool($base($bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 16)), $mul.ref(4, 1)))), $bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 16)), $mul.ref(4, 1)))))
Printing trace Trace3
Stubs used along the trace: {}
Checking inconsistency
CheckInconsistency: 4 soft constraints and 3 assertions (0 pruned)
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has a potential bug: True bug
Corral took: 0.65 seconds
CorralMain L_BAF_2 7
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has a potential bug: True bug
Corral took: 0.65 seconds
CorralMain L_BAF_0 7
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has a potential bug: True bug
Corral took: 0.65 seconds
CorralMain L_BAF_1 7
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has no bugs
Procedures that hit the recursion bound: 
Corral took: 0.28 seconds
Inconsistency check took: 2.56 seconds
Relaxing environment constraints
RelaxEnvironment: 0 env constraints and 3 assertions
[TAG: AV_DEBUG] Recursion Bound: 1
Setting Corral timeout to 0 seconds
Verifying program while tracking: {assertsPassed, $Alloc}
Program has a potential bug: True bug
Corral took: 0.68 seconds

Boogie verification time: 0.92 s
Time spent reading-writing programs: 13.07 s

Time spent checking a program (21): 7.36 s
Time spent checking a path (17): 4.97 s

Number of procedures inlined: 3
Time elapsed so far: 19.194927
List of non-cmd-line arguments to EE = 
ExplainError:Timeout = 1000
############# Implementation = CorralMain_SeqInstr_trace_1_trace_1 #################
ExplainError[Precond]: Num of conditionals considered by slice/Total Num conditionals = 0/0
ExplainError[Precond]: Num of relevant source lines considered by slice/Total source lines = 1/2
ExplainError[Precond]: Sliced Trace => 
	#### sourceFile = websocket.c, sourceLine = 20, 
		 assert assertsPassed;
	assertsPassed := $sle.ref.bool($add.ref(inline$WebSocketClose_trace_1_trace_1$0$inline$__SMACK_check_memory_safety$0$p, inline$WebSocketClose_trace_1_trace_1$0$inline$__SMACK_check_memory_safety$0$size), $add.ref($base(inline$WebSocketClose_trace_1_trace_1$0$inline$__SMACK_check_memory_safety$0$p), $Size($base(inline$WebSocketClose_trace_1_trace_1$0$inline$__SMACK_check_memory_safety$0$p))));
	inline$WebSocketClose_trace_1_trace_1$0$inline$__SMACK_check_memory_safety$0$size := inline$WebSocketClose_trace_1_trace_1$0$$p2;
	inline$WebSocketClose_trace_1_trace_1$0$inline$__SMACK_check_memory_safety$0$p := inline$WebSocketClose_trace_1_trace_1$0$$p1;
	inline$WebSocketClose_trace_1_trace_1$0$$p2 := $bitcast.ref.ref($i2p.i64.ref(4));
	inline$WebSocketClose_trace_1_trace_1$0$$p1 := $bitcast.ref.ref(inline$WebSocketClose_trace_1_trace_1$0$$p0);
	inline$WebSocketClose_trace_1_trace_1$0$$p0 := $add.ref($add.ref(inline$WebSocketClose_trace_1_trace_1$0$e, $mul.ref(0, 524)), $mul.ref(4, 1));

..Atom:!$sle.ref.bool($add.ref($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__356, $mul.ref(0, 524)), $mul.ref(4, 1))), $bitcast.ref.ref($i2p.i64.ref(4))), $add.ref($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__356, $mul.ref(0, 524)), $mul.ref(4, 1)))), $Size($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__356, $mul.ref(0, 524)), $mul.ref(4, 1)))))))	
 Filtered atoms before true/false = !$sle.ref.bool($add.ref($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__356, $mul.ref(0, 524)), $mul.ref(4, 1))), $bitcast.ref.ref($i2p.i64.ref(4))), $add.ref($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__356, $mul.ref(0, 524)), $mul.ref(4, 1)))), $Size($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__356, $mul.ref(0, 524)), $mul.ref(4, 1)))))))
..
 Filtered atoms = !$sle.ref.bool($add.ref($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__356, $mul.ref(0, 524)), $mul.ref(4, 1))), $bitcast.ref.ref($i2p.i64.ref(4))), $add.ref($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__356, $mul.ref(0, 524)), $mul.ref(4, 1)))), $Size($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__356, $mul.ref(0, 524)), $mul.ref(4, 1)))))))
.
 Found a conjunctive cube cover !$sle.ref.bool($add.ref($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__356, $mul.ref(0, 524)), $mul.ref(4, 1))), $bitcast.ref.ref($i2p.i64.ref(4))), $add.ref($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__356, $mul.ref(0, 524)), $mul.ref(4, 1)))), $Size($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__356, $mul.ref(0, 524)), $mul.ref(4, 1)))))))



-------------------- Pre at Start in DNF [Size = 1] ---------------------
...Atom:!$sle.ref.bool($add.ref($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__356, $mul.ref(0, 524)), $mul.ref(4, 1))), $bitcast.ref.ref($i2p.i64.ref(4))), $add.ref($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__356, $mul.ref(0, 524)), $mul.ref(4, 1)))), $Size($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__356, $mul.ref(0, 524)), $mul.ref(4, 1)))))))	--------------------- Feasible Count = 1 ----------------------------
Disjunct = !$sle.ref.bool($add.ref($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__356, $mul.ref(0, 524)), $mul.ref(4, 1))), $bitcast.ref.ref($i2p.i64.ref(4))), $add.ref($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__356, $mul.ref(0, 524)), $mul.ref(4, 1)))), $Size($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__356, $mul.ref(0, 524)), $mul.ref(4, 1))))))), IsNecessary= True
Disjunct = false, IsNecessary= False
.ExplainError Rootcause = !$sle.ref.bool($add.ref($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__356, $mul.ref(0, 524)), $mul.ref(4, 1))), $bitcast.ref.ref($i2p.i64.ref(4))), $add.ref($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__356, $mul.ref(0, 524)), $mul.ref(4, 1)))), $Size($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__356, $mul.ref(0, 524)), $mul.ref(4, 1)))))))


The list disjuncts
---------------------

	 !complex-obj11 
------------


The list of complex objs definitions 
	complex-obj0 ==> $mul.ref(0, 524)
	complex-obj1 ==> $add.ref(alloc_e_WebSocketClose__356, complex-obj0)
	complex-obj2 ==> $mul.ref(4, 1)
	complex-obj3 ==> $add.ref(complex-obj1, complex-obj2)
	complex-obj4 ==> $bitcast.ref.ref(complex-obj3)
	complex-obj5 ==> $i2p.i64.ref(4)
	complex-obj6 ==> $bitcast.ref.ref(complex-obj5)
	complex-obj7 ==> $add.ref(complex-obj4, complex-obj6)
	complex-obj8 ==> $base(complex-obj4)
	complex-obj9 ==> $Size(complex-obj8)
	complex-obj10 ==> $add.ref(complex-obj8, complex-obj9)
	complex-obj11 ==> $sle.ref.bool(complex-obj7, complex-obj10)
[TAG: AV_DEBUG] The output of ExplainError => Status = SUCCESS Exprs = (!complex-obj11	)
[TAG: AV_DEBUG] List of used vars in $sle.ref.bool($add.ref($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__356, $mul.ref(0, 524)), $mul.ref(4, 1))), $bitcast.ref.ref($i2p.i64.ref(4))), $add.ref($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__356, $mul.ref(0, 524)), $mul.ref(4, 1)))), $Size($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__356, $mul.ref(0, 524)), $mul.ref(4, 1))))))) => alloc_e_WebSocketClose__356
[TAG: AV_DEBUG] The substituted expression for $sle.ref.bool($add.ref($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__356, $mul.ref(0, 524)), $mul.ref(4, 1))), $bitcast.ref.ref($i2p.i64.ref(4))), $add.ref($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__356, $mul.ref(0, 524)), $mul.ref(4, 1)))), $Size($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__356, $mul.ref(0, 524)), $mul.ref(4, 1))))))) is $sle.ref.bool($add.ref($bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 524)), $mul.ref(4, 1))), $bitcast.ref.ref($i2p.i64.ref(4))), $add.ref($base($bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 524)), $mul.ref(4, 1)))), $Size($base($bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 524)), $mul.ref(4, 1)))))))
[TAG: AV_OUTPUT] EXPLAINERROR-BLOCK :: (forall x_5: ref :: unknownTrigger_6(x_5) ==> $sle.ref.bool($add.ref($bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 524)), $mul.ref(4, 1))), $bitcast.ref.ref($i2p.i64.ref(4))), $add.ref($base($bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 524)), $mul.ref(4, 1)))), $Size($base($bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 524)), $mul.ref(4, 1))))))))
Printing trace Trace4
Stubs used along the trace: {}
Checking inconsistency
CheckInconsistency: 5 soft constraints and 3 assertions (0 pruned)
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has a potential bug: True bug
Corral took: 0.66 seconds
CorralMain L_BAF_2 7
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has a potential bug: True bug
Corral took: 0.65 seconds
CorralMain L_BAF_0 7
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has a potential bug: True bug
Corral took: 0.64 seconds
CorralMain L_BAF_1 7
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has no bugs
Procedures that hit the recursion bound: 
Corral took: 0.30 seconds
Inconsistency check took: 2.58 seconds
Relaxing environment constraints
RelaxEnvironment: 0 env constraints and 3 assertions
[TAG: AV_DEBUG] Recursion Bound: 1
Setting Corral timeout to 0 seconds
Verifying program while tracking: {assertsPassed, $Alloc}
Program has a potential bug: True bug
Corral took: 0.69 seconds

Boogie verification time: 1.12 s
Time spent reading-writing programs: 16.14 s

Time spent checking a program (26): 9.11 s
Time spent checking a path (21): 6.15 s

Number of procedures inlined: 3
Time elapsed so far: 23.802106
List of non-cmd-line arguments to EE = 
ExplainError:Timeout = 1000
############# Implementation = CorralMain_SeqInstr_trace_1_trace_1 #################
ExplainError[Precond]: Num of conditionals considered by slice/Total Num conditionals = 0/0
ExplainError[Precond]: Num of relevant source lines considered by slice/Total source lines = 1/3
ExplainError[Precond]: Sliced Trace => 
	#### sourceFile = websocket.c, sourceLine = 32, 
		 assert assertsPassed;
	assertsPassed := $sle.ref.bool($add.ref(inline$WebSocketMessage_trace_1_trace_1$0$inline$__SMACK_check_memory_safety$0$p, inline$WebSocketMessage_trace_1_trace_1$0$inline$__SMACK_check_memory_safety$0$size), $add.ref($base(inline$WebSocketMessage_trace_1_trace_1$0$inline$__SMACK_check_memory_safety$0$p), $Size($base(inline$WebSocketMessage_trace_1_trace_1$0$inline$__SMACK_check_memory_safety$0$p))));
	inline$WebSocketMessage_trace_1_trace_1$0$inline$__SMACK_check_memory_safety$0$size := inline$WebSocketMessage_trace_1_trace_1$0$$p3;
	inline$WebSocketMessage_trace_1_trace_1$0$inline$__SMACK_check_memory_safety$0$p := inline$WebSocketMessage_trace_1_trace_1$0$$p2;
	inline$WebSocketMessage_trace_1_trace_1$0$$p3 := $bitcast.ref.ref($i2p.i64.ref(4));
	inline$WebSocketMessage_trace_1_trace_1$0$$p2 := $bitcast.ref.ref(inline$WebSocketMessage_trace_1_trace_1$0$$p1);
	inline$WebSocketMessage_trace_1_trace_1$0$$p1 := $add.ref($add.ref(inline$WebSocketMessage_trace_1_trace_1$0$e, $mul.ref(0, 16)), $mul.ref(4, 1));

..Atom:!$sle.ref.bool($add.ref($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__411, $mul.ref(0, 16)), $mul.ref(4, 1))), $bitcast.ref.ref($i2p.i64.ref(4))), $add.ref($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__411, $mul.ref(0, 16)), $mul.ref(4, 1)))), $Size($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__411, $mul.ref(0, 16)), $mul.ref(4, 1)))))))	
 Filtered atoms before true/false = !$sle.ref.bool($add.ref($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__411, $mul.ref(0, 16)), $mul.ref(4, 1))), $bitcast.ref.ref($i2p.i64.ref(4))), $add.ref($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__411, $mul.ref(0, 16)), $mul.ref(4, 1)))), $Size($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__411, $mul.ref(0, 16)), $mul.ref(4, 1)))))))
..
 Filtered atoms = !$sle.ref.bool($add.ref($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__411, $mul.ref(0, 16)), $mul.ref(4, 1))), $bitcast.ref.ref($i2p.i64.ref(4))), $add.ref($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__411, $mul.ref(0, 16)), $mul.ref(4, 1)))), $Size($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__411, $mul.ref(0, 16)), $mul.ref(4, 1)))))))
.
 Found a conjunctive cube cover !$sle.ref.bool($add.ref($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__411, $mul.ref(0, 16)), $mul.ref(4, 1))), $bitcast.ref.ref($i2p.i64.ref(4))), $add.ref($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__411, $mul.ref(0, 16)), $mul.ref(4, 1)))), $Size($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__411, $mul.ref(0, 16)), $mul.ref(4, 1)))))))



-------------------- Pre at Start in DNF [Size = 1] ---------------------
...Atom:!$sle.ref.bool($add.ref($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__411, $mul.ref(0, 16)), $mul.ref(4, 1))), $bitcast.ref.ref($i2p.i64.ref(4))), $add.ref($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__411, $mul.ref(0, 16)), $mul.ref(4, 1)))), $Size($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__411, $mul.ref(0, 16)), $mul.ref(4, 1)))))))	--------------------- Feasible Count = 1 ----------------------------
Disjunct = !$sle.ref.bool($add.ref($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__411, $mul.ref(0, 16)), $mul.ref(4, 1))), $bitcast.ref.ref($i2p.i64.ref(4))), $add.ref($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__411, $mul.ref(0, 16)), $mul.ref(4, 1)))), $Size($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__411, $mul.ref(0, 16)), $mul.ref(4, 1))))))), IsNecessary= True
Disjunct = false, IsNecessary= False
.ExplainError Rootcause = !$sle.ref.bool($add.ref($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__411, $mul.ref(0, 16)), $mul.ref(4, 1))), $bitcast.ref.ref($i2p.i64.ref(4))), $add.ref($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__411, $mul.ref(0, 16)), $mul.ref(4, 1)))), $Size($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__411, $mul.ref(0, 16)), $mul.ref(4, 1)))))))


The list disjuncts
---------------------

	 !complex-obj11 
------------


The list of complex objs definitions 
	complex-obj0 ==> $mul.ref(0, 16)
	complex-obj1 ==> $add.ref(alloc_e_WebSocketMessage__411, complex-obj0)
	complex-obj2 ==> $mul.ref(4, 1)
	complex-obj3 ==> $add.ref(complex-obj1, complex-obj2)
	complex-obj4 ==> $bitcast.ref.ref(complex-obj3)
	complex-obj5 ==> $i2p.i64.ref(4)
	complex-obj6 ==> $bitcast.ref.ref(complex-obj5)
	complex-obj7 ==> $add.ref(complex-obj4, complex-obj6)
	complex-obj8 ==> $base(complex-obj4)
	complex-obj9 ==> $Size(complex-obj8)
	complex-obj10 ==> $add.ref(complex-obj8, complex-obj9)
	complex-obj11 ==> $sle.ref.bool(complex-obj7, complex-obj10)
[TAG: AV_DEBUG] The output of ExplainError => Status = SUCCESS Exprs = (!complex-obj11	)
[TAG: AV_DEBUG] List of used vars in $sle.ref.bool($add.ref($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__411, $mul.ref(0, 16)), $mul.ref(4, 1))), $bitcast.ref.ref($i2p.i64.ref(4))), $add.ref($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__411, $mul.ref(0, 16)), $mul.ref(4, 1)))), $Size($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__411, $mul.ref(0, 16)), $mul.ref(4, 1))))))) => alloc_e_WebSocketMessage__411
[TAG: AV_DEBUG] The substituted expression for $sle.ref.bool($add.ref($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__411, $mul.ref(0, 16)), $mul.ref(4, 1))), $bitcast.ref.ref($i2p.i64.ref(4))), $add.ref($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__411, $mul.ref(0, 16)), $mul.ref(4, 1)))), $Size($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__411, $mul.ref(0, 16)), $mul.ref(4, 1))))))) is $sle.ref.bool($add.ref($bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 16)), $mul.ref(4, 1))), $bitcast.ref.ref($i2p.i64.ref(4))), $add.ref($base($bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 16)), $mul.ref(4, 1)))), $Size($base($bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 16)), $mul.ref(4, 1)))))))
[TAG: AV_OUTPUT] EXPLAINERROR-BLOCK :: (forall x_5: ref :: unknownTrigger_4(x_5) ==> $sle.ref.bool($add.ref($bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 16)), $mul.ref(4, 1))), $bitcast.ref.ref($i2p.i64.ref(4))), $add.ref($base($bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 16)), $mul.ref(4, 1)))), $Size($base($bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 16)), $mul.ref(4, 1))))))))
Printing trace Trace5
Stubs used along the trace: {}
Checking inconsistency
CheckInconsistency: 6 soft constraints and 3 assertions (0 pruned)
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has a potential bug: True bug
Corral took: 0.67 seconds
CorralMain L_BAF_2 7
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has a potential bug: True bug
Corral took: 0.65 seconds
CorralMain L_BAF_0 7
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has a potential bug: True bug
Corral took: 0.63 seconds
CorralMain L_BAF_1 7
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has no bugs
Procedures that hit the recursion bound: 
Corral took: 0.29 seconds
Inconsistency check took: 2.58 seconds
Relaxing environment constraints
RelaxEnvironment: 0 env constraints and 3 assertions
[TAG: AV_DEBUG] Recursion Bound: 1
Setting Corral timeout to 0 seconds
Verifying program while tracking: {assertsPassed, $Alloc}
Program has a potential bug: True bug
Corral took: 0.67 seconds

Boogie verification time: 1.31 s
Time spent reading-writing programs: 19.22 s

Time spent checking a program (31): 10.79 s
Time spent checking a path (25): 7.37 s

Number of procedures inlined: 3
Time elapsed so far: 28.473396
List of non-cmd-line arguments to EE = 
ExplainError:Timeout = 1000
############# Implementation = CorralMain_SeqInstr_trace_1_trace_1 #################
ExplainError[Precond]: Num of conditionals considered by slice/Total Num conditionals = 0/0
ExplainError[Precond]: Num of relevant source lines considered by slice/Total source lines = 1/4
ExplainError[Precond]: Sliced Trace => 
	#### sourceFile = websocket.c, sourceLine = 20, 
		 assert assertsPassed;
	assertsPassed := $sle.ref.bool($add.ref(inline$WebSocketClose_trace_1_trace_1$0$inline$__SMACK_check_memory_safety$1$p, inline$WebSocketClose_trace_1_trace_1$0$inline$__SMACK_check_memory_safety$1$size), $add.ref($base(inline$WebSocketClose_trace_1_trace_1$0$inline$__SMACK_check_memory_safety$1$p), $Size($base(inline$WebSocketClose_trace_1_trace_1$0$inline$__SMACK_check_memory_safety$1$p))));
	inline$WebSocketClose_trace_1_trace_1$0$inline$__SMACK_check_memory_safety$1$size := inline$WebSocketClose_trace_1_trace_1$0$$p6;
	inline$WebSocketClose_trace_1_trace_1$0$inline$__SMACK_check_memory_safety$1$p := inline$WebSocketClose_trace_1_trace_1$0$$p5;
	inline$WebSocketClose_trace_1_trace_1$0$$p6 := $bitcast.ref.ref($i2p.i64.ref(2));
	inline$WebSocketClose_trace_1_trace_1$0$$p5 := $bitcast.ref.ref(inline$WebSocketClose_trace_1_trace_1$0$$p4);
	inline$WebSocketClose_trace_1_trace_1$0$$p4 := $add.ref($add.ref(inline$WebSocketClose_trace_1_trace_1$0$e, $mul.ref(0, 524)), $mul.ref(8, 1));

..Atom:!$sle.ref.bool($add.ref($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__516, $mul.ref(0, 524)), $mul.ref(8, 1))), $bitcast.ref.ref($i2p.i64.ref(2))), $add.ref($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__516, $mul.ref(0, 524)), $mul.ref(8, 1)))), $Size($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__516, $mul.ref(0, 524)), $mul.ref(8, 1)))))))	
 Filtered atoms before true/false = !$sle.ref.bool($add.ref($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__516, $mul.ref(0, 524)), $mul.ref(8, 1))), $bitcast.ref.ref($i2p.i64.ref(2))), $add.ref($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__516, $mul.ref(0, 524)), $mul.ref(8, 1)))), $Size($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__516, $mul.ref(0, 524)), $mul.ref(8, 1)))))))
..
 Filtered atoms = !$sle.ref.bool($add.ref($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__516, $mul.ref(0, 524)), $mul.ref(8, 1))), $bitcast.ref.ref($i2p.i64.ref(2))), $add.ref($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__516, $mul.ref(0, 524)), $mul.ref(8, 1)))), $Size($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__516, $mul.ref(0, 524)), $mul.ref(8, 1)))))))
.
 Found a conjunctive cube cover !$sle.ref.bool($add.ref($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__516, $mul.ref(0, 524)), $mul.ref(8, 1))), $bitcast.ref.ref($i2p.i64.ref(2))), $add.ref($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__516, $mul.ref(0, 524)), $mul.ref(8, 1)))), $Size($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__516, $mul.ref(0, 524)), $mul.ref(8, 1)))))))



-------------------- Pre at Start in DNF [Size = 1] ---------------------
...Atom:!$sle.ref.bool($add.ref($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__516, $mul.ref(0, 524)), $mul.ref(8, 1))), $bitcast.ref.ref($i2p.i64.ref(2))), $add.ref($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__516, $mul.ref(0, 524)), $mul.ref(8, 1)))), $Size($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__516, $mul.ref(0, 524)), $mul.ref(8, 1)))))))	--------------------- Feasible Count = 1 ----------------------------
Disjunct = !$sle.ref.bool($add.ref($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__516, $mul.ref(0, 524)), $mul.ref(8, 1))), $bitcast.ref.ref($i2p.i64.ref(2))), $add.ref($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__516, $mul.ref(0, 524)), $mul.ref(8, 1)))), $Size($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__516, $mul.ref(0, 524)), $mul.ref(8, 1))))))), IsNecessary= True
Disjunct = false, IsNecessary= False
.ExplainError Rootcause = !$sle.ref.bool($add.ref($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__516, $mul.ref(0, 524)), $mul.ref(8, 1))), $bitcast.ref.ref($i2p.i64.ref(2))), $add.ref($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__516, $mul.ref(0, 524)), $mul.ref(8, 1)))), $Size($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__516, $mul.ref(0, 524)), $mul.ref(8, 1)))))))


The list disjuncts
---------------------

	 !complex-obj11 
------------


The list of complex objs definitions 
	complex-obj0 ==> $mul.ref(0, 524)
	complex-obj1 ==> $add.ref(alloc_e_WebSocketClose__516, complex-obj0)
	complex-obj2 ==> $mul.ref(8, 1)
	complex-obj3 ==> $add.ref(complex-obj1, complex-obj2)
	complex-obj4 ==> $bitcast.ref.ref(complex-obj3)
	complex-obj5 ==> $i2p.i64.ref(2)
	complex-obj6 ==> $bitcast.ref.ref(complex-obj5)
	complex-obj7 ==> $add.ref(complex-obj4, complex-obj6)
	complex-obj8 ==> $base(complex-obj4)
	complex-obj9 ==> $Size(complex-obj8)
	complex-obj10 ==> $add.ref(complex-obj8, complex-obj9)
	complex-obj11 ==> $sle.ref.bool(complex-obj7, complex-obj10)
[TAG: AV_DEBUG] The output of ExplainError => Status = SUCCESS Exprs = (!complex-obj11	)
[TAG: AV_DEBUG] List of used vars in $sle.ref.bool($add.ref($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__516, $mul.ref(0, 524)), $mul.ref(8, 1))), $bitcast.ref.ref($i2p.i64.ref(2))), $add.ref($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__516, $mul.ref(0, 524)), $mul.ref(8, 1)))), $Size($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__516, $mul.ref(0, 524)), $mul.ref(8, 1))))))) => alloc_e_WebSocketClose__516
[TAG: AV_DEBUG] The substituted expression for $sle.ref.bool($add.ref($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__516, $mul.ref(0, 524)), $mul.ref(8, 1))), $bitcast.ref.ref($i2p.i64.ref(2))), $add.ref($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__516, $mul.ref(0, 524)), $mul.ref(8, 1)))), $Size($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__516, $mul.ref(0, 524)), $mul.ref(8, 1))))))) is $sle.ref.bool($add.ref($bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 524)), $mul.ref(8, 1))), $bitcast.ref.ref($i2p.i64.ref(2))), $add.ref($base($bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 524)), $mul.ref(8, 1)))), $Size($base($bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 524)), $mul.ref(8, 1)))))))
[TAG: AV_OUTPUT] EXPLAINERROR-BLOCK :: (forall x_5: ref :: unknownTrigger_6(x_5) ==> $sle.ref.bool($add.ref($bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 524)), $mul.ref(8, 1))), $bitcast.ref.ref($i2p.i64.ref(2))), $add.ref($base($bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 524)), $mul.ref(8, 1)))), $Size($base($bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 524)), $mul.ref(8, 1))))))))
Printing trace Trace6
Stubs used along the trace: {}
Checking inconsistency
CheckInconsistency: 7 soft constraints and 3 assertions (0 pruned)
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has a potential bug: True bug
Corral took: 0.64 seconds
CorralMain L_BAF_2 7
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has a potential bug: True bug
Corral took: 0.65 seconds
CorralMain L_BAF_0 7
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has a potential bug: True bug
Corral took: 0.66 seconds
CorralMain L_BAF_1 7
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has no bugs
Procedures that hit the recursion bound: 
Corral took: 0.29 seconds
Inconsistency check took: 2.58 seconds
Relaxing environment constraints
RelaxEnvironment: 0 env constraints and 3 assertions
[TAG: AV_DEBUG] Recursion Bound: 1
Setting Corral timeout to 0 seconds
Verifying program while tracking: {assertsPassed, $Alloc}
Program has a potential bug: True bug
Corral took: 0.70 seconds

Boogie verification time: 1.50 s
Time spent reading-writing programs: 22.28 s

Time spent checking a program (36): 12.51 s
Time spent checking a path (29): 8.59 s

Number of procedures inlined: 3
Time elapsed so far: 33.142504
List of non-cmd-line arguments to EE = 
ExplainError:Timeout = 1000
############# Implementation = CorralMain_SeqInstr_trace_1_trace_1 #################
ExplainError[Precond]: Num of conditionals considered by slice/Total Num conditionals = 0/0
ExplainError[Precond]: Num of relevant source lines considered by slice/Total source lines = 1/4
ExplainError[Precond]: Sliced Trace => 
	#### sourceFile = websocket.c, sourceLine = 20, 
		 assert assertsPassed;
	assertsPassed := $Alloc[$base(inline$WebSocketClose_trace_1_trace_1$0$inline$__SMACK_check_memory_safety$1$p)];
	inline$WebSocketClose_trace_1_trace_1$0$inline$__SMACK_check_memory_safety$1$p := inline$WebSocketClose_trace_1_trace_1$0$$p5;
	inline$WebSocketClose_trace_1_trace_1$0$$p5 := $bitcast.ref.ref(inline$WebSocketClose_trace_1_trace_1$0$$p4);
	inline$WebSocketClose_trace_1_trace_1$0$$p4 := $add.ref($add.ref(inline$WebSocketClose_trace_1_trace_1$0$e, $mul.ref(0, 524)), $mul.ref(8, 1));

..Atom:!$Alloc[$base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__571, $mul.ref(0, 524)), $mul.ref(8, 1))))]	
 Filtered atoms before true/false = !$Alloc[$base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__571, $mul.ref(0, 524)), $mul.ref(8, 1))))]
..
 Filtered atoms = !$Alloc[$base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__571, $mul.ref(0, 524)), $mul.ref(8, 1))))]
.
 Found a conjunctive cube cover !$Alloc[$base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__571, $mul.ref(0, 524)), $mul.ref(8, 1))))]



-------------------- Pre at Start in DNF [Size = 1] ---------------------
...Atom:!$Alloc[$base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__571, $mul.ref(0, 524)), $mul.ref(8, 1))))]	--------------------- Feasible Count = 1 ----------------------------
Disjunct = !$Alloc[$base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__571, $mul.ref(0, 524)), $mul.ref(8, 1))))], IsNecessary= True
Disjunct = false, IsNecessary= False
.ExplainError Rootcause = !$Alloc[$base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__571, $mul.ref(0, 524)), $mul.ref(8, 1))))]


The list disjuncts
---------------------

	 !complex-obj6 
------------


The list of complex objs definitions 
	complex-obj0 ==> $mul.ref(0, 524)
	complex-obj1 ==> $add.ref(alloc_e_WebSocketClose__571, complex-obj0)
	complex-obj2 ==> $mul.ref(8, 1)
	complex-obj3 ==> $add.ref(complex-obj1, complex-obj2)
	complex-obj4 ==> $bitcast.ref.ref(complex-obj3)
	complex-obj5 ==> $base(complex-obj4)
	complex-obj6 ==> $Alloc[complex-obj5]
[TAG: AV_DEBUG] The output of ExplainError => Status = SUCCESS Exprs = (!complex-obj6	)
[TAG: AV_DEBUG] List of used vars in $Alloc[$base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__571, $mul.ref(0, 524)), $mul.ref(8, 1))))] => $Alloc, alloc_e_WebSocketClose__571
[TAG: AV_DEBUG] The substituted expression for $Alloc[$base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__571, $mul.ref(0, 524)), $mul.ref(8, 1))))] is $Alloc[$base($bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 524)), $mul.ref(8, 1))))]
[TAG: AV_OUTPUT] EXPLAINERROR-BLOCK :: (forall x_5: ref :: unknownTrigger_6(x_5) ==> $Alloc[$base($bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 524)), $mul.ref(8, 1))))])
Printing trace Trace7
Stubs used along the trace: {}
Checking inconsistency
CheckInconsistency: 8 soft constraints and 3 assertions (0 pruned)
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has a potential bug: True bug
Corral took: 0.67 seconds
CorralMain L_BAF_2 7
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has a potential bug: True bug
Corral took: 0.62 seconds
CorralMain L_BAF_0 7
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has a potential bug: True bug
Corral took: 0.65 seconds
CorralMain L_BAF_1 7
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has no bugs
Procedures that hit the recursion bound: 
Corral took: 0.28 seconds
Inconsistency check took: 2.56 seconds
Relaxing environment constraints
RelaxEnvironment: 0 env constraints and 3 assertions
[TAG: AV_DEBUG] Recursion Bound: 1
Setting Corral timeout to 0 seconds
Verifying program while tracking: {assertsPassed, $Alloc}
Program has a potential bug: True bug
Corral took: 0.71 seconds

Boogie verification time: 1.71 s
Time spent reading-writing programs: 25.33 s

Time spent checking a program (41): 14.24 s
Time spent checking a path (33): 9.78 s

Number of procedures inlined: 3
Time elapsed so far: 37.803404
List of non-cmd-line arguments to EE = 
ExplainError:Timeout = 1000
############# Implementation = CorralMain_SeqInstr_trace_1_trace_1 #################
ExplainError[Precond]: Num of conditionals considered by slice/Total Num conditionals = 0/0
ExplainError[Precond]: Num of relevant source lines considered by slice/Total source lines = 1/5
ExplainError[Precond]: Sliced Trace => 
	#### sourceFile = websocket.c, sourceLine = 32, 
		 assert assertsPassed;
	assertsPassed := $sle.ref.bool($add.ref(inline$WebSocketMessage_trace_1_trace_1$0$inline$__SMACK_check_memory_safety$1$p, inline$WebSocketMessage_trace_1_trace_1$0$inline$__SMACK_check_memory_safety$1$size), $add.ref($base(inline$WebSocketMessage_trace_1_trace_1$0$inline$__SMACK_check_memory_safety$1$p), $Size($base(inline$WebSocketMessage_trace_1_trace_1$0$inline$__SMACK_check_memory_safety$1$p))));
	inline$WebSocketMessage_trace_1_trace_1$0$inline$__SMACK_check_memory_safety$1$size := inline$WebSocketMessage_trace_1_trace_1$0$$p7;
	inline$WebSocketMessage_trace_1_trace_1$0$inline$__SMACK_check_memory_safety$1$p := inline$WebSocketMessage_trace_1_trace_1$0$$p6;
	inline$WebSocketMessage_trace_1_trace_1$0$$p7 := $bitcast.ref.ref($i2p.i64.ref(4));
	inline$WebSocketMessage_trace_1_trace_1$0$$p6 := $bitcast.ref.ref(inline$WebSocketMessage_trace_1_trace_1$0$$p5);
	inline$WebSocketMessage_trace_1_trace_1$0$$p5 := $add.ref($add.ref(inline$WebSocketMessage_trace_1_trace_1$0$e, $mul.ref(0, 16)), $mul.ref(8, 1));

..Atom:!$sle.ref.bool($add.ref($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__626, $mul.ref(0, 16)), $mul.ref(8, 1))), $bitcast.ref.ref($i2p.i64.ref(4))), $add.ref($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__626, $mul.ref(0, 16)), $mul.ref(8, 1)))), $Size($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__626, $mul.ref(0, 16)), $mul.ref(8, 1)))))))	
 Filtered atoms before true/false = !$sle.ref.bool($add.ref($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__626, $mul.ref(0, 16)), $mul.ref(8, 1))), $bitcast.ref.ref($i2p.i64.ref(4))), $add.ref($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__626, $mul.ref(0, 16)), $mul.ref(8, 1)))), $Size($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__626, $mul.ref(0, 16)), $mul.ref(8, 1)))))))
..
 Filtered atoms = !$sle.ref.bool($add.ref($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__626, $mul.ref(0, 16)), $mul.ref(8, 1))), $bitcast.ref.ref($i2p.i64.ref(4))), $add.ref($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__626, $mul.ref(0, 16)), $mul.ref(8, 1)))), $Size($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__626, $mul.ref(0, 16)), $mul.ref(8, 1)))))))
.
 Found a conjunctive cube cover !$sle.ref.bool($add.ref($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__626, $mul.ref(0, 16)), $mul.ref(8, 1))), $bitcast.ref.ref($i2p.i64.ref(4))), $add.ref($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__626, $mul.ref(0, 16)), $mul.ref(8, 1)))), $Size($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__626, $mul.ref(0, 16)), $mul.ref(8, 1)))))))



-------------------- Pre at Start in DNF [Size = 1] ---------------------
...Atom:!$sle.ref.bool($add.ref($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__626, $mul.ref(0, 16)), $mul.ref(8, 1))), $bitcast.ref.ref($i2p.i64.ref(4))), $add.ref($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__626, $mul.ref(0, 16)), $mul.ref(8, 1)))), $Size($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__626, $mul.ref(0, 16)), $mul.ref(8, 1)))))))	--------------------- Feasible Count = 1 ----------------------------
Disjunct = !$sle.ref.bool($add.ref($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__626, $mul.ref(0, 16)), $mul.ref(8, 1))), $bitcast.ref.ref($i2p.i64.ref(4))), $add.ref($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__626, $mul.ref(0, 16)), $mul.ref(8, 1)))), $Size($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__626, $mul.ref(0, 16)), $mul.ref(8, 1))))))), IsNecessary= True
Disjunct = false, IsNecessary= False
.ExplainError Rootcause = !$sle.ref.bool($add.ref($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__626, $mul.ref(0, 16)), $mul.ref(8, 1))), $bitcast.ref.ref($i2p.i64.ref(4))), $add.ref($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__626, $mul.ref(0, 16)), $mul.ref(8, 1)))), $Size($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__626, $mul.ref(0, 16)), $mul.ref(8, 1)))))))


The list disjuncts
---------------------

	 !complex-obj11 
------------


The list of complex objs definitions 
	complex-obj0 ==> $mul.ref(0, 16)
	complex-obj1 ==> $add.ref(alloc_e_WebSocketMessage__626, complex-obj0)
	complex-obj2 ==> $mul.ref(8, 1)
	complex-obj3 ==> $add.ref(complex-obj1, complex-obj2)
	complex-obj4 ==> $bitcast.ref.ref(complex-obj3)
	complex-obj5 ==> $i2p.i64.ref(4)
	complex-obj6 ==> $bitcast.ref.ref(complex-obj5)
	complex-obj7 ==> $add.ref(complex-obj4, complex-obj6)
	complex-obj8 ==> $base(complex-obj4)
	complex-obj9 ==> $Size(complex-obj8)
	complex-obj10 ==> $add.ref(complex-obj8, complex-obj9)
	complex-obj11 ==> $sle.ref.bool(complex-obj7, complex-obj10)
[TAG: AV_DEBUG] The output of ExplainError => Status = SUCCESS Exprs = (!complex-obj11	)
[TAG: AV_DEBUG] List of used vars in $sle.ref.bool($add.ref($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__626, $mul.ref(0, 16)), $mul.ref(8, 1))), $bitcast.ref.ref($i2p.i64.ref(4))), $add.ref($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__626, $mul.ref(0, 16)), $mul.ref(8, 1)))), $Size($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__626, $mul.ref(0, 16)), $mul.ref(8, 1))))))) => alloc_e_WebSocketMessage__626
[TAG: AV_DEBUG] The substituted expression for $sle.ref.bool($add.ref($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__626, $mul.ref(0, 16)), $mul.ref(8, 1))), $bitcast.ref.ref($i2p.i64.ref(4))), $add.ref($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__626, $mul.ref(0, 16)), $mul.ref(8, 1)))), $Size($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__626, $mul.ref(0, 16)), $mul.ref(8, 1))))))) is $sle.ref.bool($add.ref($bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 16)), $mul.ref(8, 1))), $bitcast.ref.ref($i2p.i64.ref(4))), $add.ref($base($bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 16)), $mul.ref(8, 1)))), $Size($base($bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 16)), $mul.ref(8, 1)))))))
[TAG: AV_OUTPUT] EXPLAINERROR-BLOCK :: (forall x_5: ref :: unknownTrigger_4(x_5) ==> $sle.ref.bool($add.ref($bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 16)), $mul.ref(8, 1))), $bitcast.ref.ref($i2p.i64.ref(4))), $add.ref($base($bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 16)), $mul.ref(8, 1)))), $Size($base($bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 16)), $mul.ref(8, 1))))))))
Printing trace Trace8
Stubs used along the trace: {}
Checking inconsistency
CheckInconsistency: 9 soft constraints and 3 assertions (0 pruned)
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has a potential bug: True bug
Corral took: 0.67 seconds
CorralMain L_BAF_2 7
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has a potential bug: True bug
Corral took: 0.64 seconds
CorralMain L_BAF_0 7
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has a potential bug: True bug
Corral took: 0.65 seconds
CorralMain L_BAF_1 7
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has no bugs
Procedures that hit the recursion bound: 
Corral took: 0.30 seconds
Inconsistency check took: 2.60 seconds
Relaxing environment constraints
RelaxEnvironment: 0 env constraints and 3 assertions
[TAG: AV_DEBUG] Recursion Bound: 1
Setting Corral timeout to 0 seconds
Verifying program while tracking: {assertsPassed, $Alloc}
Program has a potential bug: True bug
Corral took: 0.67 seconds

Boogie verification time: 1.92 s
Time spent reading-writing programs: 28.44 s

Time spent checking a program (46): 15.96 s
Time spent checking a path (37): 10.98 s

Number of procedures inlined: 3
Time elapsed so far: 42.561802
List of non-cmd-line arguments to EE = 
ExplainError:Timeout = 1000
############# Implementation = CorralMain_SeqInstr_trace_1_trace_1 #################
ExplainError[Precond]: Num of conditionals considered by slice/Total Num conditionals = 0/0
ExplainError[Precond]: Num of relevant source lines considered by slice/Total source lines = 1/4
ExplainError[Precond]: Sliced Trace => 
	#### sourceFile = websocket.c, sourceLine = 20, 
		 assert assertsPassed;
	assertsPassed := $sle.ref.bool($base(inline$WebSocketClose_trace_1_trace_1$0$inline$__SMACK_check_memory_safety$1$p), inline$WebSocketClose_trace_1_trace_1$0$inline$__SMACK_check_memory_safety$1$p);
	inline$WebSocketClose_trace_1_trace_1$0$inline$__SMACK_check_memory_safety$1$p := inline$WebSocketClose_trace_1_trace_1$0$$p5;
	inline$WebSocketClose_trace_1_trace_1$0$$p5 := $bitcast.ref.ref(inline$WebSocketClose_trace_1_trace_1$0$$p4);
	inline$WebSocketClose_trace_1_trace_1$0$$p4 := $add.ref($add.ref(inline$WebSocketClose_trace_1_trace_1$0$e, $mul.ref(0, 524)), $mul.ref(8, 1));

..Atom:!$sle.ref.bool($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__731, $mul.ref(0, 524)), $mul.ref(8, 1)))), $bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__731, $mul.ref(0, 524)), $mul.ref(8, 1))))	
 Filtered atoms before true/false = !$sle.ref.bool($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__731, $mul.ref(0, 524)), $mul.ref(8, 1)))), $bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__731, $mul.ref(0, 524)), $mul.ref(8, 1))))
..
 Filtered atoms = !$sle.ref.bool($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__731, $mul.ref(0, 524)), $mul.ref(8, 1)))), $bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__731, $mul.ref(0, 524)), $mul.ref(8, 1))))
.
 Found a conjunctive cube cover !$sle.ref.bool($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__731, $mul.ref(0, 524)), $mul.ref(8, 1)))), $bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__731, $mul.ref(0, 524)), $mul.ref(8, 1))))



-------------------- Pre at Start in DNF [Size = 1] ---------------------
...Atom:!$sle.ref.bool($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__731, $mul.ref(0, 524)), $mul.ref(8, 1)))), $bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__731, $mul.ref(0, 524)), $mul.ref(8, 1))))	--------------------- Feasible Count = 1 ----------------------------
Disjunct = !$sle.ref.bool($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__731, $mul.ref(0, 524)), $mul.ref(8, 1)))), $bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__731, $mul.ref(0, 524)), $mul.ref(8, 1)))), IsNecessary= True
Disjunct = false, IsNecessary= False
.ExplainError Rootcause = !$sle.ref.bool($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__731, $mul.ref(0, 524)), $mul.ref(8, 1)))), $bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__731, $mul.ref(0, 524)), $mul.ref(8, 1))))


The list disjuncts
---------------------

	 !complex-obj6 
------------


The list of complex objs definitions 
	complex-obj0 ==> $mul.ref(0, 524)
	complex-obj1 ==> $add.ref(alloc_e_WebSocketClose__731, complex-obj0)
	complex-obj2 ==> $mul.ref(8, 1)
	complex-obj3 ==> $add.ref(complex-obj1, complex-obj2)
	complex-obj4 ==> $bitcast.ref.ref(complex-obj3)
	complex-obj5 ==> $base(complex-obj4)
	complex-obj6 ==> $sle.ref.bool(complex-obj5, complex-obj4)
[TAG: AV_DEBUG] The output of ExplainError => Status = SUCCESS Exprs = (!complex-obj6	)
[TAG: AV_DEBUG] List of used vars in $sle.ref.bool($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__731, $mul.ref(0, 524)), $mul.ref(8, 1)))), $bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__731, $mul.ref(0, 524)), $mul.ref(8, 1)))) => alloc_e_WebSocketClose__731
[TAG: AV_DEBUG] The substituted expression for $sle.ref.bool($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__731, $mul.ref(0, 524)), $mul.ref(8, 1)))), $bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketClose__731, $mul.ref(0, 524)), $mul.ref(8, 1)))) is $sle.ref.bool($base($bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 524)), $mul.ref(8, 1)))), $bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 524)), $mul.ref(8, 1))))
[TAG: AV_OUTPUT] EXPLAINERROR-BLOCK :: (forall x_5: ref :: unknownTrigger_6(x_5) ==> $sle.ref.bool($base($bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 524)), $mul.ref(8, 1)))), $bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 524)), $mul.ref(8, 1)))))
Printing trace Trace9
Stubs used along the trace: {}
Checking inconsistency
CheckInconsistency: 10 soft constraints and 3 assertions (0 pruned)
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has a potential bug: True bug
Corral took: 0.65 seconds
CorralMain L_BAF_2 7
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has a potential bug: True bug
Corral took: 0.67 seconds
CorralMain L_BAF_0 7
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has a potential bug: True bug
Corral took: 0.64 seconds
CorralMain L_BAF_1 7
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has no bugs
Procedures that hit the recursion bound: 
Corral took: 0.30 seconds
Inconsistency check took: 2.64 seconds
Relaxing environment constraints
RelaxEnvironment: 0 env constraints and 3 assertions
[TAG: AV_DEBUG] Recursion Bound: 1
Setting Corral timeout to 0 seconds
Verifying program while tracking: {assertsPassed, $Alloc}
Program has a potential bug: True bug
Corral took: 0.72 seconds

Boogie verification time: 2.15 s
Time spent reading-writing programs: 31.62 s

Time spent checking a program (51): 17.77 s
Time spent checking a path (41): 12.17 s

Number of procedures inlined: 5
Time elapsed so far: 47.322663
List of non-cmd-line arguments to EE = 
ExplainError:Timeout = 1000
############# Implementation = CorralMain_SeqInstr_trace_1_trace_1 #################
ExplainError[Precond]: Num of conditionals considered by slice/Total Num conditionals = 0/0
ExplainError[Precond]: Num of relevant source lines considered by slice/Total source lines = 1/5
ExplainError[Precond]: Sliced Trace => 
	#### sourceFile = websocket.c, sourceLine = 32, 
		 assert assertsPassed;
	assertsPassed := $Alloc[$base(inline$WebSocketMessage_trace_1_trace_1$0$inline$__SMACK_check_memory_safety$1$p)];
	inline$WebSocketMessage_trace_1_trace_1$0$inline$__SMACK_check_memory_safety$1$p := inline$WebSocketMessage_trace_1_trace_1$0$$p6;
	inline$WebSocketMessage_trace_1_trace_1$0$$p6 := $bitcast.ref.ref(inline$WebSocketMessage_trace_1_trace_1$0$$p5);
	inline$WebSocketMessage_trace_1_trace_1$0$$p5 := $add.ref($add.ref(inline$WebSocketMessage_trace_1_trace_1$0$e, $mul.ref(0, 16)), $mul.ref(8, 1));

..Atom:!$Alloc[$base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__786, $mul.ref(0, 16)), $mul.ref(8, 1))))]	
 Filtered atoms before true/false = !$Alloc[$base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__786, $mul.ref(0, 16)), $mul.ref(8, 1))))]
..
 Filtered atoms = !$Alloc[$base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__786, $mul.ref(0, 16)), $mul.ref(8, 1))))]
.
 Found a conjunctive cube cover !$Alloc[$base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__786, $mul.ref(0, 16)), $mul.ref(8, 1))))]



-------------------- Pre at Start in DNF [Size = 1] ---------------------
...Atom:!$Alloc[$base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__786, $mul.ref(0, 16)), $mul.ref(8, 1))))]	--------------------- Feasible Count = 1 ----------------------------
Disjunct = !$Alloc[$base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__786, $mul.ref(0, 16)), $mul.ref(8, 1))))], IsNecessary= True
Disjunct = false, IsNecessary= False
.ExplainError Rootcause = !$Alloc[$base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__786, $mul.ref(0, 16)), $mul.ref(8, 1))))]


The list disjuncts
---------------------

	 !complex-obj6 
------------


The list of complex objs definitions 
	complex-obj0 ==> $mul.ref(0, 16)
	complex-obj1 ==> $add.ref(alloc_e_WebSocketMessage__786, complex-obj0)
	complex-obj2 ==> $mul.ref(8, 1)
	complex-obj3 ==> $add.ref(complex-obj1, complex-obj2)
	complex-obj4 ==> $bitcast.ref.ref(complex-obj3)
	complex-obj5 ==> $base(complex-obj4)
	complex-obj6 ==> $Alloc[complex-obj5]
[TAG: AV_DEBUG] The output of ExplainError => Status = SUCCESS Exprs = (!complex-obj6	)
[TAG: AV_DEBUG] List of used vars in $Alloc[$base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__786, $mul.ref(0, 16)), $mul.ref(8, 1))))] => $Alloc, alloc_e_WebSocketMessage__786
[TAG: AV_DEBUG] The substituted expression for $Alloc[$base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__786, $mul.ref(0, 16)), $mul.ref(8, 1))))] is $Alloc[$base($bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 16)), $mul.ref(8, 1))))]
[TAG: AV_OUTPUT] EXPLAINERROR-BLOCK :: (forall x_5: ref :: unknownTrigger_4(x_5) ==> $Alloc[$base($bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 16)), $mul.ref(8, 1))))])
Printing trace Trace10
Stubs used along the trace: {}
Checking inconsistency
CheckInconsistency: 11 soft constraints and 3 assertions (0 pruned)
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has a potential bug: True bug
Corral took: 0.67 seconds
CorralMain L_BAF_2 7
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has a potential bug: True bug
Corral took: 0.68 seconds
CorralMain L_BAF_0 7
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has a potential bug: True bug
Corral took: 0.64 seconds
CorralMain L_BAF_1 7
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has no bugs
Procedures that hit the recursion bound: 
Corral took: 0.27 seconds
Inconsistency check took: 2.61 seconds
Relaxing environment constraints
RelaxEnvironment: 0 env constraints and 3 assertions
[TAG: AV_DEBUG] Recursion Bound: 1
Setting Corral timeout to 0 seconds
Verifying program while tracking: {assertsPassed, $Alloc}
Program has a potential bug: True bug
Corral took: 0.73 seconds

Boogie verification time: 2.41 s
Time spent reading-writing programs: 34.78 s

Time spent checking a program (56): 19.53 s
Time spent checking a path (45): 13.39 s

Number of procedures inlined: 5
Time elapsed so far: 52.136824
List of non-cmd-line arguments to EE = 
ExplainError:Timeout = 1000
############# Implementation = CorralMain_SeqInstr_trace_1_trace_1 #################
ExplainError[Precond]: Num of conditionals considered by slice/Total Num conditionals = 0/0
ExplainError[Precond]: Num of relevant source lines considered by slice/Total source lines = 1/5
ExplainError[Precond]: Sliced Trace => 
	#### sourceFile = websocket.c, sourceLine = 32, 
		 assert assertsPassed;
	assertsPassed := $sle.ref.bool($base(inline$WebSocketMessage_trace_1_trace_1$0$inline$__SMACK_check_memory_safety$1$p), inline$WebSocketMessage_trace_1_trace_1$0$inline$__SMACK_check_memory_safety$1$p);
	inline$WebSocketMessage_trace_1_trace_1$0$inline$__SMACK_check_memory_safety$1$p := inline$WebSocketMessage_trace_1_trace_1$0$$p6;
	inline$WebSocketMessage_trace_1_trace_1$0$$p6 := $bitcast.ref.ref(inline$WebSocketMessage_trace_1_trace_1$0$$p5);
	inline$WebSocketMessage_trace_1_trace_1$0$$p5 := $add.ref($add.ref(inline$WebSocketMessage_trace_1_trace_1$0$e, $mul.ref(0, 16)), $mul.ref(8, 1));

..Atom:!$sle.ref.bool($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__891, $mul.ref(0, 16)), $mul.ref(8, 1)))), $bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__891, $mul.ref(0, 16)), $mul.ref(8, 1))))	
 Filtered atoms before true/false = !$sle.ref.bool($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__891, $mul.ref(0, 16)), $mul.ref(8, 1)))), $bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__891, $mul.ref(0, 16)), $mul.ref(8, 1))))
..
 Filtered atoms = !$sle.ref.bool($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__891, $mul.ref(0, 16)), $mul.ref(8, 1)))), $bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__891, $mul.ref(0, 16)), $mul.ref(8, 1))))
.
 Found a conjunctive cube cover !$sle.ref.bool($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__891, $mul.ref(0, 16)), $mul.ref(8, 1)))), $bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__891, $mul.ref(0, 16)), $mul.ref(8, 1))))



-------------------- Pre at Start in DNF [Size = 1] ---------------------
...Atom:!$sle.ref.bool($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__891, $mul.ref(0, 16)), $mul.ref(8, 1)))), $bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__891, $mul.ref(0, 16)), $mul.ref(8, 1))))	--------------------- Feasible Count = 1 ----------------------------
Disjunct = !$sle.ref.bool($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__891, $mul.ref(0, 16)), $mul.ref(8, 1)))), $bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__891, $mul.ref(0, 16)), $mul.ref(8, 1)))), IsNecessary= True
Disjunct = false, IsNecessary= False
.ExplainError Rootcause = !$sle.ref.bool($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__891, $mul.ref(0, 16)), $mul.ref(8, 1)))), $bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__891, $mul.ref(0, 16)), $mul.ref(8, 1))))


The list disjuncts
---------------------

	 !complex-obj6 
------------


The list of complex objs definitions 
	complex-obj0 ==> $mul.ref(0, 16)
	complex-obj1 ==> $add.ref(alloc_e_WebSocketMessage__891, complex-obj0)
	complex-obj2 ==> $mul.ref(8, 1)
	complex-obj3 ==> $add.ref(complex-obj1, complex-obj2)
	complex-obj4 ==> $bitcast.ref.ref(complex-obj3)
	complex-obj5 ==> $base(complex-obj4)
	complex-obj6 ==> $sle.ref.bool(complex-obj5, complex-obj4)
[TAG: AV_DEBUG] The output of ExplainError => Status = SUCCESS Exprs = (!complex-obj6	)
[TAG: AV_DEBUG] List of used vars in $sle.ref.bool($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__891, $mul.ref(0, 16)), $mul.ref(8, 1)))), $bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__891, $mul.ref(0, 16)), $mul.ref(8, 1)))) => alloc_e_WebSocketMessage__891
[TAG: AV_DEBUG] The substituted expression for $sle.ref.bool($base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__891, $mul.ref(0, 16)), $mul.ref(8, 1)))), $bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__891, $mul.ref(0, 16)), $mul.ref(8, 1)))) is $sle.ref.bool($base($bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 16)), $mul.ref(8, 1)))), $bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 16)), $mul.ref(8, 1))))
[TAG: AV_OUTPUT] EXPLAINERROR-BLOCK :: (forall x_5: ref :: unknownTrigger_4(x_5) ==> $sle.ref.bool($base($bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 16)), $mul.ref(8, 1)))), $bitcast.ref.ref($add.ref($add.ref(x_5, $mul.ref(0, 16)), $mul.ref(8, 1)))))
Printing trace Trace11
Stubs used along the trace: {}
Checking inconsistency
CheckInconsistency: 12 soft constraints and 3 assertions (0 pruned)
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has a potential bug: True bug
Corral took: 0.71 seconds
CorralMain L_BAF_2 7
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has a potential bug: True bug
Corral took: 0.64 seconds
CorralMain L_BAF_0 7
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has a potential bug: True bug
Corral took: 0.68 seconds
CorralMain L_BAF_1 7
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
Program has no bugs
Procedures that hit the recursion bound: 
Corral took: 0.27 seconds
Inconsistency check took: 2.65 seconds
Relaxing environment constraints
RelaxEnvironment: 0 env constraints and 3 assertions
[TAG: AV_DEBUG] Recursion Bound: 1
Setting Corral timeout to 0 seconds
Verifying program while tracking: {assertsPassed, $Alloc}
Program has a potential bug: True bug
Corral took: 0.77 seconds

Boogie verification time: 2.64 s
Time spent reading-writing programs: 37.94 s

Time spent checking a program (61): 21.28 s
Time spent checking a path (49): 14.72 s

Number of procedures inlined: 3
Time elapsed so far: 57.017777
List of non-cmd-line arguments to EE = 
ExplainError:Timeout = 1000
############# Implementation = CorralMain_SeqInstr_trace_1_trace_1 #################
ExplainError[Precond]: Num of conditionals considered by slice/Total Num conditionals = 0/0
ExplainError[Precond]: Num of relevant source lines considered by slice/Total source lines = 1/7
ExplainError[Precond]: Sliced Trace => 
	#### sourceFile = websocket.c, sourceLine = 32, 
		 assert assertsPassed;
	assertsPassed := $Alloc[$base(inline$WebSocketMessage_trace_1_trace_1$0$inline$__SMACK_check_memory_safety$2$p)];
	inline$WebSocketMessage_trace_1_trace_1$0$inline$__SMACK_check_memory_safety$2$p := inline$WebSocketMessage_trace_1_trace_1$0$$p10;
	inline$WebSocketMessage_trace_1_trace_1$0$$p10 := $bitcast.ref.ref(inline$WebSocketMessage_trace_1_trace_1$0$$p9);
	inline$WebSocketMessage_trace_1_trace_1$0$$p9 := $add.ref($add.ref(inline$WebSocketMessage_trace_1_trace_1$0$e, $mul.ref(0, 16)), $mul.ref(12, 1));

..Atom:!$Alloc[$base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__996, $mul.ref(0, 16)), $mul.ref(12, 1))))]	
 Filtered atoms before true/false = !$Alloc[$base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__996, $mul.ref(0, 16)), $mul.ref(12, 1))))]
..
 Filtered atoms = !$Alloc[$base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__996, $mul.ref(0, 16)), $mul.ref(12, 1))))]
.
 Found a conjunctive cube cover !$Alloc[$base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__996, $mul.ref(0, 16)), $mul.ref(12, 1))))]



-------------------- Pre at Start in DNF [Size = 1] ---------------------
...Atom:!$Alloc[$base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__996, $mul.ref(0, 16)), $mul.ref(12, 1))))]	--------------------- Feasible Count = 1 ----------------------------
Disjunct = !$Alloc[$base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__996, $mul.ref(0, 16)), $mul.ref(12, 1))))], IsNecessary= True
Disjunct = false, IsNecessary= False
.ExplainError Rootcause = !$Alloc[$base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__996, $mul.ref(0, 16)), $mul.ref(12, 1))))]


The list disjuncts
---------------------

	 !complex-obj6 
------------


The list of complex objs definitions 
	complex-obj0 ==> $mul.ref(0, 16)
	complex-obj1 ==> $add.ref(alloc_e_WebSocketMessage__996, complex-obj0)
	complex-obj2 ==> $mul.ref(12, 1)
	complex-obj3 ==> $add.ref(complex-obj1, complex-obj2)
	complex-obj4 ==> $bitcast.ref.ref(complex-obj3)
	complex-obj5 ==> $base(complex-obj4)
	complex-obj6 ==> $Alloc[complex-obj5]
[TAG: AV_DEBUG] The output of ExplainError => Status = SUCCESS Exprs = (!complex-obj6	)
[TAG: AV_DEBUG] List of used vars in $Alloc[$base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__996, $mul.ref(0, 16)), $mul.ref(12, 1))))] => $Alloc, alloc_e_WebSocketMessage__996
[TAG: AV_DEBUG] Generalizing field block expression for $Alloc[$base($bitcast.ref.ref($add.ref($add.ref(alloc_e_WebSocketMessage__996, $mul.ref(0, 16)), $mul.ref(12, 1))))] to (forall _z: ref :: $Alloc[_z] > 0)
[TAG: AV_OUTPUT] EXPLAINERROR-BLOCK :: (forall _z: ref :: $Alloc[_z] > 0)
Printing trace Trace12
Stubs used along the trace: {}
Checking inconsistency
CheckInconsistency: 13 soft constraints and 3 assertions (0 pruned)
Setting Corral timeout to 100 seconds
Verifying program while tracking: {$Alloc, assertsPassed1}
PersistentProgram(7574,99): Error: invalid argument types (bool and int) to binary operator >
Corral took: 0.12 seconds
1264 fails
Corral call terminates inconclusively with Type errors...
Inconsistency check took: 0.30 seconds
Relaxing environment constraints
RelaxEnvironment: 0 env constraints and 3 assertions
[TAG: AV_DEBUG] Recursion Bound: 1
Setting Corral timeout to 0 seconds
Verifying program while tracking: {assertsPassed, $Alloc}
PersistentProgram(7533,71): Error: invalid argument types (bool and int) to binary operator >
Corral took: 0.06 seconds
414 fails
Corral call terminates inconclusively with Sharing violation on path /home/user/wasm/benchmarks/websocket.1/error.bpl...
Final tracked vars: {assertsPassed, $Alloc}
[TAG: AV_STATS] *************** STATS ***************
[TAG: AV_STATS] check.and.refine(s) : 36.028823
[TAG: AV_STATS] run.corral(s) : 9.259314
[TAG: AV_STATS] explain.error(s) : 5.52589
[TAG: AV_STATS] run.corral.iterative(s) : 58.787264
[TAG: AV_STATS] Cpu(s) : 59.578829
[TAG: AV_STATS] corral.count : 14
[TAG: AV_STATS] count.check.refine : 63
[TAG: AV_STATS] blocked.count : 13
[TAG: AV_STATS] *************************************
[TAG: AV_STATS] TotalTime(ms) : 59630
