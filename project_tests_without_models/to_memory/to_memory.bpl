// generated by SMACK version 2.6.0 for corral
// via /usr/local/bin/smack --no-verify --clang-options=-target wasm32-unknown-emscripten -D__EMSCRIPTEN_major__=1 -D__EMSCRIPTEN_minor__=39 -D__EMSCRIPTEN_tiny__=6 -D_LIBCPP_ABI_VERSION=2 -Dunix -D__unix -D__unix__ -Werror=implicit-function-declaration -Xclang -nostdsysteminc -Xclang -isystem/root/emsdk/upstream/emscripten/system/include/libcxx -Xclang -isystem/root/emsdk/upstream/emscripten/system/lib/libcxxabi/include -Xclang -isystem/root/emsdk/upstream/emscripten/system/include/compat -Xclang -isystem/root/emsdk/upstream/emscripten/system/include -Xclang -isystem/root/emsdk/upstream/emscripten/system/include/libc -Xclang -isystem/root/emsdk/upstream/emscripten/system/lib/libc/musl/arch/emscripten -Xclang -isystem/root/emsdk/upstream/emscripten/system/local/include -Xclang -isystem/root/emsdk/upstream/emscripten/cache/wasm-obj/include -DEMSCRIPTEN -Xclang -isystem/root/emsdk/upstream/emscripten/system/include/SDL -mllvm -combiner-global-alias-analysis=false -mllvm -enable-emscripten-sjlj -mllvm -disable-lsr -I/root/emsdk/emscripten/system/include --check=memory-safety --float -bpl to_memory.bpl to_memory.cpp

// Basic types
type i1 = int;
type i5 = int;
type i6 = int;
type i8 = int;
type i16 = int;
type i24 = int;
type i32 = int;
type i40 = int;
type i48 = int;
type i56 = int;
type i64 = int;
type i80 = int;
type i88 = int;
type i96 = int;
type i128 = int;
type i160 = int;
type i256 = int;
type ref = i32;
type bvhalf = float11e5;
type bvfloat = float24e8;
type bvdouble = float53e11;
type bvlongdouble = float65e15;

// Basic constants
const $0: i32;
axiom ($0 == 0);
const $1: i32;
axiom ($1 == 1);
const $0.ref: ref;
axiom ($0.ref == 0);
const $1.ref: ref;
axiom ($1.ref == 1);
const $1024.ref: ref;
axiom ($1024.ref == 1024);
// Memory model constants
const $GLOBALS_BOTTOM: ref;
const $EXTERNS_BOTTOM: ref;
const $MALLOC_TOP: ref;

// Memory maps (23 regions)
var $M.0: [ref] i8;
var $M.1: [ref] ref;
var $M.2: [ref] i32;
var $M.3: [ref] ref;
var $M.4: [ref] ref;
var $M.5: [ref] ref;
var $M.6: [ref] i16;
var $M.7: [ref] i64;
var $M.8: [ref] i64;
var $M.9: [ref] i64;
var $M.10: i32;
var $M.11: [ref] ref;
var $M.12: [ref] i32;
var $M.13: [ref] ref;
var $M.14: [ref] i64;
var $M.15: [ref] ref;
var $M.16: [ref] i32;
var $M.17: [ref] ref;
var $M.18: [ref] i64;
var $M.19: [ref] ref;
var $M.20: [ref] i8;
var $M.21: ref;
var $M.22: i32;

// Memory address bounds
axiom ($GLOBALS_BOTTOM == $sub.ref(0, 151538));
axiom ($EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32772)));
axiom ($MALLOC_TOP == 2147483647);
function {:inline} $isExternal(p: ref) returns (bool) { $slt.ref.bool(p, $EXTERNS_BOTTOM) }

// Global allocations
procedure  $global_allocations()
{
  call $galloc(llvm.dbg.declare, 4);
  call $galloc(main, 4);
  call $galloc(emscripten_fetch_attr_init, 4);
  call $galloc(_Z6strcpyPcPKc, 4);
  call $galloc(llvm.dbg.value, 4);
  call $galloc(.str.4, 6);
  call $galloc(__func__.main, 5);
  call $galloc(.str.19, 18);
  call $galloc(.str.20, 75);
  call $galloc(__func__._ZZ4mainENK3$_0clEP18emscripten_fetch_t, 11);
  call $galloc(.str.2, 11);
  call $galloc(.str, 4);
  call $galloc(result, 4);
  call $galloc(.str.3, 14);
  call $galloc(.str.1, 10);
  call $galloc(.str.15, 64);
  call $galloc(.str.16, 32);
  call $galloc(.str.17, 36);
  call $galloc(.str.18, 57);
  call $galloc(.str.6, 11);
  call $galloc(.str.7, 33);
  call $galloc(.str.8, 15);
  call $galloc(.str.9, 41);
  call $galloc(.str.5, 33);
  call $galloc(.str.10, 26);
  call $galloc(.str.11, 37);
  call $galloc(.str.12, 17);
  call $galloc(.str.13, 21);
  call $galloc(.str.14, 17);
  call $galloc(.str.9.55, 28);
  call $galloc(.str.10.56, 28);
  call $galloc(.str.11.57, 37);
  call $galloc(.str.14.58, 50);
  call $galloc(.str.15.59, 54);
  call $galloc(.str.12.60, 52);
  call $galloc(.str.13.61, 55);
  call $galloc(.str.17.62, 23);
  call $galloc(.str.40, 34);
  call $galloc(.str.41, 36);
  call $galloc(.str.42, 31);
  call $galloc(.str.43.71, 30);
  call $galloc(.str.44, 30);
  call $galloc(.str.45.72, 39);
  call $galloc(.str.24, 28);
  call $galloc(.str.48, 54);
  call $galloc(.str.49, 58);
  call $galloc(.str.46, 56);
  call $galloc(.str.47, 59);
  call $galloc(.str.73, 29);
  call $galloc(.str.1.74, 29);
  call $galloc(.str.2.75, 29);
  call $galloc(.str.3.76, 29);
  call $galloc(.str.4.77, 15);
  call $galloc(.str.25, 26);
  call $galloc(env_value_str, 4);
  call $galloc(.str.2.42, 3);
  call $galloc(.str.43, 49);
  call $galloc(.str.1.44, 14);
  call $galloc(errno_global, 4);
  call $galloc(.str.45, 24);
  call $galloc(.str.1.46, 37);
  call $galloc(.str.16.47, 49);
  call $galloc(.str.2.48, 31);
  call $galloc(.str.3.49, 34);
  call $galloc(.str.4.50, 31);
  call $galloc(.str.5.51, 31);
  call $galloc(.str.6.52, 31);
  call $galloc(.str.7.53, 33);
  call $galloc(.str.8.54, 29);
  call $galloc(_ZZ4mainENK3$_1clEP18emscripten_fetch_t, 4);
  call $galloc(_Z6strcmpPKcS0_, 4);
  call $galloc(_ZZ4mainEN3$_08__invokeEP18emscripten_fetch_t, 4);
  call $galloc(__SMACK_nondet_unsigned_char, 4);
  call $galloc(.str.18.63, 35);
  call $galloc(.str.33, 49);
  call $galloc(.str.19.64, 30);
  call $galloc(.str.20.65, 33);
  call $galloc(.str.21.66, 30);
  call $galloc(.str.22.67, 30);
  call $galloc(.str.23.68, 30);
  call $galloc(.str.24.69, 32);
  call $galloc(.str.25.70, 27);
  call $galloc(.str.26, 26);
  call $galloc(.str.27, 26);
  call $galloc(.str.28, 35);
  call $galloc(.str.31, 50);
  call $galloc(.str.32, 54);
  call $galloc(.str.29, 52);
  call $galloc(.str.30, 55);
  call $galloc(.str.34, 27);
  call $galloc(.str.35, 39);
  call $galloc(.str.50, 53);
  call $galloc(.str.36, 34);
  call $galloc(.str.37, 37);
  call $galloc(.str.38, 34);
  call $galloc(.str.39, 34);
  call $galloc(__SMACK_decls, 4);
  call $galloc(__SMACK_top_decl, 4);
  call $galloc(__SMACK_check_memory_safety, 4);
  call $galloc(__SMACK_check_memory_leak, 4);
  call $galloc(__SMACK_init_func_memory_model, 4);
  call $galloc(.str.5.78, 15);
  call $galloc(.str.6.79, 15);
  call $galloc(.str.7.80, 15);
  call $galloc(_ZTISt9bad_alloc, 4);
  call $galloc(_ZZ4mainENK3$_0cvPFvP18emscripten_fetch_tEEv, 4);
  call $galloc(_ZZ4mainENK3$_1cvPFvP18emscripten_fetch_tEEv, 4);
  call $galloc(_ZZ4mainENK3$_2cvPFvP18emscripten_fetch_tEEv, 4);
  call $galloc(emscripten_fetch, 4);
  call $galloc(__assert_fail, 4);
  call $galloc(_Z6memsetPvim, 4);
  call $galloc(_ZZ4mainEN3$_28__invokeEP18emscripten_fetch_t, 4);
  call $galloc(_ZZ4mainENK3$_2clEP18emscripten_fetch_t, 4);
  call $galloc(printf, 4);
  call $galloc(_ZZ4mainEN3$_18__invokeEP18emscripten_fetch_t, 4);
  call $galloc(_ZZ4mainENK3$_0clEP18emscripten_fetch_t, 4);
  call $galloc(emscripten_fetch_close, 4);
  call $galloc(__VERIFIER_assume, 4);
  call $galloc(__SMACK_code, 4);
  call $galloc(__SMACK_dummy, 4);
  call $galloc(__SMACK_check_overflow, 4);
  call $galloc(__SMACK_nondet_char, 4);
  call $galloc(__SMACK_nondet_signed_char, 4);
  call $galloc(__SMACK_nondet_short, 4);
  call $galloc(__SMACK_nondet_signed_short, 4);
  call $galloc(__SMACK_nondet_signed_short_int, 4);
  call $galloc(__SMACK_nondet_unsigned_short, 4);
  call $galloc(__SMACK_nondet_unsigned_short_int, 4);
  call $galloc(__SMACK_nondet_int, 4);
  call $galloc(__SMACK_nondet_signed_int, 4);
  call $galloc(__SMACK_nondet_unsigned, 4);
  call $galloc(__SMACK_nondet_unsigned_int, 4);
  call $galloc(__SMACK_nondet_long, 4);
  call $galloc(__SMACK_nondet_long_int, 4);
  call $galloc(__SMACK_nondet_signed_long, 4);
  call $galloc(__SMACK_nondet_signed_long_int, 4);
  call $galloc(__SMACK_nondet_unsigned_long, 4);
  call $galloc(__SMACK_nondet_unsigned_long_int, 4);
  call $galloc(__SMACK_nondet_long_long, 4);
  call $galloc(__SMACK_nondet_long_long_int, 4);
  call $galloc(__SMACK_nondet_signed_long_long, 4);
  call $galloc(__SMACK_nondet_signed_long_long_int, 4);
  call $galloc(__SMACK_nondet_unsigned_long_long, 4);
  call $galloc(__SMACK_nondet_unsigned_long_long_int, 4);
  call $galloc(__gxx_personality_v0, 4);
  call $galloc(__SMACK_static_init, 4);
}

// SMT bit-vector/integer conversion
function {:builtin "(_ int2bv 32)"} $int2bv.32(i: i32) returns (bv32);
function {:builtin "bv2nat"} $bv2int.32(i: bv32) returns (i32);

// Integer arithmetic operations
function {:inline} $add.i1(i1: i1, i2: i1) returns (i1) { (i1 + i2) }
function {:inline} $add.i5(i1: i5, i2: i5) returns (i5) { (i1 + i2) }
function {:inline} $add.i6(i1: i6, i2: i6) returns (i6) { (i1 + i2) }
function {:inline} $add.i8(i1: i8, i2: i8) returns (i8) { (i1 + i2) }
function {:inline} $add.i16(i1: i16, i2: i16) returns (i16) { (i1 + i2) }
function {:inline} $add.i24(i1: i24, i2: i24) returns (i24) { (i1 + i2) }
function {:inline} $add.i32(i1: i32, i2: i32) returns (i32) { (i1 + i2) }
function {:inline} $add.i40(i1: i40, i2: i40) returns (i40) { (i1 + i2) }
function {:inline} $add.i48(i1: i48, i2: i48) returns (i48) { (i1 + i2) }
function {:inline} $add.i56(i1: i56, i2: i56) returns (i56) { (i1 + i2) }
function {:inline} $add.i64(i1: i64, i2: i64) returns (i64) { (i1 + i2) }
function {:inline} $add.i80(i1: i80, i2: i80) returns (i80) { (i1 + i2) }
function {:inline} $add.i88(i1: i88, i2: i88) returns (i88) { (i1 + i2) }
function {:inline} $add.i96(i1: i96, i2: i96) returns (i96) { (i1 + i2) }
function {:inline} $add.i128(i1: i128, i2: i128) returns (i128) { (i1 + i2) }
function {:inline} $add.i160(i1: i160, i2: i160) returns (i160) { (i1 + i2) }
function {:inline} $add.i256(i1: i256, i2: i256) returns (i256) { (i1 + i2) }
function {:inline} $sub.i1(i1: i1, i2: i1) returns (i1) { (i1 - i2) }
function {:inline} $sub.i5(i1: i5, i2: i5) returns (i5) { (i1 - i2) }
function {:inline} $sub.i6(i1: i6, i2: i6) returns (i6) { (i1 - i2) }
function {:inline} $sub.i8(i1: i8, i2: i8) returns (i8) { (i1 - i2) }
function {:inline} $sub.i16(i1: i16, i2: i16) returns (i16) { (i1 - i2) }
function {:inline} $sub.i24(i1: i24, i2: i24) returns (i24) { (i1 - i2) }
function {:inline} $sub.i32(i1: i32, i2: i32) returns (i32) { (i1 - i2) }
function {:inline} $sub.i40(i1: i40, i2: i40) returns (i40) { (i1 - i2) }
function {:inline} $sub.i48(i1: i48, i2: i48) returns (i48) { (i1 - i2) }
function {:inline} $sub.i56(i1: i56, i2: i56) returns (i56) { (i1 - i2) }
function {:inline} $sub.i64(i1: i64, i2: i64) returns (i64) { (i1 - i2) }
function {:inline} $sub.i80(i1: i80, i2: i80) returns (i80) { (i1 - i2) }
function {:inline} $sub.i88(i1: i88, i2: i88) returns (i88) { (i1 - i2) }
function {:inline} $sub.i96(i1: i96, i2: i96) returns (i96) { (i1 - i2) }
function {:inline} $sub.i128(i1: i128, i2: i128) returns (i128) { (i1 - i2) }
function {:inline} $sub.i160(i1: i160, i2: i160) returns (i160) { (i1 - i2) }
function {:inline} $sub.i256(i1: i256, i2: i256) returns (i256) { (i1 - i2) }
function {:inline} $mul.i1(i1: i1, i2: i1) returns (i1) { (i1 * i2) }
function {:inline} $mul.i5(i1: i5, i2: i5) returns (i5) { (i1 * i2) }
function {:inline} $mul.i6(i1: i6, i2: i6) returns (i6) { (i1 * i2) }
function {:inline} $mul.i8(i1: i8, i2: i8) returns (i8) { (i1 * i2) }
function {:inline} $mul.i16(i1: i16, i2: i16) returns (i16) { (i1 * i2) }
function {:inline} $mul.i24(i1: i24, i2: i24) returns (i24) { (i1 * i2) }
function {:inline} $mul.i32(i1: i32, i2: i32) returns (i32) { (i1 * i2) }
function {:inline} $mul.i40(i1: i40, i2: i40) returns (i40) { (i1 * i2) }
function {:inline} $mul.i48(i1: i48, i2: i48) returns (i48) { (i1 * i2) }
function {:inline} $mul.i56(i1: i56, i2: i56) returns (i56) { (i1 * i2) }
function {:inline} $mul.i64(i1: i64, i2: i64) returns (i64) { (i1 * i2) }
function {:inline} $mul.i80(i1: i80, i2: i80) returns (i80) { (i1 * i2) }
function {:inline} $mul.i88(i1: i88, i2: i88) returns (i88) { (i1 * i2) }
function {:inline} $mul.i96(i1: i96, i2: i96) returns (i96) { (i1 * i2) }
function {:inline} $mul.i128(i1: i128, i2: i128) returns (i128) { (i1 * i2) }
function {:inline} $mul.i160(i1: i160, i2: i160) returns (i160) { (i1 * i2) }
function {:inline} $mul.i256(i1: i256, i2: i256) returns (i256) { (i1 * i2) }
function {:builtin "div"} $idiv.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "div"} $idiv.i5(i1: i5, i2: i5) returns (i5);
function {:builtin "div"} $idiv.i6(i1: i6, i2: i6) returns (i6);
function {:builtin "div"} $idiv.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "div"} $idiv.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "div"} $idiv.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "div"} $idiv.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "div"} $idiv.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "div"} $idiv.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "div"} $idiv.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "div"} $idiv.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "div"} $idiv.i80(i1: i80, i2: i80) returns (i80);
function {:builtin "div"} $idiv.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "div"} $idiv.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "div"} $idiv.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "div"} $idiv.i160(i1: i160, i2: i160) returns (i160);
function {:builtin "div"} $idiv.i256(i1: i256, i2: i256) returns (i256);
function {:inline} $sdiv.i1(i1: i1, i2: i1) returns (i1) { $idiv.i1(i1, i2) }
function {:inline} $sdiv.i5(i1: i5, i2: i5) returns (i5) { $idiv.i5(i1, i2) }
function {:inline} $sdiv.i6(i1: i6, i2: i6) returns (i6) { $idiv.i6(i1, i2) }
function {:inline} $sdiv.i8(i1: i8, i2: i8) returns (i8) { $idiv.i8(i1, i2) }
function {:inline} $sdiv.i16(i1: i16, i2: i16) returns (i16) { $idiv.i16(i1, i2) }
function {:inline} $sdiv.i24(i1: i24, i2: i24) returns (i24) { $idiv.i24(i1, i2) }
function {:inline} $sdiv.i32(i1: i32, i2: i32) returns (i32) { $idiv.i32(i1, i2) }
function {:inline} $sdiv.i40(i1: i40, i2: i40) returns (i40) { $idiv.i40(i1, i2) }
function {:inline} $sdiv.i48(i1: i48, i2: i48) returns (i48) { $idiv.i48(i1, i2) }
function {:inline} $sdiv.i56(i1: i56, i2: i56) returns (i56) { $idiv.i56(i1, i2) }
function {:inline} $sdiv.i64(i1: i64, i2: i64) returns (i64) { $idiv.i64(i1, i2) }
function {:inline} $sdiv.i80(i1: i80, i2: i80) returns (i80) { $idiv.i80(i1, i2) }
function {:inline} $sdiv.i88(i1: i88, i2: i88) returns (i88) { $idiv.i88(i1, i2) }
function {:inline} $sdiv.i96(i1: i96, i2: i96) returns (i96) { $idiv.i96(i1, i2) }
function {:inline} $sdiv.i128(i1: i128, i2: i128) returns (i128) { $idiv.i128(i1, i2) }
function {:inline} $sdiv.i160(i1: i160, i2: i160) returns (i160) { $idiv.i160(i1, i2) }
function {:inline} $sdiv.i256(i1: i256, i2: i256) returns (i256) { $idiv.i256(i1, i2) }
function {:inline} $udiv.i1(i1: i1, i2: i1) returns (i1) { $idiv.i1(i1, i2) }
function {:inline} $udiv.i5(i1: i5, i2: i5) returns (i5) { $idiv.i5(i1, i2) }
function {:inline} $udiv.i6(i1: i6, i2: i6) returns (i6) { $idiv.i6(i1, i2) }
function {:inline} $udiv.i8(i1: i8, i2: i8) returns (i8) { $idiv.i8(i1, i2) }
function {:inline} $udiv.i16(i1: i16, i2: i16) returns (i16) { $idiv.i16(i1, i2) }
function {:inline} $udiv.i24(i1: i24, i2: i24) returns (i24) { $idiv.i24(i1, i2) }
function {:inline} $udiv.i32(i1: i32, i2: i32) returns (i32) { $idiv.i32(i1, i2) }
function {:inline} $udiv.i40(i1: i40, i2: i40) returns (i40) { $idiv.i40(i1, i2) }
function {:inline} $udiv.i48(i1: i48, i2: i48) returns (i48) { $idiv.i48(i1, i2) }
function {:inline} $udiv.i56(i1: i56, i2: i56) returns (i56) { $idiv.i56(i1, i2) }
function {:inline} $udiv.i64(i1: i64, i2: i64) returns (i64) { $idiv.i64(i1, i2) }
function {:inline} $udiv.i80(i1: i80, i2: i80) returns (i80) { $idiv.i80(i1, i2) }
function {:inline} $udiv.i88(i1: i88, i2: i88) returns (i88) { $idiv.i88(i1, i2) }
function {:inline} $udiv.i96(i1: i96, i2: i96) returns (i96) { $idiv.i96(i1, i2) }
function {:inline} $udiv.i128(i1: i128, i2: i128) returns (i128) { $idiv.i128(i1, i2) }
function {:inline} $udiv.i160(i1: i160, i2: i160) returns (i160) { $idiv.i160(i1, i2) }
function {:inline} $udiv.i256(i1: i256, i2: i256) returns (i256) { $idiv.i256(i1, i2) }
function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) returns (i5);
function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) returns (i6);
function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) returns (i80);
function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) returns (i160);
function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) returns (i256);
function {:inline} $srem.i1(i1: i1, i2: i1) returns (i1) { (if ($ne.i1.bool($smod.i1(i1, i2), 0) && $slt.i1.bool(i1, 0)) then $sub.i1($smod.i1(i1, i2), $smax.i1(i2, $sub.i1(0, i2))) else $smod.i1(i1, i2)) }
function {:inline} $srem.i5(i1: i5, i2: i5) returns (i5) { (if ($ne.i5.bool($smod.i5(i1, i2), 0) && $slt.i5.bool(i1, 0)) then $sub.i5($smod.i5(i1, i2), $smax.i5(i2, $sub.i5(0, i2))) else $smod.i5(i1, i2)) }
function {:inline} $srem.i6(i1: i6, i2: i6) returns (i6) { (if ($ne.i6.bool($smod.i6(i1, i2), 0) && $slt.i6.bool(i1, 0)) then $sub.i6($smod.i6(i1, i2), $smax.i6(i2, $sub.i6(0, i2))) else $smod.i6(i1, i2)) }
function {:inline} $srem.i8(i1: i8, i2: i8) returns (i8) { (if ($ne.i8.bool($smod.i8(i1, i2), 0) && $slt.i8.bool(i1, 0)) then $sub.i8($smod.i8(i1, i2), $smax.i8(i2, $sub.i8(0, i2))) else $smod.i8(i1, i2)) }
function {:inline} $srem.i16(i1: i16, i2: i16) returns (i16) { (if ($ne.i16.bool($smod.i16(i1, i2), 0) && $slt.i16.bool(i1, 0)) then $sub.i16($smod.i16(i1, i2), $smax.i16(i2, $sub.i16(0, i2))) else $smod.i16(i1, i2)) }
function {:inline} $srem.i24(i1: i24, i2: i24) returns (i24) { (if ($ne.i24.bool($smod.i24(i1, i2), 0) && $slt.i24.bool(i1, 0)) then $sub.i24($smod.i24(i1, i2), $smax.i24(i2, $sub.i24(0, i2))) else $smod.i24(i1, i2)) }
function {:inline} $srem.i32(i1: i32, i2: i32) returns (i32) { (if ($ne.i32.bool($smod.i32(i1, i2), 0) && $slt.i32.bool(i1, 0)) then $sub.i32($smod.i32(i1, i2), $smax.i32(i2, $sub.i32(0, i2))) else $smod.i32(i1, i2)) }
function {:inline} $srem.i40(i1: i40, i2: i40) returns (i40) { (if ($ne.i40.bool($smod.i40(i1, i2), 0) && $slt.i40.bool(i1, 0)) then $sub.i40($smod.i40(i1, i2), $smax.i40(i2, $sub.i40(0, i2))) else $smod.i40(i1, i2)) }
function {:inline} $srem.i48(i1: i48, i2: i48) returns (i48) { (if ($ne.i48.bool($smod.i48(i1, i2), 0) && $slt.i48.bool(i1, 0)) then $sub.i48($smod.i48(i1, i2), $smax.i48(i2, $sub.i48(0, i2))) else $smod.i48(i1, i2)) }
function {:inline} $srem.i56(i1: i56, i2: i56) returns (i56) { (if ($ne.i56.bool($smod.i56(i1, i2), 0) && $slt.i56.bool(i1, 0)) then $sub.i56($smod.i56(i1, i2), $smax.i56(i2, $sub.i56(0, i2))) else $smod.i56(i1, i2)) }
function {:inline} $srem.i64(i1: i64, i2: i64) returns (i64) { (if ($ne.i64.bool($smod.i64(i1, i2), 0) && $slt.i64.bool(i1, 0)) then $sub.i64($smod.i64(i1, i2), $smax.i64(i2, $sub.i64(0, i2))) else $smod.i64(i1, i2)) }
function {:inline} $srem.i80(i1: i80, i2: i80) returns (i80) { (if ($ne.i80.bool($smod.i80(i1, i2), 0) && $slt.i80.bool(i1, 0)) then $sub.i80($smod.i80(i1, i2), $smax.i80(i2, $sub.i80(0, i2))) else $smod.i80(i1, i2)) }
function {:inline} $srem.i88(i1: i88, i2: i88) returns (i88) { (if ($ne.i88.bool($smod.i88(i1, i2), 0) && $slt.i88.bool(i1, 0)) then $sub.i88($smod.i88(i1, i2), $smax.i88(i2, $sub.i88(0, i2))) else $smod.i88(i1, i2)) }
function {:inline} $srem.i96(i1: i96, i2: i96) returns (i96) { (if ($ne.i96.bool($smod.i96(i1, i2), 0) && $slt.i96.bool(i1, 0)) then $sub.i96($smod.i96(i1, i2), $smax.i96(i2, $sub.i96(0, i2))) else $smod.i96(i1, i2)) }
function {:inline} $srem.i128(i1: i128, i2: i128) returns (i128) { (if ($ne.i128.bool($smod.i128(i1, i2), 0) && $slt.i128.bool(i1, 0)) then $sub.i128($smod.i128(i1, i2), $smax.i128(i2, $sub.i128(0, i2))) else $smod.i128(i1, i2)) }
function {:inline} $srem.i160(i1: i160, i2: i160) returns (i160) { (if ($ne.i160.bool($smod.i160(i1, i2), 0) && $slt.i160.bool(i1, 0)) then $sub.i160($smod.i160(i1, i2), $smax.i160(i2, $sub.i160(0, i2))) else $smod.i160(i1, i2)) }
function {:inline} $srem.i256(i1: i256, i2: i256) returns (i256) { (if ($ne.i256.bool($smod.i256(i1, i2), 0) && $slt.i256.bool(i1, 0)) then $sub.i256($smod.i256(i1, i2), $smax.i256(i2, $sub.i256(0, i2))) else $smod.i256(i1, i2)) }
function {:inline} $urem.i1(i1: i1, i2: i1) returns (i1) { $smod.i1(i1, i2) }
function {:inline} $urem.i5(i1: i5, i2: i5) returns (i5) { $smod.i5(i1, i2) }
function {:inline} $urem.i6(i1: i6, i2: i6) returns (i6) { $smod.i6(i1, i2) }
function {:inline} $urem.i8(i1: i8, i2: i8) returns (i8) { $smod.i8(i1, i2) }
function {:inline} $urem.i16(i1: i16, i2: i16) returns (i16) { $smod.i16(i1, i2) }
function {:inline} $urem.i24(i1: i24, i2: i24) returns (i24) { $smod.i24(i1, i2) }
function {:inline} $urem.i32(i1: i32, i2: i32) returns (i32) { $smod.i32(i1, i2) }
function {:inline} $urem.i40(i1: i40, i2: i40) returns (i40) { $smod.i40(i1, i2) }
function {:inline} $urem.i48(i1: i48, i2: i48) returns (i48) { $smod.i48(i1, i2) }
function {:inline} $urem.i56(i1: i56, i2: i56) returns (i56) { $smod.i56(i1, i2) }
function {:inline} $urem.i64(i1: i64, i2: i64) returns (i64) { $smod.i64(i1, i2) }
function {:inline} $urem.i80(i1: i80, i2: i80) returns (i80) { $smod.i80(i1, i2) }
function {:inline} $urem.i88(i1: i88, i2: i88) returns (i88) { $smod.i88(i1, i2) }
function {:inline} $urem.i96(i1: i96, i2: i96) returns (i96) { $smod.i96(i1, i2) }
function {:inline} $urem.i128(i1: i128, i2: i128) returns (i128) { $smod.i128(i1, i2) }
function {:inline} $urem.i160(i1: i160, i2: i160) returns (i160) { $smod.i160(i1, i2) }
function {:inline} $urem.i256(i1: i256, i2: i256) returns (i256) { $smod.i256(i1, i2) }
function $shl.i1(i1: i1, i2: i1) returns (i1);
function $shl.i5(i1: i5, i2: i5) returns (i5);
function $shl.i6(i1: i6, i2: i6) returns (i6);
function $shl.i8(i1: i8, i2: i8) returns (i8);
function $shl.i16(i1: i16, i2: i16) returns (i16);
function $shl.i24(i1: i24, i2: i24) returns (i24);
function $shl.i32(i1: i32, i2: i32) returns (i32);
function $shl.i40(i1: i40, i2: i40) returns (i40);
function $shl.i48(i1: i48, i2: i48) returns (i48);
function $shl.i56(i1: i56, i2: i56) returns (i56);
function $shl.i64(i1: i64, i2: i64) returns (i64);
function $shl.i80(i1: i80, i2: i80) returns (i80);
function $shl.i88(i1: i88, i2: i88) returns (i88);
function $shl.i96(i1: i96, i2: i96) returns (i96);
function $shl.i128(i1: i128, i2: i128) returns (i128);
function $shl.i160(i1: i160, i2: i160) returns (i160);
function $shl.i256(i1: i256, i2: i256) returns (i256);
function $lshr.i1(i1: i1, i2: i1) returns (i1);
function $lshr.i5(i1: i5, i2: i5) returns (i5);
function $lshr.i6(i1: i6, i2: i6) returns (i6);
function $lshr.i8(i1: i8, i2: i8) returns (i8);
function $lshr.i16(i1: i16, i2: i16) returns (i16);
function $lshr.i24(i1: i24, i2: i24) returns (i24);
function $lshr.i32(i1: i32, i2: i32) returns (i32);
function $lshr.i40(i1: i40, i2: i40) returns (i40);
function $lshr.i48(i1: i48, i2: i48) returns (i48);
function $lshr.i56(i1: i56, i2: i56) returns (i56);
function $lshr.i64(i1: i64, i2: i64) returns (i64);
function $lshr.i80(i1: i80, i2: i80) returns (i80);
function $lshr.i88(i1: i88, i2: i88) returns (i88);
function $lshr.i96(i1: i96, i2: i96) returns (i96);
function $lshr.i128(i1: i128, i2: i128) returns (i128);
function $lshr.i160(i1: i160, i2: i160) returns (i160);
function $lshr.i256(i1: i256, i2: i256) returns (i256);
function $ashr.i1(i1: i1, i2: i1) returns (i1);
function $ashr.i5(i1: i5, i2: i5) returns (i5);
function $ashr.i6(i1: i6, i2: i6) returns (i6);
function $ashr.i8(i1: i8, i2: i8) returns (i8);
function $ashr.i16(i1: i16, i2: i16) returns (i16);
function $ashr.i24(i1: i24, i2: i24) returns (i24);
function $ashr.i32(i1: i32, i2: i32) returns (i32);
function $ashr.i40(i1: i40, i2: i40) returns (i40);
function $ashr.i48(i1: i48, i2: i48) returns (i48);
function $ashr.i56(i1: i56, i2: i56) returns (i56);
function $ashr.i64(i1: i64, i2: i64) returns (i64);
function $ashr.i80(i1: i80, i2: i80) returns (i80);
function $ashr.i88(i1: i88, i2: i88) returns (i88);
function $ashr.i96(i1: i96, i2: i96) returns (i96);
function $ashr.i128(i1: i128, i2: i128) returns (i128);
function $ashr.i160(i1: i160, i2: i160) returns (i160);
function $ashr.i256(i1: i256, i2: i256) returns (i256);
function $and.i1(i1: i1, i2: i1) returns (i1);
function $and.i5(i1: i5, i2: i5) returns (i5);
function $and.i6(i1: i6, i2: i6) returns (i6);
function $and.i8(i1: i8, i2: i8) returns (i8);
function $and.i16(i1: i16, i2: i16) returns (i16);
function $and.i24(i1: i24, i2: i24) returns (i24);
function $and.i32(i1: i32, i2: i32) returns (i32);
function $and.i40(i1: i40, i2: i40) returns (i40);
function $and.i48(i1: i48, i2: i48) returns (i48);
function $and.i56(i1: i56, i2: i56) returns (i56);
function $and.i64(i1: i64, i2: i64) returns (i64);
function $and.i80(i1: i80, i2: i80) returns (i80);
function $and.i88(i1: i88, i2: i88) returns (i88);
function $and.i96(i1: i96, i2: i96) returns (i96);
function $and.i128(i1: i128, i2: i128) returns (i128);
function $and.i160(i1: i160, i2: i160) returns (i160);
function $and.i256(i1: i256, i2: i256) returns (i256);
function $or.i1(i1: i1, i2: i1) returns (i1);
function $or.i5(i1: i5, i2: i5) returns (i5);
function $or.i6(i1: i6, i2: i6) returns (i6);
function $or.i8(i1: i8, i2: i8) returns (i8);
function $or.i16(i1: i16, i2: i16) returns (i16);
function $or.i24(i1: i24, i2: i24) returns (i24);
function $or.i32(i1: i32, i2: i32) returns (i32);
function $or.i40(i1: i40, i2: i40) returns (i40);
function $or.i48(i1: i48, i2: i48) returns (i48);
function $or.i56(i1: i56, i2: i56) returns (i56);
function $or.i64(i1: i64, i2: i64) returns (i64);
function $or.i80(i1: i80, i2: i80) returns (i80);
function $or.i88(i1: i88, i2: i88) returns (i88);
function $or.i96(i1: i96, i2: i96) returns (i96);
function $or.i128(i1: i128, i2: i128) returns (i128);
function $or.i160(i1: i160, i2: i160) returns (i160);
function $or.i256(i1: i256, i2: i256) returns (i256);
function $xor.i1(i1: i1, i2: i1) returns (i1);
function $xor.i5(i1: i5, i2: i5) returns (i5);
function $xor.i6(i1: i6, i2: i6) returns (i6);
function $xor.i8(i1: i8, i2: i8) returns (i8);
function $xor.i16(i1: i16, i2: i16) returns (i16);
function $xor.i24(i1: i24, i2: i24) returns (i24);
function $xor.i32(i1: i32, i2: i32) returns (i32);
function $xor.i40(i1: i40, i2: i40) returns (i40);
function $xor.i48(i1: i48, i2: i48) returns (i48);
function $xor.i56(i1: i56, i2: i56) returns (i56);
function $xor.i64(i1: i64, i2: i64) returns (i64);
function $xor.i80(i1: i80, i2: i80) returns (i80);
function $xor.i88(i1: i88, i2: i88) returns (i88);
function $xor.i96(i1: i96, i2: i96) returns (i96);
function $xor.i128(i1: i128, i2: i128) returns (i128);
function $xor.i160(i1: i160, i2: i160) returns (i160);
function $xor.i256(i1: i256, i2: i256) returns (i256);
function $nand.i1(i1: i1, i2: i1) returns (i1);
function $nand.i5(i1: i5, i2: i5) returns (i5);
function $nand.i6(i1: i6, i2: i6) returns (i6);
function $nand.i8(i1: i8, i2: i8) returns (i8);
function $nand.i16(i1: i16, i2: i16) returns (i16);
function $nand.i24(i1: i24, i2: i24) returns (i24);
function $nand.i32(i1: i32, i2: i32) returns (i32);
function $nand.i40(i1: i40, i2: i40) returns (i40);
function $nand.i48(i1: i48, i2: i48) returns (i48);
function $nand.i56(i1: i56, i2: i56) returns (i56);
function $nand.i64(i1: i64, i2: i64) returns (i64);
function $nand.i80(i1: i80, i2: i80) returns (i80);
function $nand.i88(i1: i88, i2: i88) returns (i88);
function $nand.i96(i1: i96, i2: i96) returns (i96);
function $nand.i128(i1: i128, i2: i128) returns (i128);
function $nand.i160(i1: i160, i2: i160) returns (i160);
function $nand.i256(i1: i256, i2: i256) returns (i256);
function $not.i1(i: i1) returns (i1);
function $not.i5(i: i5) returns (i5);
function $not.i6(i: i6) returns (i6);
function $not.i8(i: i8) returns (i8);
function $not.i16(i: i16) returns (i16);
function $not.i24(i: i24) returns (i24);
function $not.i32(i: i32) returns (i32);
function $not.i40(i: i40) returns (i40);
function $not.i48(i: i48) returns (i48);
function $not.i56(i: i56) returns (i56);
function $not.i64(i: i64) returns (i64);
function $not.i80(i: i80) returns (i80);
function $not.i88(i: i88) returns (i88);
function $not.i96(i: i96) returns (i96);
function $not.i128(i: i128) returns (i128);
function $not.i160(i: i160) returns (i160);
function $not.i256(i: i256) returns (i256);
function {:inline} $smin.i1(i1: i1, i2: i1) returns (i1) { (if $slt.i1.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i5(i1: i5, i2: i5) returns (i5) { (if $slt.i5.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i6(i1: i6, i2: i6) returns (i6) { (if $slt.i6.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i8(i1: i8, i2: i8) returns (i8) { (if $slt.i8.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i16(i1: i16, i2: i16) returns (i16) { (if $slt.i16.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i24(i1: i24, i2: i24) returns (i24) { (if $slt.i24.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i32(i1: i32, i2: i32) returns (i32) { (if $slt.i32.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i40(i1: i40, i2: i40) returns (i40) { (if $slt.i40.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i48(i1: i48, i2: i48) returns (i48) { (if $slt.i48.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i56(i1: i56, i2: i56) returns (i56) { (if $slt.i56.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i64(i1: i64, i2: i64) returns (i64) { (if $slt.i64.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i80(i1: i80, i2: i80) returns (i80) { (if $slt.i80.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i88(i1: i88, i2: i88) returns (i88) { (if $slt.i88.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i96(i1: i96, i2: i96) returns (i96) { (if $slt.i96.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i128(i1: i128, i2: i128) returns (i128) { (if $slt.i128.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i160(i1: i160, i2: i160) returns (i160) { (if $slt.i160.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i256(i1: i256, i2: i256) returns (i256) { (if $slt.i256.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i1(i1: i1, i2: i1) returns (i1) { (if $sgt.i1.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i5(i1: i5, i2: i5) returns (i5) { (if $sgt.i5.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i6(i1: i6, i2: i6) returns (i6) { (if $sgt.i6.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i8(i1: i8, i2: i8) returns (i8) { (if $sgt.i8.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i16(i1: i16, i2: i16) returns (i16) { (if $sgt.i16.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i24(i1: i24, i2: i24) returns (i24) { (if $sgt.i24.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i32(i1: i32, i2: i32) returns (i32) { (if $sgt.i32.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i40(i1: i40, i2: i40) returns (i40) { (if $sgt.i40.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i48(i1: i48, i2: i48) returns (i48) { (if $sgt.i48.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i56(i1: i56, i2: i56) returns (i56) { (if $sgt.i56.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i64(i1: i64, i2: i64) returns (i64) { (if $sgt.i64.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i80(i1: i80, i2: i80) returns (i80) { (if $sgt.i80.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i88(i1: i88, i2: i88) returns (i88) { (if $sgt.i88.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i96(i1: i96, i2: i96) returns (i96) { (if $sgt.i96.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i128(i1: i128, i2: i128) returns (i128) { (if $sgt.i128.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i160(i1: i160, i2: i160) returns (i160) { (if $sgt.i160.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i256(i1: i256, i2: i256) returns (i256) { (if $sgt.i256.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i1(i1: i1, i2: i1) returns (i1) { (if $ult.i1.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i5(i1: i5, i2: i5) returns (i5) { (if $ult.i5.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i6(i1: i6, i2: i6) returns (i6) { (if $ult.i6.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i8(i1: i8, i2: i8) returns (i8) { (if $ult.i8.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i16(i1: i16, i2: i16) returns (i16) { (if $ult.i16.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i24(i1: i24, i2: i24) returns (i24) { (if $ult.i24.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i32(i1: i32, i2: i32) returns (i32) { (if $ult.i32.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i40(i1: i40, i2: i40) returns (i40) { (if $ult.i40.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i48(i1: i48, i2: i48) returns (i48) { (if $ult.i48.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i56(i1: i56, i2: i56) returns (i56) { (if $ult.i56.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i64(i1: i64, i2: i64) returns (i64) { (if $ult.i64.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i80(i1: i80, i2: i80) returns (i80) { (if $ult.i80.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i88(i1: i88, i2: i88) returns (i88) { (if $ult.i88.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i96(i1: i96, i2: i96) returns (i96) { (if $ult.i96.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i128(i1: i128, i2: i128) returns (i128) { (if $ult.i128.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i160(i1: i160, i2: i160) returns (i160) { (if $ult.i160.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i256(i1: i256, i2: i256) returns (i256) { (if $ult.i256.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i1(i1: i1, i2: i1) returns (i1) { (if $ugt.i1.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i5(i1: i5, i2: i5) returns (i5) { (if $ugt.i5.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i6(i1: i6, i2: i6) returns (i6) { (if $ugt.i6.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i8(i1: i8, i2: i8) returns (i8) { (if $ugt.i8.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i16(i1: i16, i2: i16) returns (i16) { (if $ugt.i16.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i24(i1: i24, i2: i24) returns (i24) { (if $ugt.i24.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i32(i1: i32, i2: i32) returns (i32) { (if $ugt.i32.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i40(i1: i40, i2: i40) returns (i40) { (if $ugt.i40.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i48(i1: i48, i2: i48) returns (i48) { (if $ugt.i48.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i56(i1: i56, i2: i56) returns (i56) { (if $ugt.i56.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i64(i1: i64, i2: i64) returns (i64) { (if $ugt.i64.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i80(i1: i80, i2: i80) returns (i80) { (if $ugt.i80.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i88(i1: i88, i2: i88) returns (i88) { (if $ugt.i88.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i96(i1: i96, i2: i96) returns (i96) { (if $ugt.i96.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i128(i1: i128, i2: i128) returns (i128) { (if $ugt.i128.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i160(i1: i160, i2: i160) returns (i160) { (if $ugt.i160.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i256(i1: i256, i2: i256) returns (i256) { (if $ugt.i256.bool(i1, i2) then i1 else i2) }
axiom ($and.i1(0, 0) == 0);
axiom ($or.i1(0, 0) == 0);
axiom ($xor.i1(0, 0) == 0);
axiom ($and.i1(0, 1) == 0);
axiom ($or.i1(0, 1) == 1);
axiom ($xor.i1(0, 1) == 1);
axiom ($and.i1(1, 0) == 0);
axiom ($or.i1(1, 0) == 1);
axiom ($xor.i1(1, 0) == 1);
axiom ($and.i1(1, 1) == 1);
axiom ($or.i1(1, 1) == 1);
axiom ($xor.i1(1, 1) == 0);
axiom ($and.i32(32, 16) == 0);
// Integer predicates
function {:inline} $ule.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i1(i1: i1, i2: i1) returns (i1) { (if $ule.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i5(i1: i5, i2: i5) returns (i1) { (if $ule.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i6(i1: i6, i2: i6) returns (i1) { (if $ule.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i8(i1: i8, i2: i8) returns (i1) { (if $ule.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i16(i1: i16, i2: i16) returns (i1) { (if $ule.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i24(i1: i24, i2: i24) returns (i1) { (if $ule.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i32(i1: i32, i2: i32) returns (i1) { (if $ule.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i40(i1: i40, i2: i40) returns (i1) { (if $ule.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i48(i1: i48, i2: i48) returns (i1) { (if $ule.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i56(i1: i56, i2: i56) returns (i1) { (if $ule.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i64(i1: i64, i2: i64) returns (i1) { (if $ule.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i80(i1: i80, i2: i80) returns (i1) { (if $ule.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i88(i1: i88, i2: i88) returns (i1) { (if $ule.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i96(i1: i96, i2: i96) returns (i1) { (if $ule.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i128(i1: i128, i2: i128) returns (i1) { (if $ule.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i160(i1: i160, i2: i160) returns (i1) { (if $ule.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i256(i1: i256, i2: i256) returns (i1) { (if $ule.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 < i2) }
function {:inline} $ult.i1(i1: i1, i2: i1) returns (i1) { (if $ult.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 < i2) }
function {:inline} $ult.i5(i1: i5, i2: i5) returns (i1) { (if $ult.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 < i2) }
function {:inline} $ult.i6(i1: i6, i2: i6) returns (i1) { (if $ult.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 < i2) }
function {:inline} $ult.i8(i1: i8, i2: i8) returns (i1) { (if $ult.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 < i2) }
function {:inline} $ult.i16(i1: i16, i2: i16) returns (i1) { (if $ult.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 < i2) }
function {:inline} $ult.i24(i1: i24, i2: i24) returns (i1) { (if $ult.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 < i2) }
function {:inline} $ult.i32(i1: i32, i2: i32) returns (i1) { (if $ult.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 < i2) }
function {:inline} $ult.i40(i1: i40, i2: i40) returns (i1) { (if $ult.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 < i2) }
function {:inline} $ult.i48(i1: i48, i2: i48) returns (i1) { (if $ult.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 < i2) }
function {:inline} $ult.i56(i1: i56, i2: i56) returns (i1) { (if $ult.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 < i2) }
function {:inline} $ult.i64(i1: i64, i2: i64) returns (i1) { (if $ult.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 < i2) }
function {:inline} $ult.i80(i1: i80, i2: i80) returns (i1) { (if $ult.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 < i2) }
function {:inline} $ult.i88(i1: i88, i2: i88) returns (i1) { (if $ult.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 < i2) }
function {:inline} $ult.i96(i1: i96, i2: i96) returns (i1) { (if $ult.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 < i2) }
function {:inline} $ult.i128(i1: i128, i2: i128) returns (i1) { (if $ult.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 < i2) }
function {:inline} $ult.i160(i1: i160, i2: i160) returns (i1) { (if $ult.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 < i2) }
function {:inline} $ult.i256(i1: i256, i2: i256) returns (i1) { (if $ult.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i1(i1: i1, i2: i1) returns (i1) { (if $uge.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i5(i1: i5, i2: i5) returns (i1) { (if $uge.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i6(i1: i6, i2: i6) returns (i1) { (if $uge.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i8(i1: i8, i2: i8) returns (i1) { (if $uge.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i16(i1: i16, i2: i16) returns (i1) { (if $uge.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i24(i1: i24, i2: i24) returns (i1) { (if $uge.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i32(i1: i32, i2: i32) returns (i1) { (if $uge.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i40(i1: i40, i2: i40) returns (i1) { (if $uge.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i48(i1: i48, i2: i48) returns (i1) { (if $uge.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i56(i1: i56, i2: i56) returns (i1) { (if $uge.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i64(i1: i64, i2: i64) returns (i1) { (if $uge.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i80(i1: i80, i2: i80) returns (i1) { (if $uge.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i88(i1: i88, i2: i88) returns (i1) { (if $uge.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i96(i1: i96, i2: i96) returns (i1) { (if $uge.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i128(i1: i128, i2: i128) returns (i1) { (if $uge.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i160(i1: i160, i2: i160) returns (i1) { (if $uge.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i256(i1: i256, i2: i256) returns (i1) { (if $uge.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i1(i1: i1, i2: i1) returns (i1) { (if $ugt.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i5(i1: i5, i2: i5) returns (i1) { (if $ugt.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i6(i1: i6, i2: i6) returns (i1) { (if $ugt.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i8(i1: i8, i2: i8) returns (i1) { (if $ugt.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i16(i1: i16, i2: i16) returns (i1) { (if $ugt.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i24(i1: i24, i2: i24) returns (i1) { (if $ugt.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i32(i1: i32, i2: i32) returns (i1) { (if $ugt.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i40(i1: i40, i2: i40) returns (i1) { (if $ugt.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i48(i1: i48, i2: i48) returns (i1) { (if $ugt.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i56(i1: i56, i2: i56) returns (i1) { (if $ugt.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i64(i1: i64, i2: i64) returns (i1) { (if $ugt.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i80(i1: i80, i2: i80) returns (i1) { (if $ugt.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i88(i1: i88, i2: i88) returns (i1) { (if $ugt.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i96(i1: i96, i2: i96) returns (i1) { (if $ugt.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i128(i1: i128, i2: i128) returns (i1) { (if $ugt.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i160(i1: i160, i2: i160) returns (i1) { (if $ugt.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i256(i1: i256, i2: i256) returns (i1) { (if $ugt.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i1(i1: i1, i2: i1) returns (i1) { (if $sle.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i5(i1: i5, i2: i5) returns (i1) { (if $sle.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i6(i1: i6, i2: i6) returns (i1) { (if $sle.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i8(i1: i8, i2: i8) returns (i1) { (if $sle.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i16(i1: i16, i2: i16) returns (i1) { (if $sle.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i24(i1: i24, i2: i24) returns (i1) { (if $sle.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i32(i1: i32, i2: i32) returns (i1) { (if $sle.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i40(i1: i40, i2: i40) returns (i1) { (if $sle.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i48(i1: i48, i2: i48) returns (i1) { (if $sle.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i56(i1: i56, i2: i56) returns (i1) { (if $sle.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i64(i1: i64, i2: i64) returns (i1) { (if $sle.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i80(i1: i80, i2: i80) returns (i1) { (if $sle.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i88(i1: i88, i2: i88) returns (i1) { (if $sle.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i96(i1: i96, i2: i96) returns (i1) { (if $sle.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i128(i1: i128, i2: i128) returns (i1) { (if $sle.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i160(i1: i160, i2: i160) returns (i1) { (if $sle.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i256(i1: i256, i2: i256) returns (i1) { (if $sle.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 < i2) }
function {:inline} $slt.i1(i1: i1, i2: i1) returns (i1) { (if $slt.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 < i2) }
function {:inline} $slt.i5(i1: i5, i2: i5) returns (i1) { (if $slt.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 < i2) }
function {:inline} $slt.i6(i1: i6, i2: i6) returns (i1) { (if $slt.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 < i2) }
function {:inline} $slt.i8(i1: i8, i2: i8) returns (i1) { (if $slt.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 < i2) }
function {:inline} $slt.i16(i1: i16, i2: i16) returns (i1) { (if $slt.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 < i2) }
function {:inline} $slt.i24(i1: i24, i2: i24) returns (i1) { (if $slt.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 < i2) }
function {:inline} $slt.i32(i1: i32, i2: i32) returns (i1) { (if $slt.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 < i2) }
function {:inline} $slt.i40(i1: i40, i2: i40) returns (i1) { (if $slt.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 < i2) }
function {:inline} $slt.i48(i1: i48, i2: i48) returns (i1) { (if $slt.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 < i2) }
function {:inline} $slt.i56(i1: i56, i2: i56) returns (i1) { (if $slt.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 < i2) }
function {:inline} $slt.i64(i1: i64, i2: i64) returns (i1) { (if $slt.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 < i2) }
function {:inline} $slt.i80(i1: i80, i2: i80) returns (i1) { (if $slt.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 < i2) }
function {:inline} $slt.i88(i1: i88, i2: i88) returns (i1) { (if $slt.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 < i2) }
function {:inline} $slt.i96(i1: i96, i2: i96) returns (i1) { (if $slt.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 < i2) }
function {:inline} $slt.i128(i1: i128, i2: i128) returns (i1) { (if $slt.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 < i2) }
function {:inline} $slt.i160(i1: i160, i2: i160) returns (i1) { (if $slt.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 < i2) }
function {:inline} $slt.i256(i1: i256, i2: i256) returns (i1) { (if $slt.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i1(i1: i1, i2: i1) returns (i1) { (if $sge.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i5(i1: i5, i2: i5) returns (i1) { (if $sge.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i6(i1: i6, i2: i6) returns (i1) { (if $sge.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i8(i1: i8, i2: i8) returns (i1) { (if $sge.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i16(i1: i16, i2: i16) returns (i1) { (if $sge.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i24(i1: i24, i2: i24) returns (i1) { (if $sge.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i32(i1: i32, i2: i32) returns (i1) { (if $sge.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i40(i1: i40, i2: i40) returns (i1) { (if $sge.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i48(i1: i48, i2: i48) returns (i1) { (if $sge.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i56(i1: i56, i2: i56) returns (i1) { (if $sge.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i64(i1: i64, i2: i64) returns (i1) { (if $sge.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i80(i1: i80, i2: i80) returns (i1) { (if $sge.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i88(i1: i88, i2: i88) returns (i1) { (if $sge.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i96(i1: i96, i2: i96) returns (i1) { (if $sge.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i128(i1: i128, i2: i128) returns (i1) { (if $sge.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i160(i1: i160, i2: i160) returns (i1) { (if $sge.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i256(i1: i256, i2: i256) returns (i1) { (if $sge.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i1(i1: i1, i2: i1) returns (i1) { (if $sgt.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i5(i1: i5, i2: i5) returns (i1) { (if $sgt.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i6(i1: i6, i2: i6) returns (i1) { (if $sgt.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i8(i1: i8, i2: i8) returns (i1) { (if $sgt.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i16(i1: i16, i2: i16) returns (i1) { (if $sgt.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i24(i1: i24, i2: i24) returns (i1) { (if $sgt.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i32(i1: i32, i2: i32) returns (i1) { (if $sgt.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i40(i1: i40, i2: i40) returns (i1) { (if $sgt.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i48(i1: i48, i2: i48) returns (i1) { (if $sgt.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i56(i1: i56, i2: i56) returns (i1) { (if $sgt.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i64(i1: i64, i2: i64) returns (i1) { (if $sgt.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i80(i1: i80, i2: i80) returns (i1) { (if $sgt.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i88(i1: i88, i2: i88) returns (i1) { (if $sgt.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i96(i1: i96, i2: i96) returns (i1) { (if $sgt.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i128(i1: i128, i2: i128) returns (i1) { (if $sgt.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i160(i1: i160, i2: i160) returns (i1) { (if $sgt.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i256(i1: i256, i2: i256) returns (i1) { (if $sgt.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 == i2) }
function {:inline} $eq.i1(i1: i1, i2: i1) returns (i1) { (if $eq.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 == i2) }
function {:inline} $eq.i5(i1: i5, i2: i5) returns (i1) { (if $eq.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 == i2) }
function {:inline} $eq.i6(i1: i6, i2: i6) returns (i1) { (if $eq.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 == i2) }
function {:inline} $eq.i8(i1: i8, i2: i8) returns (i1) { (if $eq.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 == i2) }
function {:inline} $eq.i16(i1: i16, i2: i16) returns (i1) { (if $eq.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 == i2) }
function {:inline} $eq.i24(i1: i24, i2: i24) returns (i1) { (if $eq.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 == i2) }
function {:inline} $eq.i32(i1: i32, i2: i32) returns (i1) { (if $eq.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 == i2) }
function {:inline} $eq.i40(i1: i40, i2: i40) returns (i1) { (if $eq.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 == i2) }
function {:inline} $eq.i48(i1: i48, i2: i48) returns (i1) { (if $eq.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 == i2) }
function {:inline} $eq.i56(i1: i56, i2: i56) returns (i1) { (if $eq.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 == i2) }
function {:inline} $eq.i64(i1: i64, i2: i64) returns (i1) { (if $eq.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 == i2) }
function {:inline} $eq.i80(i1: i80, i2: i80) returns (i1) { (if $eq.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 == i2) }
function {:inline} $eq.i88(i1: i88, i2: i88) returns (i1) { (if $eq.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 == i2) }
function {:inline} $eq.i96(i1: i96, i2: i96) returns (i1) { (if $eq.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 == i2) }
function {:inline} $eq.i128(i1: i128, i2: i128) returns (i1) { (if $eq.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 == i2) }
function {:inline} $eq.i160(i1: i160, i2: i160) returns (i1) { (if $eq.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 == i2) }
function {:inline} $eq.i256(i1: i256, i2: i256) returns (i1) { (if $eq.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 != i2) }
function {:inline} $ne.i1(i1: i1, i2: i1) returns (i1) { (if $ne.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 != i2) }
function {:inline} $ne.i5(i1: i5, i2: i5) returns (i1) { (if $ne.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 != i2) }
function {:inline} $ne.i6(i1: i6, i2: i6) returns (i1) { (if $ne.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 != i2) }
function {:inline} $ne.i8(i1: i8, i2: i8) returns (i1) { (if $ne.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 != i2) }
function {:inline} $ne.i16(i1: i16, i2: i16) returns (i1) { (if $ne.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 != i2) }
function {:inline} $ne.i24(i1: i24, i2: i24) returns (i1) { (if $ne.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 != i2) }
function {:inline} $ne.i32(i1: i32, i2: i32) returns (i1) { (if $ne.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 != i2) }
function {:inline} $ne.i40(i1: i40, i2: i40) returns (i1) { (if $ne.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 != i2) }
function {:inline} $ne.i48(i1: i48, i2: i48) returns (i1) { (if $ne.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 != i2) }
function {:inline} $ne.i56(i1: i56, i2: i56) returns (i1) { (if $ne.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 != i2) }
function {:inline} $ne.i64(i1: i64, i2: i64) returns (i1) { (if $ne.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 != i2) }
function {:inline} $ne.i80(i1: i80, i2: i80) returns (i1) { (if $ne.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 != i2) }
function {:inline} $ne.i88(i1: i88, i2: i88) returns (i1) { (if $ne.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 != i2) }
function {:inline} $ne.i96(i1: i96, i2: i96) returns (i1) { (if $ne.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 != i2) }
function {:inline} $ne.i128(i1: i128, i2: i128) returns (i1) { (if $ne.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 != i2) }
function {:inline} $ne.i160(i1: i160, i2: i160) returns (i1) { (if $ne.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 != i2) }
function {:inline} $ne.i256(i1: i256, i2: i256) returns (i1) { (if $ne.i256.bool(i1, i2) then 1 else 0) }
// Integer load/store operations
function {:inline} $load.i1(M: [ref] i1, p: ref) returns (i1) { M[p] }
function {:inline} $store.i1(M: [ref] i1, p: ref, i: i1) returns ([ref] i1) { M[p := i] }
function {:inline} $load.i5(M: [ref] i5, p: ref) returns (i5) { M[p] }
function {:inline} $store.i5(M: [ref] i5, p: ref, i: i5) returns ([ref] i5) { M[p := i] }
function {:inline} $load.i6(M: [ref] i6, p: ref) returns (i6) { M[p] }
function {:inline} $store.i6(M: [ref] i6, p: ref, i: i6) returns ([ref] i6) { M[p := i] }
function {:inline} $load.i8(M: [ref] i8, p: ref) returns (i8) { M[p] }
function {:inline} $store.i8(M: [ref] i8, p: ref, i: i8) returns ([ref] i8) { M[p := i] }
function {:inline} $load.i16(M: [ref] i16, p: ref) returns (i16) { M[p] }
function {:inline} $store.i16(M: [ref] i16, p: ref, i: i16) returns ([ref] i16) { M[p := i] }
function {:inline} $load.i24(M: [ref] i24, p: ref) returns (i24) { M[p] }
function {:inline} $store.i24(M: [ref] i24, p: ref, i: i24) returns ([ref] i24) { M[p := i] }
function {:inline} $load.i32(M: [ref] i32, p: ref) returns (i32) { M[p] }
function {:inline} $store.i32(M: [ref] i32, p: ref, i: i32) returns ([ref] i32) { M[p := i] }
function {:inline} $load.i40(M: [ref] i40, p: ref) returns (i40) { M[p] }
function {:inline} $store.i40(M: [ref] i40, p: ref, i: i40) returns ([ref] i40) { M[p := i] }
function {:inline} $load.i48(M: [ref] i48, p: ref) returns (i48) { M[p] }
function {:inline} $store.i48(M: [ref] i48, p: ref, i: i48) returns ([ref] i48) { M[p := i] }
function {:inline} $load.i56(M: [ref] i56, p: ref) returns (i56) { M[p] }
function {:inline} $store.i56(M: [ref] i56, p: ref, i: i56) returns ([ref] i56) { M[p := i] }
function {:inline} $load.i64(M: [ref] i64, p: ref) returns (i64) { M[p] }
function {:inline} $store.i64(M: [ref] i64, p: ref, i: i64) returns ([ref] i64) { M[p := i] }
function {:inline} $load.i80(M: [ref] i80, p: ref) returns (i80) { M[p] }
function {:inline} $store.i80(M: [ref] i80, p: ref, i: i80) returns ([ref] i80) { M[p := i] }
function {:inline} $load.i88(M: [ref] i88, p: ref) returns (i88) { M[p] }
function {:inline} $store.i88(M: [ref] i88, p: ref, i: i88) returns ([ref] i88) { M[p := i] }
function {:inline} $load.i96(M: [ref] i96, p: ref) returns (i96) { M[p] }
function {:inline} $store.i96(M: [ref] i96, p: ref, i: i96) returns ([ref] i96) { M[p := i] }
function {:inline} $load.i128(M: [ref] i128, p: ref) returns (i128) { M[p] }
function {:inline} $store.i128(M: [ref] i128, p: ref, i: i128) returns ([ref] i128) { M[p := i] }
function {:inline} $load.i160(M: [ref] i160, p: ref) returns (i160) { M[p] }
function {:inline} $store.i160(M: [ref] i160, p: ref, i: i160) returns ([ref] i160) { M[p := i] }
function {:inline} $load.i256(M: [ref] i256, p: ref) returns (i256) { M[p] }
function {:inline} $store.i256(M: [ref] i256, p: ref, i: i256) returns ([ref] i256) { M[p := i] }
// Conversion between integer types
function {:inline} $trunc.i5.i1(i: i5) returns (i1) { i }
function {:inline} $trunc.i6.i1(i: i6) returns (i1) { i }
function {:inline} $trunc.i8.i1(i: i8) returns (i1) { i }
function {:inline} $trunc.i16.i1(i: i16) returns (i1) { i }
function {:inline} $trunc.i24.i1(i: i24) returns (i1) { i }
function {:inline} $trunc.i32.i1(i: i32) returns (i1) { i }
function {:inline} $trunc.i40.i1(i: i40) returns (i1) { i }
function {:inline} $trunc.i48.i1(i: i48) returns (i1) { i }
function {:inline} $trunc.i56.i1(i: i56) returns (i1) { i }
function {:inline} $trunc.i64.i1(i: i64) returns (i1) { i }
function {:inline} $trunc.i80.i1(i: i80) returns (i1) { i }
function {:inline} $trunc.i88.i1(i: i88) returns (i1) { i }
function {:inline} $trunc.i96.i1(i: i96) returns (i1) { i }
function {:inline} $trunc.i128.i1(i: i128) returns (i1) { i }
function {:inline} $trunc.i160.i1(i: i160) returns (i1) { i }
function {:inline} $trunc.i256.i1(i: i256) returns (i1) { i }
function {:inline} $trunc.i6.i5(i: i6) returns (i5) { i }
function {:inline} $trunc.i8.i5(i: i8) returns (i5) { i }
function {:inline} $trunc.i16.i5(i: i16) returns (i5) { i }
function {:inline} $trunc.i24.i5(i: i24) returns (i5) { i }
function {:inline} $trunc.i32.i5(i: i32) returns (i5) { i }
function {:inline} $trunc.i40.i5(i: i40) returns (i5) { i }
function {:inline} $trunc.i48.i5(i: i48) returns (i5) { i }
function {:inline} $trunc.i56.i5(i: i56) returns (i5) { i }
function {:inline} $trunc.i64.i5(i: i64) returns (i5) { i }
function {:inline} $trunc.i80.i5(i: i80) returns (i5) { i }
function {:inline} $trunc.i88.i5(i: i88) returns (i5) { i }
function {:inline} $trunc.i96.i5(i: i96) returns (i5) { i }
function {:inline} $trunc.i128.i5(i: i128) returns (i5) { i }
function {:inline} $trunc.i160.i5(i: i160) returns (i5) { i }
function {:inline} $trunc.i256.i5(i: i256) returns (i5) { i }
function {:inline} $trunc.i8.i6(i: i8) returns (i6) { i }
function {:inline} $trunc.i16.i6(i: i16) returns (i6) { i }
function {:inline} $trunc.i24.i6(i: i24) returns (i6) { i }
function {:inline} $trunc.i32.i6(i: i32) returns (i6) { i }
function {:inline} $trunc.i40.i6(i: i40) returns (i6) { i }
function {:inline} $trunc.i48.i6(i: i48) returns (i6) { i }
function {:inline} $trunc.i56.i6(i: i56) returns (i6) { i }
function {:inline} $trunc.i64.i6(i: i64) returns (i6) { i }
function {:inline} $trunc.i80.i6(i: i80) returns (i6) { i }
function {:inline} $trunc.i88.i6(i: i88) returns (i6) { i }
function {:inline} $trunc.i96.i6(i: i96) returns (i6) { i }
function {:inline} $trunc.i128.i6(i: i128) returns (i6) { i }
function {:inline} $trunc.i160.i6(i: i160) returns (i6) { i }
function {:inline} $trunc.i256.i6(i: i256) returns (i6) { i }
function {:inline} $trunc.i16.i8(i: i16) returns (i8) { i }
function {:inline} $trunc.i24.i8(i: i24) returns (i8) { i }
function {:inline} $trunc.i32.i8(i: i32) returns (i8) { i }
function {:inline} $trunc.i40.i8(i: i40) returns (i8) { i }
function {:inline} $trunc.i48.i8(i: i48) returns (i8) { i }
function {:inline} $trunc.i56.i8(i: i56) returns (i8) { i }
function {:inline} $trunc.i64.i8(i: i64) returns (i8) { i }
function {:inline} $trunc.i80.i8(i: i80) returns (i8) { i }
function {:inline} $trunc.i88.i8(i: i88) returns (i8) { i }
function {:inline} $trunc.i96.i8(i: i96) returns (i8) { i }
function {:inline} $trunc.i128.i8(i: i128) returns (i8) { i }
function {:inline} $trunc.i160.i8(i: i160) returns (i8) { i }
function {:inline} $trunc.i256.i8(i: i256) returns (i8) { i }
function {:inline} $trunc.i24.i16(i: i24) returns (i16) { i }
function {:inline} $trunc.i32.i16(i: i32) returns (i16) { i }
function {:inline} $trunc.i40.i16(i: i40) returns (i16) { i }
function {:inline} $trunc.i48.i16(i: i48) returns (i16) { i }
function {:inline} $trunc.i56.i16(i: i56) returns (i16) { i }
function {:inline} $trunc.i64.i16(i: i64) returns (i16) { i }
function {:inline} $trunc.i80.i16(i: i80) returns (i16) { i }
function {:inline} $trunc.i88.i16(i: i88) returns (i16) { i }
function {:inline} $trunc.i96.i16(i: i96) returns (i16) { i }
function {:inline} $trunc.i128.i16(i: i128) returns (i16) { i }
function {:inline} $trunc.i160.i16(i: i160) returns (i16) { i }
function {:inline} $trunc.i256.i16(i: i256) returns (i16) { i }
function {:inline} $trunc.i32.i24(i: i32) returns (i24) { i }
function {:inline} $trunc.i40.i24(i: i40) returns (i24) { i }
function {:inline} $trunc.i48.i24(i: i48) returns (i24) { i }
function {:inline} $trunc.i56.i24(i: i56) returns (i24) { i }
function {:inline} $trunc.i64.i24(i: i64) returns (i24) { i }
function {:inline} $trunc.i80.i24(i: i80) returns (i24) { i }
function {:inline} $trunc.i88.i24(i: i88) returns (i24) { i }
function {:inline} $trunc.i96.i24(i: i96) returns (i24) { i }
function {:inline} $trunc.i128.i24(i: i128) returns (i24) { i }
function {:inline} $trunc.i160.i24(i: i160) returns (i24) { i }
function {:inline} $trunc.i256.i24(i: i256) returns (i24) { i }
function {:inline} $trunc.i40.i32(i: i40) returns (i32) { i }
function {:inline} $trunc.i48.i32(i: i48) returns (i32) { i }
function {:inline} $trunc.i56.i32(i: i56) returns (i32) { i }
function {:inline} $trunc.i64.i32(i: i64) returns (i32) { i }
function {:inline} $trunc.i80.i32(i: i80) returns (i32) { i }
function {:inline} $trunc.i88.i32(i: i88) returns (i32) { i }
function {:inline} $trunc.i96.i32(i: i96) returns (i32) { i }
function {:inline} $trunc.i128.i32(i: i128) returns (i32) { i }
function {:inline} $trunc.i160.i32(i: i160) returns (i32) { i }
function {:inline} $trunc.i256.i32(i: i256) returns (i32) { i }
function {:inline} $trunc.i48.i40(i: i48) returns (i40) { i }
function {:inline} $trunc.i56.i40(i: i56) returns (i40) { i }
function {:inline} $trunc.i64.i40(i: i64) returns (i40) { i }
function {:inline} $trunc.i80.i40(i: i80) returns (i40) { i }
function {:inline} $trunc.i88.i40(i: i88) returns (i40) { i }
function {:inline} $trunc.i96.i40(i: i96) returns (i40) { i }
function {:inline} $trunc.i128.i40(i: i128) returns (i40) { i }
function {:inline} $trunc.i160.i40(i: i160) returns (i40) { i }
function {:inline} $trunc.i256.i40(i: i256) returns (i40) { i }
function {:inline} $trunc.i56.i48(i: i56) returns (i48) { i }
function {:inline} $trunc.i64.i48(i: i64) returns (i48) { i }
function {:inline} $trunc.i80.i48(i: i80) returns (i48) { i }
function {:inline} $trunc.i88.i48(i: i88) returns (i48) { i }
function {:inline} $trunc.i96.i48(i: i96) returns (i48) { i }
function {:inline} $trunc.i128.i48(i: i128) returns (i48) { i }
function {:inline} $trunc.i160.i48(i: i160) returns (i48) { i }
function {:inline} $trunc.i256.i48(i: i256) returns (i48) { i }
function {:inline} $trunc.i64.i56(i: i64) returns (i56) { i }
function {:inline} $trunc.i80.i56(i: i80) returns (i56) { i }
function {:inline} $trunc.i88.i56(i: i88) returns (i56) { i }
function {:inline} $trunc.i96.i56(i: i96) returns (i56) { i }
function {:inline} $trunc.i128.i56(i: i128) returns (i56) { i }
function {:inline} $trunc.i160.i56(i: i160) returns (i56) { i }
function {:inline} $trunc.i256.i56(i: i256) returns (i56) { i }
function {:inline} $trunc.i80.i64(i: i80) returns (i64) { i }
function {:inline} $trunc.i88.i64(i: i88) returns (i64) { i }
function {:inline} $trunc.i96.i64(i: i96) returns (i64) { i }
function {:inline} $trunc.i128.i64(i: i128) returns (i64) { i }
function {:inline} $trunc.i160.i64(i: i160) returns (i64) { i }
function {:inline} $trunc.i256.i64(i: i256) returns (i64) { i }
function {:inline} $trunc.i88.i80(i: i88) returns (i80) { i }
function {:inline} $trunc.i96.i80(i: i96) returns (i80) { i }
function {:inline} $trunc.i128.i80(i: i128) returns (i80) { i }
function {:inline} $trunc.i160.i80(i: i160) returns (i80) { i }
function {:inline} $trunc.i256.i80(i: i256) returns (i80) { i }
function {:inline} $trunc.i96.i88(i: i96) returns (i88) { i }
function {:inline} $trunc.i128.i88(i: i128) returns (i88) { i }
function {:inline} $trunc.i160.i88(i: i160) returns (i88) { i }
function {:inline} $trunc.i256.i88(i: i256) returns (i88) { i }
function {:inline} $trunc.i128.i96(i: i128) returns (i96) { i }
function {:inline} $trunc.i160.i96(i: i160) returns (i96) { i }
function {:inline} $trunc.i256.i96(i: i256) returns (i96) { i }
function {:inline} $trunc.i160.i128(i: i160) returns (i128) { i }
function {:inline} $trunc.i256.i128(i: i256) returns (i128) { i }
function {:inline} $trunc.i256.i160(i: i256) returns (i160) { i }
function {:inline} $sext.i1.i5(i: i1) returns (i5) { i }
function {:inline} $sext.i1.i6(i: i1) returns (i6) { i }
function {:inline} $sext.i1.i8(i: i1) returns (i8) { i }
function {:inline} $sext.i1.i16(i: i1) returns (i16) { i }
function {:inline} $sext.i1.i24(i: i1) returns (i24) { i }
function {:inline} $sext.i1.i32(i: i1) returns (i32) { i }
function {:inline} $sext.i1.i40(i: i1) returns (i40) { i }
function {:inline} $sext.i1.i48(i: i1) returns (i48) { i }
function {:inline} $sext.i1.i56(i: i1) returns (i56) { i }
function {:inline} $sext.i1.i64(i: i1) returns (i64) { i }
function {:inline} $sext.i1.i80(i: i1) returns (i80) { i }
function {:inline} $sext.i1.i88(i: i1) returns (i88) { i }
function {:inline} $sext.i1.i96(i: i1) returns (i96) { i }
function {:inline} $sext.i1.i128(i: i1) returns (i128) { i }
function {:inline} $sext.i1.i160(i: i1) returns (i160) { i }
function {:inline} $sext.i1.i256(i: i1) returns (i256) { i }
function {:inline} $sext.i5.i6(i: i5) returns (i6) { i }
function {:inline} $sext.i5.i8(i: i5) returns (i8) { i }
function {:inline} $sext.i5.i16(i: i5) returns (i16) { i }
function {:inline} $sext.i5.i24(i: i5) returns (i24) { i }
function {:inline} $sext.i5.i32(i: i5) returns (i32) { i }
function {:inline} $sext.i5.i40(i: i5) returns (i40) { i }
function {:inline} $sext.i5.i48(i: i5) returns (i48) { i }
function {:inline} $sext.i5.i56(i: i5) returns (i56) { i }
function {:inline} $sext.i5.i64(i: i5) returns (i64) { i }
function {:inline} $sext.i5.i80(i: i5) returns (i80) { i }
function {:inline} $sext.i5.i88(i: i5) returns (i88) { i }
function {:inline} $sext.i5.i96(i: i5) returns (i96) { i }
function {:inline} $sext.i5.i128(i: i5) returns (i128) { i }
function {:inline} $sext.i5.i160(i: i5) returns (i160) { i }
function {:inline} $sext.i5.i256(i: i5) returns (i256) { i }
function {:inline} $sext.i6.i8(i: i6) returns (i8) { i }
function {:inline} $sext.i6.i16(i: i6) returns (i16) { i }
function {:inline} $sext.i6.i24(i: i6) returns (i24) { i }
function {:inline} $sext.i6.i32(i: i6) returns (i32) { i }
function {:inline} $sext.i6.i40(i: i6) returns (i40) { i }
function {:inline} $sext.i6.i48(i: i6) returns (i48) { i }
function {:inline} $sext.i6.i56(i: i6) returns (i56) { i }
function {:inline} $sext.i6.i64(i: i6) returns (i64) { i }
function {:inline} $sext.i6.i80(i: i6) returns (i80) { i }
function {:inline} $sext.i6.i88(i: i6) returns (i88) { i }
function {:inline} $sext.i6.i96(i: i6) returns (i96) { i }
function {:inline} $sext.i6.i128(i: i6) returns (i128) { i }
function {:inline} $sext.i6.i160(i: i6) returns (i160) { i }
function {:inline} $sext.i6.i256(i: i6) returns (i256) { i }
function {:inline} $sext.i8.i16(i: i8) returns (i16) { i }
function {:inline} $sext.i8.i24(i: i8) returns (i24) { i }
function {:inline} $sext.i8.i32(i: i8) returns (i32) { i }
function {:inline} $sext.i8.i40(i: i8) returns (i40) { i }
function {:inline} $sext.i8.i48(i: i8) returns (i48) { i }
function {:inline} $sext.i8.i56(i: i8) returns (i56) { i }
function {:inline} $sext.i8.i64(i: i8) returns (i64) { i }
function {:inline} $sext.i8.i80(i: i8) returns (i80) { i }
function {:inline} $sext.i8.i88(i: i8) returns (i88) { i }
function {:inline} $sext.i8.i96(i: i8) returns (i96) { i }
function {:inline} $sext.i8.i128(i: i8) returns (i128) { i }
function {:inline} $sext.i8.i160(i: i8) returns (i160) { i }
function {:inline} $sext.i8.i256(i: i8) returns (i256) { i }
function {:inline} $sext.i16.i24(i: i16) returns (i24) { i }
function {:inline} $sext.i16.i32(i: i16) returns (i32) { i }
function {:inline} $sext.i16.i40(i: i16) returns (i40) { i }
function {:inline} $sext.i16.i48(i: i16) returns (i48) { i }
function {:inline} $sext.i16.i56(i: i16) returns (i56) { i }
function {:inline} $sext.i16.i64(i: i16) returns (i64) { i }
function {:inline} $sext.i16.i80(i: i16) returns (i80) { i }
function {:inline} $sext.i16.i88(i: i16) returns (i88) { i }
function {:inline} $sext.i16.i96(i: i16) returns (i96) { i }
function {:inline} $sext.i16.i128(i: i16) returns (i128) { i }
function {:inline} $sext.i16.i160(i: i16) returns (i160) { i }
function {:inline} $sext.i16.i256(i: i16) returns (i256) { i }
function {:inline} $sext.i24.i32(i: i24) returns (i32) { i }
function {:inline} $sext.i24.i40(i: i24) returns (i40) { i }
function {:inline} $sext.i24.i48(i: i24) returns (i48) { i }
function {:inline} $sext.i24.i56(i: i24) returns (i56) { i }
function {:inline} $sext.i24.i64(i: i24) returns (i64) { i }
function {:inline} $sext.i24.i80(i: i24) returns (i80) { i }
function {:inline} $sext.i24.i88(i: i24) returns (i88) { i }
function {:inline} $sext.i24.i96(i: i24) returns (i96) { i }
function {:inline} $sext.i24.i128(i: i24) returns (i128) { i }
function {:inline} $sext.i24.i160(i: i24) returns (i160) { i }
function {:inline} $sext.i24.i256(i: i24) returns (i256) { i }
function {:inline} $sext.i32.i40(i: i32) returns (i40) { i }
function {:inline} $sext.i32.i48(i: i32) returns (i48) { i }
function {:inline} $sext.i32.i56(i: i32) returns (i56) { i }
function {:inline} $sext.i32.i64(i: i32) returns (i64) { i }
function {:inline} $sext.i32.i80(i: i32) returns (i80) { i }
function {:inline} $sext.i32.i88(i: i32) returns (i88) { i }
function {:inline} $sext.i32.i96(i: i32) returns (i96) { i }
function {:inline} $sext.i32.i128(i: i32) returns (i128) { i }
function {:inline} $sext.i32.i160(i: i32) returns (i160) { i }
function {:inline} $sext.i32.i256(i: i32) returns (i256) { i }
function {:inline} $sext.i40.i48(i: i40) returns (i48) { i }
function {:inline} $sext.i40.i56(i: i40) returns (i56) { i }
function {:inline} $sext.i40.i64(i: i40) returns (i64) { i }
function {:inline} $sext.i40.i80(i: i40) returns (i80) { i }
function {:inline} $sext.i40.i88(i: i40) returns (i88) { i }
function {:inline} $sext.i40.i96(i: i40) returns (i96) { i }
function {:inline} $sext.i40.i128(i: i40) returns (i128) { i }
function {:inline} $sext.i40.i160(i: i40) returns (i160) { i }
function {:inline} $sext.i40.i256(i: i40) returns (i256) { i }
function {:inline} $sext.i48.i56(i: i48) returns (i56) { i }
function {:inline} $sext.i48.i64(i: i48) returns (i64) { i }
function {:inline} $sext.i48.i80(i: i48) returns (i80) { i }
function {:inline} $sext.i48.i88(i: i48) returns (i88) { i }
function {:inline} $sext.i48.i96(i: i48) returns (i96) { i }
function {:inline} $sext.i48.i128(i: i48) returns (i128) { i }
function {:inline} $sext.i48.i160(i: i48) returns (i160) { i }
function {:inline} $sext.i48.i256(i: i48) returns (i256) { i }
function {:inline} $sext.i56.i64(i: i56) returns (i64) { i }
function {:inline} $sext.i56.i80(i: i56) returns (i80) { i }
function {:inline} $sext.i56.i88(i: i56) returns (i88) { i }
function {:inline} $sext.i56.i96(i: i56) returns (i96) { i }
function {:inline} $sext.i56.i128(i: i56) returns (i128) { i }
function {:inline} $sext.i56.i160(i: i56) returns (i160) { i }
function {:inline} $sext.i56.i256(i: i56) returns (i256) { i }
function {:inline} $sext.i64.i80(i: i64) returns (i80) { i }
function {:inline} $sext.i64.i88(i: i64) returns (i88) { i }
function {:inline} $sext.i64.i96(i: i64) returns (i96) { i }
function {:inline} $sext.i64.i128(i: i64) returns (i128) { i }
function {:inline} $sext.i64.i160(i: i64) returns (i160) { i }
function {:inline} $sext.i64.i256(i: i64) returns (i256) { i }
function {:inline} $sext.i80.i88(i: i80) returns (i88) { i }
function {:inline} $sext.i80.i96(i: i80) returns (i96) { i }
function {:inline} $sext.i80.i128(i: i80) returns (i128) { i }
function {:inline} $sext.i80.i160(i: i80) returns (i160) { i }
function {:inline} $sext.i80.i256(i: i80) returns (i256) { i }
function {:inline} $sext.i88.i96(i: i88) returns (i96) { i }
function {:inline} $sext.i88.i128(i: i88) returns (i128) { i }
function {:inline} $sext.i88.i160(i: i88) returns (i160) { i }
function {:inline} $sext.i88.i256(i: i88) returns (i256) { i }
function {:inline} $sext.i96.i128(i: i96) returns (i128) { i }
function {:inline} $sext.i96.i160(i: i96) returns (i160) { i }
function {:inline} $sext.i96.i256(i: i96) returns (i256) { i }
function {:inline} $sext.i128.i160(i: i128) returns (i160) { i }
function {:inline} $sext.i128.i256(i: i128) returns (i256) { i }
function {:inline} $sext.i160.i256(i: i160) returns (i256) { i }
function {:inline} $zext.i1.i5(i: i1) returns (i5) { i }
function {:inline} $zext.i1.i6(i: i1) returns (i6) { i }
function {:inline} $zext.i1.i8(i: i1) returns (i8) { i }
function {:inline} $zext.i1.i16(i: i1) returns (i16) { i }
function {:inline} $zext.i1.i24(i: i1) returns (i24) { i }
function {:inline} $zext.i1.i32(i: i1) returns (i32) { i }
function {:inline} $zext.i1.i40(i: i1) returns (i40) { i }
function {:inline} $zext.i1.i48(i: i1) returns (i48) { i }
function {:inline} $zext.i1.i56(i: i1) returns (i56) { i }
function {:inline} $zext.i1.i64(i: i1) returns (i64) { i }
function {:inline} $zext.i1.i80(i: i1) returns (i80) { i }
function {:inline} $zext.i1.i88(i: i1) returns (i88) { i }
function {:inline} $zext.i1.i96(i: i1) returns (i96) { i }
function {:inline} $zext.i1.i128(i: i1) returns (i128) { i }
function {:inline} $zext.i1.i160(i: i1) returns (i160) { i }
function {:inline} $zext.i1.i256(i: i1) returns (i256) { i }
function {:inline} $zext.i5.i6(i: i5) returns (i6) { i }
function {:inline} $zext.i5.i8(i: i5) returns (i8) { i }
function {:inline} $zext.i5.i16(i: i5) returns (i16) { i }
function {:inline} $zext.i5.i24(i: i5) returns (i24) { i }
function {:inline} $zext.i5.i32(i: i5) returns (i32) { i }
function {:inline} $zext.i5.i40(i: i5) returns (i40) { i }
function {:inline} $zext.i5.i48(i: i5) returns (i48) { i }
function {:inline} $zext.i5.i56(i: i5) returns (i56) { i }
function {:inline} $zext.i5.i64(i: i5) returns (i64) { i }
function {:inline} $zext.i5.i80(i: i5) returns (i80) { i }
function {:inline} $zext.i5.i88(i: i5) returns (i88) { i }
function {:inline} $zext.i5.i96(i: i5) returns (i96) { i }
function {:inline} $zext.i5.i128(i: i5) returns (i128) { i }
function {:inline} $zext.i5.i160(i: i5) returns (i160) { i }
function {:inline} $zext.i5.i256(i: i5) returns (i256) { i }
function {:inline} $zext.i6.i8(i: i6) returns (i8) { i }
function {:inline} $zext.i6.i16(i: i6) returns (i16) { i }
function {:inline} $zext.i6.i24(i: i6) returns (i24) { i }
function {:inline} $zext.i6.i32(i: i6) returns (i32) { i }
function {:inline} $zext.i6.i40(i: i6) returns (i40) { i }
function {:inline} $zext.i6.i48(i: i6) returns (i48) { i }
function {:inline} $zext.i6.i56(i: i6) returns (i56) { i }
function {:inline} $zext.i6.i64(i: i6) returns (i64) { i }
function {:inline} $zext.i6.i80(i: i6) returns (i80) { i }
function {:inline} $zext.i6.i88(i: i6) returns (i88) { i }
function {:inline} $zext.i6.i96(i: i6) returns (i96) { i }
function {:inline} $zext.i6.i128(i: i6) returns (i128) { i }
function {:inline} $zext.i6.i160(i: i6) returns (i160) { i }
function {:inline} $zext.i6.i256(i: i6) returns (i256) { i }
function {:inline} $zext.i8.i16(i: i8) returns (i16) { i }
function {:inline} $zext.i8.i24(i: i8) returns (i24) { i }
function {:inline} $zext.i8.i32(i: i8) returns (i32) { i }
function {:inline} $zext.i8.i40(i: i8) returns (i40) { i }
function {:inline} $zext.i8.i48(i: i8) returns (i48) { i }
function {:inline} $zext.i8.i56(i: i8) returns (i56) { i }
function {:inline} $zext.i8.i64(i: i8) returns (i64) { i }
function {:inline} $zext.i8.i80(i: i8) returns (i80) { i }
function {:inline} $zext.i8.i88(i: i8) returns (i88) { i }
function {:inline} $zext.i8.i96(i: i8) returns (i96) { i }
function {:inline} $zext.i8.i128(i: i8) returns (i128) { i }
function {:inline} $zext.i8.i160(i: i8) returns (i160) { i }
function {:inline} $zext.i8.i256(i: i8) returns (i256) { i }
function {:inline} $zext.i16.i24(i: i16) returns (i24) { i }
function {:inline} $zext.i16.i32(i: i16) returns (i32) { i }
function {:inline} $zext.i16.i40(i: i16) returns (i40) { i }
function {:inline} $zext.i16.i48(i: i16) returns (i48) { i }
function {:inline} $zext.i16.i56(i: i16) returns (i56) { i }
function {:inline} $zext.i16.i64(i: i16) returns (i64) { i }
function {:inline} $zext.i16.i80(i: i16) returns (i80) { i }
function {:inline} $zext.i16.i88(i: i16) returns (i88) { i }
function {:inline} $zext.i16.i96(i: i16) returns (i96) { i }
function {:inline} $zext.i16.i128(i: i16) returns (i128) { i }
function {:inline} $zext.i16.i160(i: i16) returns (i160) { i }
function {:inline} $zext.i16.i256(i: i16) returns (i256) { i }
function {:inline} $zext.i24.i32(i: i24) returns (i32) { i }
function {:inline} $zext.i24.i40(i: i24) returns (i40) { i }
function {:inline} $zext.i24.i48(i: i24) returns (i48) { i }
function {:inline} $zext.i24.i56(i: i24) returns (i56) { i }
function {:inline} $zext.i24.i64(i: i24) returns (i64) { i }
function {:inline} $zext.i24.i80(i: i24) returns (i80) { i }
function {:inline} $zext.i24.i88(i: i24) returns (i88) { i }
function {:inline} $zext.i24.i96(i: i24) returns (i96) { i }
function {:inline} $zext.i24.i128(i: i24) returns (i128) { i }
function {:inline} $zext.i24.i160(i: i24) returns (i160) { i }
function {:inline} $zext.i24.i256(i: i24) returns (i256) { i }
function {:inline} $zext.i32.i40(i: i32) returns (i40) { i }
function {:inline} $zext.i32.i48(i: i32) returns (i48) { i }
function {:inline} $zext.i32.i56(i: i32) returns (i56) { i }
function {:inline} $zext.i32.i64(i: i32) returns (i64) { i }
function {:inline} $zext.i32.i80(i: i32) returns (i80) { i }
function {:inline} $zext.i32.i88(i: i32) returns (i88) { i }
function {:inline} $zext.i32.i96(i: i32) returns (i96) { i }
function {:inline} $zext.i32.i128(i: i32) returns (i128) { i }
function {:inline} $zext.i32.i160(i: i32) returns (i160) { i }
function {:inline} $zext.i32.i256(i: i32) returns (i256) { i }
function {:inline} $zext.i40.i48(i: i40) returns (i48) { i }
function {:inline} $zext.i40.i56(i: i40) returns (i56) { i }
function {:inline} $zext.i40.i64(i: i40) returns (i64) { i }
function {:inline} $zext.i40.i80(i: i40) returns (i80) { i }
function {:inline} $zext.i40.i88(i: i40) returns (i88) { i }
function {:inline} $zext.i40.i96(i: i40) returns (i96) { i }
function {:inline} $zext.i40.i128(i: i40) returns (i128) { i }
function {:inline} $zext.i40.i160(i: i40) returns (i160) { i }
function {:inline} $zext.i40.i256(i: i40) returns (i256) { i }
function {:inline} $zext.i48.i56(i: i48) returns (i56) { i }
function {:inline} $zext.i48.i64(i: i48) returns (i64) { i }
function {:inline} $zext.i48.i80(i: i48) returns (i80) { i }
function {:inline} $zext.i48.i88(i: i48) returns (i88) { i }
function {:inline} $zext.i48.i96(i: i48) returns (i96) { i }
function {:inline} $zext.i48.i128(i: i48) returns (i128) { i }
function {:inline} $zext.i48.i160(i: i48) returns (i160) { i }
function {:inline} $zext.i48.i256(i: i48) returns (i256) { i }
function {:inline} $zext.i56.i64(i: i56) returns (i64) { i }
function {:inline} $zext.i56.i80(i: i56) returns (i80) { i }
function {:inline} $zext.i56.i88(i: i56) returns (i88) { i }
function {:inline} $zext.i56.i96(i: i56) returns (i96) { i }
function {:inline} $zext.i56.i128(i: i56) returns (i128) { i }
function {:inline} $zext.i56.i160(i: i56) returns (i160) { i }
function {:inline} $zext.i56.i256(i: i56) returns (i256) { i }
function {:inline} $zext.i64.i80(i: i64) returns (i80) { i }
function {:inline} $zext.i64.i88(i: i64) returns (i88) { i }
function {:inline} $zext.i64.i96(i: i64) returns (i96) { i }
function {:inline} $zext.i64.i128(i: i64) returns (i128) { i }
function {:inline} $zext.i64.i160(i: i64) returns (i160) { i }
function {:inline} $zext.i64.i256(i: i64) returns (i256) { i }
function {:inline} $zext.i80.i88(i: i80) returns (i88) { i }
function {:inline} $zext.i80.i96(i: i80) returns (i96) { i }
function {:inline} $zext.i80.i128(i: i80) returns (i128) { i }
function {:inline} $zext.i80.i160(i: i80) returns (i160) { i }
function {:inline} $zext.i80.i256(i: i80) returns (i256) { i }
function {:inline} $zext.i88.i96(i: i88) returns (i96) { i }
function {:inline} $zext.i88.i128(i: i88) returns (i128) { i }
function {:inline} $zext.i88.i160(i: i88) returns (i160) { i }
function {:inline} $zext.i88.i256(i: i88) returns (i256) { i }
function {:inline} $zext.i96.i128(i: i96) returns (i128) { i }
function {:inline} $zext.i96.i160(i: i96) returns (i160) { i }
function {:inline} $zext.i96.i256(i: i96) returns (i256) { i }
function {:inline} $zext.i128.i160(i: i128) returns (i160) { i }
function {:inline} $zext.i128.i256(i: i128) returns (i256) { i }
function {:inline} $zext.i160.i256(i: i160) returns (i256) { i }
function $extractvalue.i1(p: ref, i: int) returns (i1);
function $extractvalue.i5(p: ref, i: int) returns (i5);
function $extractvalue.i6(p: ref, i: int) returns (i6);
function $extractvalue.i8(p: ref, i: int) returns (i8);
function $extractvalue.i16(p: ref, i: int) returns (i16);
function $extractvalue.i24(p: ref, i: int) returns (i24);
function $extractvalue.i32(p: ref, i: int) returns (i32);
function $extractvalue.i40(p: ref, i: int) returns (i40);
function $extractvalue.i48(p: ref, i: int) returns (i48);
function $extractvalue.i56(p: ref, i: int) returns (i56);
function $extractvalue.i64(p: ref, i: int) returns (i64);
function $extractvalue.i80(p: ref, i: int) returns (i80);
function $extractvalue.i88(p: ref, i: int) returns (i88);
function $extractvalue.i96(p: ref, i: int) returns (i96);
function $extractvalue.i128(p: ref, i: int) returns (i128);
function $extractvalue.i160(p: ref, i: int) returns (i160);
function $extractvalue.i256(p: ref, i: int) returns (i256);
// Pointer arithmetic operations
function {:inline} $add.ref(p1: ref, p2: ref) returns (ref) { $add.i32(p1, p2) }
function {:inline} $sub.ref(p1: ref, p2: ref) returns (ref) { $sub.i32(p1, p2) }
function {:inline} $mul.ref(p1: ref, p2: ref) returns (ref) { $mul.i32(p1, p2) }

// Pointer predicates
function {:inline} $eq.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 == p2) }
function {:inline} $eq.ref(p1: ref, p2: ref) returns (i1) { (if $eq.ref.bool(p1, p2) then 1 else 0) }
function {:inline} $ne.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 != p2) }
function {:inline} $ne.ref(p1: ref, p2: ref) returns (i1) { (if $ne.ref.bool(p1, p2) then 1 else 0) }
function {:inline} $ugt.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 > p2) }
function {:inline} $ugt.ref(p1: ref, p2: ref) returns (i1) { (if $ugt.ref.bool(p1, p2) then 1 else 0) }
function {:inline} $uge.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 >= p2) }
function {:inline} $uge.ref(p1: ref, p2: ref) returns (i1) { (if $uge.ref.bool(p1, p2) then 1 else 0) }
function {:inline} $ult.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 < p2) }
function {:inline} $ult.ref(p1: ref, p2: ref) returns (i1) { (if $ult.ref.bool(p1, p2) then 1 else 0) }
function {:inline} $ule.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 <= p2) }
function {:inline} $ule.ref(p1: ref, p2: ref) returns (i1) { (if $ule.ref.bool(p1, p2) then 1 else 0) }
function {:inline} $sgt.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 > p2) }
function {:inline} $sgt.ref(p1: ref, p2: ref) returns (i1) { (if $sgt.ref.bool(p1, p2) then 1 else 0) }
function {:inline} $sge.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 >= p2) }
function {:inline} $sge.ref(p1: ref, p2: ref) returns (i1) { (if $sge.ref.bool(p1, p2) then 1 else 0) }
function {:inline} $slt.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 < p2) }
function {:inline} $slt.ref(p1: ref, p2: ref) returns (i1) { (if $slt.ref.bool(p1, p2) then 1 else 0) }
function {:inline} $sle.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 <= p2) }
function {:inline} $sle.ref(p1: ref, p2: ref) returns (i1) { (if $sle.ref.bool(p1, p2) then 1 else 0) }

// Pointer load/store operations
function {:inline} $load.ref(M: [ref] ref, p: ref) returns (ref) { M[p] }
function {:inline} $store.ref(M: [ref] ref, p: ref, i: ref) returns ([ref] ref) { M[p := i] }

// Pointer conversion
function {:inline} $bitcast.ref.ref(p: ref) returns (ref) { p }
function $extractvalue.ref(p: ref, i: int) returns (ref);
// Pointer-number conversion
function {:inline} $p2i.ref.i8(p: ref) returns (i8) { $trunc.i32.i8(p) }
function {:inline} $i2p.i8.ref(i: i8) returns (ref) { $zext.i8.i32(i) }
function {:inline} $p2i.ref.i16(p: ref) returns (i16) { $trunc.i32.i16(p) }
function {:inline} $i2p.i16.ref(i: i16) returns (ref) { $zext.i16.i32(i) }
function {:inline} $p2i.ref.i32(p: ref) returns (i32) { p }
function {:inline} $i2p.i32.ref(i: i32) returns (ref) { i }
function {:inline} $p2i.ref.i64(p: ref) returns (i64) { $zext.i32.i64(p) }
function {:inline} $i2p.i64.ref(i: i64) returns (ref) { $trunc.i64.i32(i) }

var $rmode: rmode;// Floating-point arithmetic operations
function {:builtin "fp.abs"} $abs.bvhalf(f: bvhalf) returns (bvhalf);
function {:builtin "fp.abs"} $abs.bvfloat(f: bvfloat) returns (bvfloat);
function {:builtin "fp.abs"} $abs.bvdouble(f: bvdouble) returns (bvdouble);
function {:builtin "fp.abs"} $abs.bvlongdouble(f: bvlongdouble) returns (bvlongdouble);
function {:builtin "fp.roundToIntegral"} $round.bvhalf(rm: rmode, f: bvhalf) returns (bvhalf);
function {:builtin "fp.roundToIntegral"} $round.bvfloat(rm: rmode, f: bvfloat) returns (bvfloat);
function {:builtin "fp.roundToIntegral"} $round.bvdouble(rm: rmode, f: bvdouble) returns (bvdouble);
function {:builtin "fp.roundToIntegral"} $round.bvlongdouble(rm: rmode, f: bvlongdouble) returns (bvlongdouble);
function {:builtin "fp.sqrt"} $sqrt.bvhalf(rm: rmode, f: bvhalf) returns (bvhalf);
function {:builtin "fp.sqrt"} $sqrt.bvfloat(rm: rmode, f: bvfloat) returns (bvfloat);
function {:builtin "fp.sqrt"} $sqrt.bvdouble(rm: rmode, f: bvdouble) returns (bvdouble);
function {:builtin "fp.sqrt"} $sqrt.bvlongdouble(rm: rmode, f: bvlongdouble) returns (bvlongdouble);
function {:builtin "fp.add"} $fadd.bvhalf(rm: rmode, f1: bvhalf, f2: bvhalf) returns (bvhalf);
function {:builtin "fp.add"} $fadd.bvfloat(rm: rmode, f1: bvfloat, f2: bvfloat) returns (bvfloat);
function {:builtin "fp.add"} $fadd.bvdouble(rm: rmode, f1: bvdouble, f2: bvdouble) returns (bvdouble);
function {:builtin "fp.add"} $fadd.bvlongdouble(rm: rmode, f1: bvlongdouble, f2: bvlongdouble) returns (bvlongdouble);
function {:builtin "fp.sub"} $fsub.bvhalf(rm: rmode, f1: bvhalf, f2: bvhalf) returns (bvhalf);
function {:builtin "fp.sub"} $fsub.bvfloat(rm: rmode, f1: bvfloat, f2: bvfloat) returns (bvfloat);
function {:builtin "fp.sub"} $fsub.bvdouble(rm: rmode, f1: bvdouble, f2: bvdouble) returns (bvdouble);
function {:builtin "fp.sub"} $fsub.bvlongdouble(rm: rmode, f1: bvlongdouble, f2: bvlongdouble) returns (bvlongdouble);
function {:builtin "fp.mul"} $fmul.bvhalf(rm: rmode, f1: bvhalf, f2: bvhalf) returns (bvhalf);
function {:builtin "fp.mul"} $fmul.bvfloat(rm: rmode, f1: bvfloat, f2: bvfloat) returns (bvfloat);
function {:builtin "fp.mul"} $fmul.bvdouble(rm: rmode, f1: bvdouble, f2: bvdouble) returns (bvdouble);
function {:builtin "fp.mul"} $fmul.bvlongdouble(rm: rmode, f1: bvlongdouble, f2: bvlongdouble) returns (bvlongdouble);
function {:builtin "fp.div"} $fdiv.bvhalf(rm: rmode, f1: bvhalf, f2: bvhalf) returns (bvhalf);
function {:builtin "fp.div"} $fdiv.bvfloat(rm: rmode, f1: bvfloat, f2: bvfloat) returns (bvfloat);
function {:builtin "fp.div"} $fdiv.bvdouble(rm: rmode, f1: bvdouble, f2: bvdouble) returns (bvdouble);
function {:builtin "fp.div"} $fdiv.bvlongdouble(rm: rmode, f1: bvlongdouble, f2: bvlongdouble) returns (bvlongdouble);
function {:builtin "fp.rem"} $frem.bvhalf(f1: bvhalf, f2: bvhalf) returns (bvhalf);
function {:builtin "fp.rem"} $frem.bvfloat(f1: bvfloat, f2: bvfloat) returns (bvfloat);
function {:builtin "fp.rem"} $frem.bvdouble(f1: bvdouble, f2: bvdouble) returns (bvdouble);
function {:builtin "fp.rem"} $frem.bvlongdouble(f1: bvlongdouble, f2: bvlongdouble) returns (bvlongdouble);
function {:builtin "fp.min"} $min.bvhalf(f1: bvhalf, f2: bvhalf) returns (bvhalf);
function {:builtin "fp.min"} $min.bvfloat(f1: bvfloat, f2: bvfloat) returns (bvfloat);
function {:builtin "fp.min"} $min.bvdouble(f1: bvdouble, f2: bvdouble) returns (bvdouble);
function {:builtin "fp.min"} $min.bvlongdouble(f1: bvlongdouble, f2: bvlongdouble) returns (bvlongdouble);
function {:builtin "fp.max"} $max.bvhalf(f1: bvhalf, f2: bvhalf) returns (bvhalf);
function {:builtin "fp.max"} $max.bvfloat(f1: bvfloat, f2: bvfloat) returns (bvfloat);
function {:builtin "fp.max"} $max.bvdouble(f1: bvdouble, f2: bvdouble) returns (bvdouble);
function {:builtin "fp.max"} $max.bvlongdouble(f1: bvlongdouble, f2: bvlongdouble) returns (bvlongdouble);
function {:builtin "fp.fma"} $fma.bvhalf(rm: rmode, f1: bvhalf, f2: bvhalf, f3: bvhalf) returns (bvhalf);
function {:builtin "fp.fma"} $fma.bvfloat(rm: rmode, f1: bvfloat, f2: bvfloat, f3: bvfloat) returns (bvfloat);
function {:builtin "fp.fma"} $fma.bvdouble(rm: rmode, f1: bvdouble, f2: bvdouble, f3: bvdouble) returns (bvdouble);
function {:builtin "fp.fma"} $fma.bvlongdouble(rm: rmode, f1: bvlongdouble, f2: bvlongdouble, f3: bvlongdouble) returns (bvlongdouble);
function {:builtin "fp.neg"} $fneg.bvhalf(f: bvhalf) returns (bvhalf);
function {:builtin "fp.neg"} $fneg.bvfloat(f: bvfloat) returns (bvfloat);
function {:builtin "fp.neg"} $fneg.bvdouble(f: bvdouble) returns (bvdouble);
function {:builtin "fp.neg"} $fneg.bvlongdouble(f: bvlongdouble) returns (bvlongdouble);
// Floating-point predicates
function {:builtin "fp.isNormal"} $isnormal.bvhalf.bool(f: bvhalf) returns (bool);
function {:builtin "fp.isNormal"} $isnormal.bvfloat.bool(f: bvfloat) returns (bool);
function {:builtin "fp.isNormal"} $isnormal.bvdouble.bool(f: bvdouble) returns (bool);
function {:builtin "fp.isNormal"} $isnormal.bvlongdouble.bool(f: bvlongdouble) returns (bool);
function {:builtin "fp.isSubnormal"} $issubnormal.bvhalf.bool(f: bvhalf) returns (bool);
function {:builtin "fp.isSubnormal"} $issubnormal.bvfloat.bool(f: bvfloat) returns (bool);
function {:builtin "fp.isSubnormal"} $issubnormal.bvdouble.bool(f: bvdouble) returns (bool);
function {:builtin "fp.isSubnormal"} $issubnormal.bvlongdouble.bool(f: bvlongdouble) returns (bool);
function {:builtin "fp.isZero"} $iszero.bvhalf.bool(f: bvhalf) returns (bool);
function {:builtin "fp.isZero"} $iszero.bvfloat.bool(f: bvfloat) returns (bool);
function {:builtin "fp.isZero"} $iszero.bvdouble.bool(f: bvdouble) returns (bool);
function {:builtin "fp.isZero"} $iszero.bvlongdouble.bool(f: bvlongdouble) returns (bool);
function {:builtin "fp.isInfinite"} $isinfinite.bvhalf.bool(f: bvhalf) returns (bool);
function {:builtin "fp.isInfinite"} $isinfinite.bvfloat.bool(f: bvfloat) returns (bool);
function {:builtin "fp.isInfinite"} $isinfinite.bvdouble.bool(f: bvdouble) returns (bool);
function {:builtin "fp.isInfinite"} $isinfinite.bvlongdouble.bool(f: bvlongdouble) returns (bool);
function {:builtin "fp.isNaN"} $isnan.bvhalf.bool(f: bvhalf) returns (bool);
function {:builtin "fp.isNaN"} $isnan.bvfloat.bool(f: bvfloat) returns (bool);
function {:builtin "fp.isNaN"} $isnan.bvdouble.bool(f: bvdouble) returns (bool);
function {:builtin "fp.isNaN"} $isnan.bvlongdouble.bool(f: bvlongdouble) returns (bool);
function {:builtin "fp.isNegative"} $isnegative.bvhalf.bool(f: bvhalf) returns (bool);
function {:builtin "fp.isNegative"} $isnegative.bvfloat.bool(f: bvfloat) returns (bool);
function {:builtin "fp.isNegative"} $isnegative.bvdouble.bool(f: bvdouble) returns (bool);
function {:builtin "fp.isNegative"} $isnegative.bvlongdouble.bool(f: bvlongdouble) returns (bool);
function {:builtin "fp.isPositive"} $ispositive.bvhalf.bool(f: bvhalf) returns (bool);
function {:builtin "fp.isPositive"} $ispositive.bvfloat.bool(f: bvfloat) returns (bool);
function {:builtin "fp.isPositive"} $ispositive.bvdouble.bool(f: bvdouble) returns (bool);
function {:builtin "fp.isPositive"} $ispositive.bvlongdouble.bool(f: bvlongdouble) returns (bool);
function {:builtin "fp.eq"} $foeq.bvhalf.bool(f1: bvhalf, f2: bvhalf) returns (bool);
function {:builtin "fp.eq"} $foeq.bvfloat.bool(f1: bvfloat, f2: bvfloat) returns (bool);
function {:builtin "fp.eq"} $foeq.bvdouble.bool(f1: bvdouble, f2: bvdouble) returns (bool);
function {:builtin "fp.eq"} $foeq.bvlongdouble.bool(f1: bvlongdouble, f2: bvlongdouble) returns (bool);
function {:builtin "fp.leq"} $fole.bvhalf.bool(f1: bvhalf, f2: bvhalf) returns (bool);
function {:builtin "fp.leq"} $fole.bvfloat.bool(f1: bvfloat, f2: bvfloat) returns (bool);
function {:builtin "fp.leq"} $fole.bvdouble.bool(f1: bvdouble, f2: bvdouble) returns (bool);
function {:builtin "fp.leq"} $fole.bvlongdouble.bool(f1: bvlongdouble, f2: bvlongdouble) returns (bool);
function {:builtin "fp.lt"} $folt.bvhalf.bool(f1: bvhalf, f2: bvhalf) returns (bool);
function {:builtin "fp.lt"} $folt.bvfloat.bool(f1: bvfloat, f2: bvfloat) returns (bool);
function {:builtin "fp.lt"} $folt.bvdouble.bool(f1: bvdouble, f2: bvdouble) returns (bool);
function {:builtin "fp.lt"} $folt.bvlongdouble.bool(f1: bvlongdouble, f2: bvlongdouble) returns (bool);
function {:builtin "fp.geq"} $foge.bvhalf.bool(f1: bvhalf, f2: bvhalf) returns (bool);
function {:builtin "fp.geq"} $foge.bvfloat.bool(f1: bvfloat, f2: bvfloat) returns (bool);
function {:builtin "fp.geq"} $foge.bvdouble.bool(f1: bvdouble, f2: bvdouble) returns (bool);
function {:builtin "fp.geq"} $foge.bvlongdouble.bool(f1: bvlongdouble, f2: bvlongdouble) returns (bool);
function {:builtin "fp.gt"} $fogt.bvhalf.bool(f1: bvhalf, f2: bvhalf) returns (bool);
function {:builtin "fp.gt"} $fogt.bvfloat.bool(f1: bvfloat, f2: bvfloat) returns (bool);
function {:builtin "fp.gt"} $fogt.bvdouble.bool(f1: bvdouble, f2: bvdouble) returns (bool);
function {:builtin "fp.gt"} $fogt.bvlongdouble.bool(f1: bvlongdouble, f2: bvlongdouble) returns (bool);
function {:inline} $fone.bvhalf.bool(f1: bvhalf, f2: bvhalf) returns (bool) { !($fueq.bvhalf.bool(f1, f2)) }
function {:inline} $fone.bvfloat.bool(f1: bvfloat, f2: bvfloat) returns (bool) { !($fueq.bvfloat.bool(f1, f2)) }
function {:inline} $fone.bvdouble.bool(f1: bvdouble, f2: bvdouble) returns (bool) { !($fueq.bvdouble.bool(f1, f2)) }
function {:inline} $fone.bvlongdouble.bool(f1: bvlongdouble, f2: bvlongdouble) returns (bool) { !($fueq.bvlongdouble.bool(f1, f2)) }
function {:inline} $ford.bvhalf.bool(f1: bvhalf, f2: bvhalf) returns (bool) { !($funo.bvhalf.bool(f1, f2)) }
function {:inline} $ford.bvfloat.bool(f1: bvfloat, f2: bvfloat) returns (bool) { !($funo.bvfloat.bool(f1, f2)) }
function {:inline} $ford.bvdouble.bool(f1: bvdouble, f2: bvdouble) returns (bool) { !($funo.bvdouble.bool(f1, f2)) }
function {:inline} $ford.bvlongdouble.bool(f1: bvlongdouble, f2: bvlongdouble) returns (bool) { !($funo.bvlongdouble.bool(f1, f2)) }
function {:inline} $fueq.bvhalf.bool(f1: bvhalf, f2: bvhalf) returns (bool) { (($isnan.bvhalf.bool(f1) || $isnan.bvhalf.bool(f2)) || $foeq.bvhalf.bool(f1, f2)) }
function {:inline} $fueq.bvfloat.bool(f1: bvfloat, f2: bvfloat) returns (bool) { (($isnan.bvfloat.bool(f1) || $isnan.bvfloat.bool(f2)) || $foeq.bvfloat.bool(f1, f2)) }
function {:inline} $fueq.bvdouble.bool(f1: bvdouble, f2: bvdouble) returns (bool) { (($isnan.bvdouble.bool(f1) || $isnan.bvdouble.bool(f2)) || $foeq.bvdouble.bool(f1, f2)) }
function {:inline} $fueq.bvlongdouble.bool(f1: bvlongdouble, f2: bvlongdouble) returns (bool) { (($isnan.bvlongdouble.bool(f1) || $isnan.bvlongdouble.bool(f2)) || $foeq.bvlongdouble.bool(f1, f2)) }
function {:inline} $fugt.bvhalf.bool(f1: bvhalf, f2: bvhalf) returns (bool) { (($isnan.bvhalf.bool(f1) || $isnan.bvhalf.bool(f2)) || $fogt.bvhalf.bool(f1, f2)) }
function {:inline} $fugt.bvfloat.bool(f1: bvfloat, f2: bvfloat) returns (bool) { (($isnan.bvfloat.bool(f1) || $isnan.bvfloat.bool(f2)) || $fogt.bvfloat.bool(f1, f2)) }
function {:inline} $fugt.bvdouble.bool(f1: bvdouble, f2: bvdouble) returns (bool) { (($isnan.bvdouble.bool(f1) || $isnan.bvdouble.bool(f2)) || $fogt.bvdouble.bool(f1, f2)) }
function {:inline} $fugt.bvlongdouble.bool(f1: bvlongdouble, f2: bvlongdouble) returns (bool) { (($isnan.bvlongdouble.bool(f1) || $isnan.bvlongdouble.bool(f2)) || $fogt.bvlongdouble.bool(f1, f2)) }
function {:inline} $fuge.bvhalf.bool(f1: bvhalf, f2: bvhalf) returns (bool) { (($isnan.bvhalf.bool(f1) || $isnan.bvhalf.bool(f2)) || $foge.bvhalf.bool(f1, f2)) }
function {:inline} $fuge.bvfloat.bool(f1: bvfloat, f2: bvfloat) returns (bool) { (($isnan.bvfloat.bool(f1) || $isnan.bvfloat.bool(f2)) || $foge.bvfloat.bool(f1, f2)) }
function {:inline} $fuge.bvdouble.bool(f1: bvdouble, f2: bvdouble) returns (bool) { (($isnan.bvdouble.bool(f1) || $isnan.bvdouble.bool(f2)) || $foge.bvdouble.bool(f1, f2)) }
function {:inline} $fuge.bvlongdouble.bool(f1: bvlongdouble, f2: bvlongdouble) returns (bool) { (($isnan.bvlongdouble.bool(f1) || $isnan.bvlongdouble.bool(f2)) || $foge.bvlongdouble.bool(f1, f2)) }
function {:inline} $fult.bvhalf.bool(f1: bvhalf, f2: bvhalf) returns (bool) { (($isnan.bvhalf.bool(f1) || $isnan.bvhalf.bool(f2)) || $folt.bvhalf.bool(f1, f2)) }
function {:inline} $fult.bvfloat.bool(f1: bvfloat, f2: bvfloat) returns (bool) { (($isnan.bvfloat.bool(f1) || $isnan.bvfloat.bool(f2)) || $folt.bvfloat.bool(f1, f2)) }
function {:inline} $fult.bvdouble.bool(f1: bvdouble, f2: bvdouble) returns (bool) { (($isnan.bvdouble.bool(f1) || $isnan.bvdouble.bool(f2)) || $folt.bvdouble.bool(f1, f2)) }
function {:inline} $fult.bvlongdouble.bool(f1: bvlongdouble, f2: bvlongdouble) returns (bool) { (($isnan.bvlongdouble.bool(f1) || $isnan.bvlongdouble.bool(f2)) || $folt.bvlongdouble.bool(f1, f2)) }
function {:inline} $fule.bvhalf.bool(f1: bvhalf, f2: bvhalf) returns (bool) { (($isnan.bvhalf.bool(f1) || $isnan.bvhalf.bool(f2)) || $fole.bvhalf.bool(f1, f2)) }
function {:inline} $fule.bvfloat.bool(f1: bvfloat, f2: bvfloat) returns (bool) { (($isnan.bvfloat.bool(f1) || $isnan.bvfloat.bool(f2)) || $fole.bvfloat.bool(f1, f2)) }
function {:inline} $fule.bvdouble.bool(f1: bvdouble, f2: bvdouble) returns (bool) { (($isnan.bvdouble.bool(f1) || $isnan.bvdouble.bool(f2)) || $fole.bvdouble.bool(f1, f2)) }
function {:inline} $fule.bvlongdouble.bool(f1: bvlongdouble, f2: bvlongdouble) returns (bool) { (($isnan.bvlongdouble.bool(f1) || $isnan.bvlongdouble.bool(f2)) || $fole.bvlongdouble.bool(f1, f2)) }
function {:inline} $fune.bvhalf.bool(f1: bvhalf, f2: bvhalf) returns (bool) { (($isnan.bvhalf.bool(f1) || $isnan.bvhalf.bool(f2)) || $fone.bvhalf.bool(f1, f2)) }
function {:inline} $fune.bvfloat.bool(f1: bvfloat, f2: bvfloat) returns (bool) { (($isnan.bvfloat.bool(f1) || $isnan.bvfloat.bool(f2)) || $fone.bvfloat.bool(f1, f2)) }
function {:inline} $fune.bvdouble.bool(f1: bvdouble, f2: bvdouble) returns (bool) { (($isnan.bvdouble.bool(f1) || $isnan.bvdouble.bool(f2)) || $fone.bvdouble.bool(f1, f2)) }
function {:inline} $fune.bvlongdouble.bool(f1: bvlongdouble, f2: bvlongdouble) returns (bool) { (($isnan.bvlongdouble.bool(f1) || $isnan.bvlongdouble.bool(f2)) || $fone.bvlongdouble.bool(f1, f2)) }
function {:inline} $funo.bvhalf.bool(f1: bvhalf, f2: bvhalf) returns (bool) { ($isnan.bvhalf.bool(f1) || $isnan.bvhalf.bool(f2)) }
function {:inline} $funo.bvfloat.bool(f1: bvfloat, f2: bvfloat) returns (bool) { ($isnan.bvfloat.bool(f1) || $isnan.bvfloat.bool(f2)) }
function {:inline} $funo.bvdouble.bool(f1: bvdouble, f2: bvdouble) returns (bool) { ($isnan.bvdouble.bool(f1) || $isnan.bvdouble.bool(f2)) }
function {:inline} $funo.bvlongdouble.bool(f1: bvlongdouble, f2: bvlongdouble) returns (bool) { ($isnan.bvlongdouble.bool(f1) || $isnan.bvlongdouble.bool(f2)) }
function {:inline} $ffalse.bvhalf.bool(f1: bvhalf, f2: bvhalf) returns (bool) { false }
function {:inline} $ffalse.bvfloat.bool(f1: bvfloat, f2: bvfloat) returns (bool) { false }
function {:inline} $ffalse.bvdouble.bool(f1: bvdouble, f2: bvdouble) returns (bool) { false }
function {:inline} $ffalse.bvlongdouble.bool(f1: bvlongdouble, f2: bvlongdouble) returns (bool) { false }
function {:inline} $ftrue.bvhalf.bool(f1: bvhalf, f2: bvhalf) returns (bool) { true }
function {:inline} $ftrue.bvfloat.bool(f1: bvfloat, f2: bvfloat) returns (bool) { true }
function {:inline} $ftrue.bvdouble.bool(f1: bvdouble, f2: bvdouble) returns (bool) { true }
function {:inline} $ftrue.bvlongdouble.bool(f1: bvlongdouble, f2: bvlongdouble) returns (bool) { true }
// Floating-point/integer conversion
function $bitcast.bvhalf.i16(f: bvhalf) returns (i16);
function $bitcast.bvfloat.i32(f: bvfloat) returns (i32);
function $bitcast.bvdouble.i64(f: bvdouble) returns (i64);
function $bitcast.bvlongdouble.i80(f: bvlongdouble) returns (i80);
function $bitcast.i16.bvhalf(i: i16) returns (bvhalf);
function $bitcast.i32.bvfloat(i: i32) returns (bvfloat);
function $bitcast.i64.bvdouble(i: i64) returns (bvdouble);
function $bitcast.i80.bvlongdouble(i: i80) returns (bvlongdouble);
function $fp2si.bvhalf.i1(rm: rmode, f: bvhalf) returns (i1);
function $fp2si.bvhalf.i5(rm: rmode, f: bvhalf) returns (i5);
function $fp2si.bvhalf.i6(rm: rmode, f: bvhalf) returns (i6);
function $fp2si.bvhalf.i8(rm: rmode, f: bvhalf) returns (i8);
function $fp2si.bvhalf.i16(rm: rmode, f: bvhalf) returns (i16);
function $fp2si.bvhalf.i24(rm: rmode, f: bvhalf) returns (i24);
function $fp2si.bvhalf.i32(rm: rmode, f: bvhalf) returns (i32);
function $fp2si.bvhalf.i40(rm: rmode, f: bvhalf) returns (i40);
function $fp2si.bvhalf.i48(rm: rmode, f: bvhalf) returns (i48);
function $fp2si.bvhalf.i56(rm: rmode, f: bvhalf) returns (i56);
function $fp2si.bvhalf.i64(rm: rmode, f: bvhalf) returns (i64);
function $fp2si.bvhalf.i80(rm: rmode, f: bvhalf) returns (i80);
function $fp2si.bvhalf.i88(rm: rmode, f: bvhalf) returns (i88);
function $fp2si.bvhalf.i96(rm: rmode, f: bvhalf) returns (i96);
function $fp2si.bvhalf.i128(rm: rmode, f: bvhalf) returns (i128);
function $fp2si.bvhalf.i160(rm: rmode, f: bvhalf) returns (i160);
function $fp2si.bvhalf.i256(rm: rmode, f: bvhalf) returns (i256);
function $fp2si.bvfloat.i1(rm: rmode, f: bvfloat) returns (i1);
function $fp2si.bvfloat.i5(rm: rmode, f: bvfloat) returns (i5);
function $fp2si.bvfloat.i6(rm: rmode, f: bvfloat) returns (i6);
function $fp2si.bvfloat.i8(rm: rmode, f: bvfloat) returns (i8);
function $fp2si.bvfloat.i16(rm: rmode, f: bvfloat) returns (i16);
function $fp2si.bvfloat.i24(rm: rmode, f: bvfloat) returns (i24);
function $fp2si.bvfloat.i32(rm: rmode, f: bvfloat) returns (i32);
function $fp2si.bvfloat.i40(rm: rmode, f: bvfloat) returns (i40);
function $fp2si.bvfloat.i48(rm: rmode, f: bvfloat) returns (i48);
function $fp2si.bvfloat.i56(rm: rmode, f: bvfloat) returns (i56);
function $fp2si.bvfloat.i64(rm: rmode, f: bvfloat) returns (i64);
function $fp2si.bvfloat.i80(rm: rmode, f: bvfloat) returns (i80);
function $fp2si.bvfloat.i88(rm: rmode, f: bvfloat) returns (i88);
function $fp2si.bvfloat.i96(rm: rmode, f: bvfloat) returns (i96);
function $fp2si.bvfloat.i128(rm: rmode, f: bvfloat) returns (i128);
function $fp2si.bvfloat.i160(rm: rmode, f: bvfloat) returns (i160);
function $fp2si.bvfloat.i256(rm: rmode, f: bvfloat) returns (i256);
function $fp2si.bvdouble.i1(rm: rmode, f: bvdouble) returns (i1);
function $fp2si.bvdouble.i5(rm: rmode, f: bvdouble) returns (i5);
function $fp2si.bvdouble.i6(rm: rmode, f: bvdouble) returns (i6);
function $fp2si.bvdouble.i8(rm: rmode, f: bvdouble) returns (i8);
function $fp2si.bvdouble.i16(rm: rmode, f: bvdouble) returns (i16);
function $fp2si.bvdouble.i24(rm: rmode, f: bvdouble) returns (i24);
function $fp2si.bvdouble.i32(rm: rmode, f: bvdouble) returns (i32);
function $fp2si.bvdouble.i40(rm: rmode, f: bvdouble) returns (i40);
function $fp2si.bvdouble.i48(rm: rmode, f: bvdouble) returns (i48);
function $fp2si.bvdouble.i56(rm: rmode, f: bvdouble) returns (i56);
function $fp2si.bvdouble.i64(rm: rmode, f: bvdouble) returns (i64);
function $fp2si.bvdouble.i80(rm: rmode, f: bvdouble) returns (i80);
function $fp2si.bvdouble.i88(rm: rmode, f: bvdouble) returns (i88);
function $fp2si.bvdouble.i96(rm: rmode, f: bvdouble) returns (i96);
function $fp2si.bvdouble.i128(rm: rmode, f: bvdouble) returns (i128);
function $fp2si.bvdouble.i160(rm: rmode, f: bvdouble) returns (i160);
function $fp2si.bvdouble.i256(rm: rmode, f: bvdouble) returns (i256);
function $fp2si.bvlongdouble.i1(rm: rmode, f: bvlongdouble) returns (i1);
function $fp2si.bvlongdouble.i5(rm: rmode, f: bvlongdouble) returns (i5);
function $fp2si.bvlongdouble.i6(rm: rmode, f: bvlongdouble) returns (i6);
function $fp2si.bvlongdouble.i8(rm: rmode, f: bvlongdouble) returns (i8);
function $fp2si.bvlongdouble.i16(rm: rmode, f: bvlongdouble) returns (i16);
function $fp2si.bvlongdouble.i24(rm: rmode, f: bvlongdouble) returns (i24);
function $fp2si.bvlongdouble.i32(rm: rmode, f: bvlongdouble) returns (i32);
function $fp2si.bvlongdouble.i40(rm: rmode, f: bvlongdouble) returns (i40);
function $fp2si.bvlongdouble.i48(rm: rmode, f: bvlongdouble) returns (i48);
function $fp2si.bvlongdouble.i56(rm: rmode, f: bvlongdouble) returns (i56);
function $fp2si.bvlongdouble.i64(rm: rmode, f: bvlongdouble) returns (i64);
function $fp2si.bvlongdouble.i80(rm: rmode, f: bvlongdouble) returns (i80);
function $fp2si.bvlongdouble.i88(rm: rmode, f: bvlongdouble) returns (i88);
function $fp2si.bvlongdouble.i96(rm: rmode, f: bvlongdouble) returns (i96);
function $fp2si.bvlongdouble.i128(rm: rmode, f: bvlongdouble) returns (i128);
function $fp2si.bvlongdouble.i160(rm: rmode, f: bvlongdouble) returns (i160);
function $fp2si.bvlongdouble.i256(rm: rmode, f: bvlongdouble) returns (i256);
function $fp2ui.bvhalf.i1(rm: rmode, f: bvhalf) returns (i1);
function $fp2ui.bvhalf.i5(rm: rmode, f: bvhalf) returns (i5);
function $fp2ui.bvhalf.i6(rm: rmode, f: bvhalf) returns (i6);
function $fp2ui.bvhalf.i8(rm: rmode, f: bvhalf) returns (i8);
function $fp2ui.bvhalf.i16(rm: rmode, f: bvhalf) returns (i16);
function $fp2ui.bvhalf.i24(rm: rmode, f: bvhalf) returns (i24);
function $fp2ui.bvhalf.i32(rm: rmode, f: bvhalf) returns (i32);
function $fp2ui.bvhalf.i40(rm: rmode, f: bvhalf) returns (i40);
function $fp2ui.bvhalf.i48(rm: rmode, f: bvhalf) returns (i48);
function $fp2ui.bvhalf.i56(rm: rmode, f: bvhalf) returns (i56);
function $fp2ui.bvhalf.i64(rm: rmode, f: bvhalf) returns (i64);
function $fp2ui.bvhalf.i80(rm: rmode, f: bvhalf) returns (i80);
function $fp2ui.bvhalf.i88(rm: rmode, f: bvhalf) returns (i88);
function $fp2ui.bvhalf.i96(rm: rmode, f: bvhalf) returns (i96);
function $fp2ui.bvhalf.i128(rm: rmode, f: bvhalf) returns (i128);
function $fp2ui.bvhalf.i160(rm: rmode, f: bvhalf) returns (i160);
function $fp2ui.bvhalf.i256(rm: rmode, f: bvhalf) returns (i256);
function $fp2ui.bvfloat.i1(rm: rmode, f: bvfloat) returns (i1);
function $fp2ui.bvfloat.i5(rm: rmode, f: bvfloat) returns (i5);
function $fp2ui.bvfloat.i6(rm: rmode, f: bvfloat) returns (i6);
function $fp2ui.bvfloat.i8(rm: rmode, f: bvfloat) returns (i8);
function $fp2ui.bvfloat.i16(rm: rmode, f: bvfloat) returns (i16);
function $fp2ui.bvfloat.i24(rm: rmode, f: bvfloat) returns (i24);
function $fp2ui.bvfloat.i32(rm: rmode, f: bvfloat) returns (i32);
function $fp2ui.bvfloat.i40(rm: rmode, f: bvfloat) returns (i40);
function $fp2ui.bvfloat.i48(rm: rmode, f: bvfloat) returns (i48);
function $fp2ui.bvfloat.i56(rm: rmode, f: bvfloat) returns (i56);
function $fp2ui.bvfloat.i64(rm: rmode, f: bvfloat) returns (i64);
function $fp2ui.bvfloat.i80(rm: rmode, f: bvfloat) returns (i80);
function $fp2ui.bvfloat.i88(rm: rmode, f: bvfloat) returns (i88);
function $fp2ui.bvfloat.i96(rm: rmode, f: bvfloat) returns (i96);
function $fp2ui.bvfloat.i128(rm: rmode, f: bvfloat) returns (i128);
function $fp2ui.bvfloat.i160(rm: rmode, f: bvfloat) returns (i160);
function $fp2ui.bvfloat.i256(rm: rmode, f: bvfloat) returns (i256);
function $fp2ui.bvdouble.i1(rm: rmode, f: bvdouble) returns (i1);
function $fp2ui.bvdouble.i5(rm: rmode, f: bvdouble) returns (i5);
function $fp2ui.bvdouble.i6(rm: rmode, f: bvdouble) returns (i6);
function $fp2ui.bvdouble.i8(rm: rmode, f: bvdouble) returns (i8);
function $fp2ui.bvdouble.i16(rm: rmode, f: bvdouble) returns (i16);
function $fp2ui.bvdouble.i24(rm: rmode, f: bvdouble) returns (i24);
function $fp2ui.bvdouble.i32(rm: rmode, f: bvdouble) returns (i32);
function $fp2ui.bvdouble.i40(rm: rmode, f: bvdouble) returns (i40);
function $fp2ui.bvdouble.i48(rm: rmode, f: bvdouble) returns (i48);
function $fp2ui.bvdouble.i56(rm: rmode, f: bvdouble) returns (i56);
function $fp2ui.bvdouble.i64(rm: rmode, f: bvdouble) returns (i64);
function $fp2ui.bvdouble.i80(rm: rmode, f: bvdouble) returns (i80);
function $fp2ui.bvdouble.i88(rm: rmode, f: bvdouble) returns (i88);
function $fp2ui.bvdouble.i96(rm: rmode, f: bvdouble) returns (i96);
function $fp2ui.bvdouble.i128(rm: rmode, f: bvdouble) returns (i128);
function $fp2ui.bvdouble.i160(rm: rmode, f: bvdouble) returns (i160);
function $fp2ui.bvdouble.i256(rm: rmode, f: bvdouble) returns (i256);
function $fp2ui.bvlongdouble.i1(rm: rmode, f: bvlongdouble) returns (i1);
function $fp2ui.bvlongdouble.i5(rm: rmode, f: bvlongdouble) returns (i5);
function $fp2ui.bvlongdouble.i6(rm: rmode, f: bvlongdouble) returns (i6);
function $fp2ui.bvlongdouble.i8(rm: rmode, f: bvlongdouble) returns (i8);
function $fp2ui.bvlongdouble.i16(rm: rmode, f: bvlongdouble) returns (i16);
function $fp2ui.bvlongdouble.i24(rm: rmode, f: bvlongdouble) returns (i24);
function $fp2ui.bvlongdouble.i32(rm: rmode, f: bvlongdouble) returns (i32);
function $fp2ui.bvlongdouble.i40(rm: rmode, f: bvlongdouble) returns (i40);
function $fp2ui.bvlongdouble.i48(rm: rmode, f: bvlongdouble) returns (i48);
function $fp2ui.bvlongdouble.i56(rm: rmode, f: bvlongdouble) returns (i56);
function $fp2ui.bvlongdouble.i64(rm: rmode, f: bvlongdouble) returns (i64);
function $fp2ui.bvlongdouble.i80(rm: rmode, f: bvlongdouble) returns (i80);
function $fp2ui.bvlongdouble.i88(rm: rmode, f: bvlongdouble) returns (i88);
function $fp2ui.bvlongdouble.i96(rm: rmode, f: bvlongdouble) returns (i96);
function $fp2ui.bvlongdouble.i128(rm: rmode, f: bvlongdouble) returns (i128);
function $fp2ui.bvlongdouble.i160(rm: rmode, f: bvlongdouble) returns (i160);
function $fp2ui.bvlongdouble.i256(rm: rmode, f: bvlongdouble) returns (i256);
function $si2fp.i1.bvhalf(rm: rmode, i: i1) returns (bvhalf);
function $si2fp.i5.bvhalf(rm: rmode, i: i5) returns (bvhalf);
function $si2fp.i6.bvhalf(rm: rmode, i: i6) returns (bvhalf);
function $si2fp.i8.bvhalf(rm: rmode, i: i8) returns (bvhalf);
function $si2fp.i16.bvhalf(rm: rmode, i: i16) returns (bvhalf);
function $si2fp.i24.bvhalf(rm: rmode, i: i24) returns (bvhalf);
function $si2fp.i32.bvhalf(rm: rmode, i: i32) returns (bvhalf);
function $si2fp.i40.bvhalf(rm: rmode, i: i40) returns (bvhalf);
function $si2fp.i48.bvhalf(rm: rmode, i: i48) returns (bvhalf);
function $si2fp.i56.bvhalf(rm: rmode, i: i56) returns (bvhalf);
function $si2fp.i64.bvhalf(rm: rmode, i: i64) returns (bvhalf);
function $si2fp.i80.bvhalf(rm: rmode, i: i80) returns (bvhalf);
function $si2fp.i88.bvhalf(rm: rmode, i: i88) returns (bvhalf);
function $si2fp.i96.bvhalf(rm: rmode, i: i96) returns (bvhalf);
function $si2fp.i128.bvhalf(rm: rmode, i: i128) returns (bvhalf);
function $si2fp.i160.bvhalf(rm: rmode, i: i160) returns (bvhalf);
function $si2fp.i256.bvhalf(rm: rmode, i: i256) returns (bvhalf);
function $si2fp.i1.bvfloat(rm: rmode, i: i1) returns (bvfloat);
function $si2fp.i5.bvfloat(rm: rmode, i: i5) returns (bvfloat);
function $si2fp.i6.bvfloat(rm: rmode, i: i6) returns (bvfloat);
function $si2fp.i8.bvfloat(rm: rmode, i: i8) returns (bvfloat);
function $si2fp.i16.bvfloat(rm: rmode, i: i16) returns (bvfloat);
function $si2fp.i24.bvfloat(rm: rmode, i: i24) returns (bvfloat);
function $si2fp.i32.bvfloat(rm: rmode, i: i32) returns (bvfloat);
function $si2fp.i40.bvfloat(rm: rmode, i: i40) returns (bvfloat);
function $si2fp.i48.bvfloat(rm: rmode, i: i48) returns (bvfloat);
function $si2fp.i56.bvfloat(rm: rmode, i: i56) returns (bvfloat);
function $si2fp.i64.bvfloat(rm: rmode, i: i64) returns (bvfloat);
function $si2fp.i80.bvfloat(rm: rmode, i: i80) returns (bvfloat);
function $si2fp.i88.bvfloat(rm: rmode, i: i88) returns (bvfloat);
function $si2fp.i96.bvfloat(rm: rmode, i: i96) returns (bvfloat);
function $si2fp.i128.bvfloat(rm: rmode, i: i128) returns (bvfloat);
function $si2fp.i160.bvfloat(rm: rmode, i: i160) returns (bvfloat);
function $si2fp.i256.bvfloat(rm: rmode, i: i256) returns (bvfloat);
function $si2fp.i1.bvdouble(rm: rmode, i: i1) returns (bvdouble);
function $si2fp.i5.bvdouble(rm: rmode, i: i5) returns (bvdouble);
function $si2fp.i6.bvdouble(rm: rmode, i: i6) returns (bvdouble);
function $si2fp.i8.bvdouble(rm: rmode, i: i8) returns (bvdouble);
function $si2fp.i16.bvdouble(rm: rmode, i: i16) returns (bvdouble);
function $si2fp.i24.bvdouble(rm: rmode, i: i24) returns (bvdouble);
function $si2fp.i32.bvdouble(rm: rmode, i: i32) returns (bvdouble);
function $si2fp.i40.bvdouble(rm: rmode, i: i40) returns (bvdouble);
function $si2fp.i48.bvdouble(rm: rmode, i: i48) returns (bvdouble);
function $si2fp.i56.bvdouble(rm: rmode, i: i56) returns (bvdouble);
function $si2fp.i64.bvdouble(rm: rmode, i: i64) returns (bvdouble);
function $si2fp.i80.bvdouble(rm: rmode, i: i80) returns (bvdouble);
function $si2fp.i88.bvdouble(rm: rmode, i: i88) returns (bvdouble);
function $si2fp.i96.bvdouble(rm: rmode, i: i96) returns (bvdouble);
function $si2fp.i128.bvdouble(rm: rmode, i: i128) returns (bvdouble);
function $si2fp.i160.bvdouble(rm: rmode, i: i160) returns (bvdouble);
function $si2fp.i256.bvdouble(rm: rmode, i: i256) returns (bvdouble);
function $si2fp.i1.bvlongdouble(rm: rmode, i: i1) returns (bvlongdouble);
function $si2fp.i5.bvlongdouble(rm: rmode, i: i5) returns (bvlongdouble);
function $si2fp.i6.bvlongdouble(rm: rmode, i: i6) returns (bvlongdouble);
function $si2fp.i8.bvlongdouble(rm: rmode, i: i8) returns (bvlongdouble);
function $si2fp.i16.bvlongdouble(rm: rmode, i: i16) returns (bvlongdouble);
function $si2fp.i24.bvlongdouble(rm: rmode, i: i24) returns (bvlongdouble);
function $si2fp.i32.bvlongdouble(rm: rmode, i: i32) returns (bvlongdouble);
function $si2fp.i40.bvlongdouble(rm: rmode, i: i40) returns (bvlongdouble);
function $si2fp.i48.bvlongdouble(rm: rmode, i: i48) returns (bvlongdouble);
function $si2fp.i56.bvlongdouble(rm: rmode, i: i56) returns (bvlongdouble);
function $si2fp.i64.bvlongdouble(rm: rmode, i: i64) returns (bvlongdouble);
function $si2fp.i80.bvlongdouble(rm: rmode, i: i80) returns (bvlongdouble);
function $si2fp.i88.bvlongdouble(rm: rmode, i: i88) returns (bvlongdouble);
function $si2fp.i96.bvlongdouble(rm: rmode, i: i96) returns (bvlongdouble);
function $si2fp.i128.bvlongdouble(rm: rmode, i: i128) returns (bvlongdouble);
function $si2fp.i160.bvlongdouble(rm: rmode, i: i160) returns (bvlongdouble);
function $si2fp.i256.bvlongdouble(rm: rmode, i: i256) returns (bvlongdouble);
function $ui2fp.i1.bvhalf(rm: rmode, i: i1) returns (bvhalf);
function $ui2fp.i5.bvhalf(rm: rmode, i: i5) returns (bvhalf);
function $ui2fp.i6.bvhalf(rm: rmode, i: i6) returns (bvhalf);
function $ui2fp.i8.bvhalf(rm: rmode, i: i8) returns (bvhalf);
function $ui2fp.i16.bvhalf(rm: rmode, i: i16) returns (bvhalf);
function $ui2fp.i24.bvhalf(rm: rmode, i: i24) returns (bvhalf);
function $ui2fp.i32.bvhalf(rm: rmode, i: i32) returns (bvhalf);
function $ui2fp.i40.bvhalf(rm: rmode, i: i40) returns (bvhalf);
function $ui2fp.i48.bvhalf(rm: rmode, i: i48) returns (bvhalf);
function $ui2fp.i56.bvhalf(rm: rmode, i: i56) returns (bvhalf);
function $ui2fp.i64.bvhalf(rm: rmode, i: i64) returns (bvhalf);
function $ui2fp.i80.bvhalf(rm: rmode, i: i80) returns (bvhalf);
function $ui2fp.i88.bvhalf(rm: rmode, i: i88) returns (bvhalf);
function $ui2fp.i96.bvhalf(rm: rmode, i: i96) returns (bvhalf);
function $ui2fp.i128.bvhalf(rm: rmode, i: i128) returns (bvhalf);
function $ui2fp.i160.bvhalf(rm: rmode, i: i160) returns (bvhalf);
function $ui2fp.i256.bvhalf(rm: rmode, i: i256) returns (bvhalf);
function $ui2fp.i1.bvfloat(rm: rmode, i: i1) returns (bvfloat);
function $ui2fp.i5.bvfloat(rm: rmode, i: i5) returns (bvfloat);
function $ui2fp.i6.bvfloat(rm: rmode, i: i6) returns (bvfloat);
function $ui2fp.i8.bvfloat(rm: rmode, i: i8) returns (bvfloat);
function $ui2fp.i16.bvfloat(rm: rmode, i: i16) returns (bvfloat);
function $ui2fp.i24.bvfloat(rm: rmode, i: i24) returns (bvfloat);
function $ui2fp.i32.bvfloat(rm: rmode, i: i32) returns (bvfloat);
function $ui2fp.i40.bvfloat(rm: rmode, i: i40) returns (bvfloat);
function $ui2fp.i48.bvfloat(rm: rmode, i: i48) returns (bvfloat);
function $ui2fp.i56.bvfloat(rm: rmode, i: i56) returns (bvfloat);
function $ui2fp.i64.bvfloat(rm: rmode, i: i64) returns (bvfloat);
function $ui2fp.i80.bvfloat(rm: rmode, i: i80) returns (bvfloat);
function $ui2fp.i88.bvfloat(rm: rmode, i: i88) returns (bvfloat);
function $ui2fp.i96.bvfloat(rm: rmode, i: i96) returns (bvfloat);
function $ui2fp.i128.bvfloat(rm: rmode, i: i128) returns (bvfloat);
function $ui2fp.i160.bvfloat(rm: rmode, i: i160) returns (bvfloat);
function $ui2fp.i256.bvfloat(rm: rmode, i: i256) returns (bvfloat);
function $ui2fp.i1.bvdouble(rm: rmode, i: i1) returns (bvdouble);
function $ui2fp.i5.bvdouble(rm: rmode, i: i5) returns (bvdouble);
function $ui2fp.i6.bvdouble(rm: rmode, i: i6) returns (bvdouble);
function $ui2fp.i8.bvdouble(rm: rmode, i: i8) returns (bvdouble);
function $ui2fp.i16.bvdouble(rm: rmode, i: i16) returns (bvdouble);
function $ui2fp.i24.bvdouble(rm: rmode, i: i24) returns (bvdouble);
function $ui2fp.i32.bvdouble(rm: rmode, i: i32) returns (bvdouble);
function $ui2fp.i40.bvdouble(rm: rmode, i: i40) returns (bvdouble);
function $ui2fp.i48.bvdouble(rm: rmode, i: i48) returns (bvdouble);
function $ui2fp.i56.bvdouble(rm: rmode, i: i56) returns (bvdouble);
function $ui2fp.i64.bvdouble(rm: rmode, i: i64) returns (bvdouble);
function $ui2fp.i80.bvdouble(rm: rmode, i: i80) returns (bvdouble);
function $ui2fp.i88.bvdouble(rm: rmode, i: i88) returns (bvdouble);
function $ui2fp.i96.bvdouble(rm: rmode, i: i96) returns (bvdouble);
function $ui2fp.i128.bvdouble(rm: rmode, i: i128) returns (bvdouble);
function $ui2fp.i160.bvdouble(rm: rmode, i: i160) returns (bvdouble);
function $ui2fp.i256.bvdouble(rm: rmode, i: i256) returns (bvdouble);
function $ui2fp.i1.bvlongdouble(rm: rmode, i: i1) returns (bvlongdouble);
function $ui2fp.i5.bvlongdouble(rm: rmode, i: i5) returns (bvlongdouble);
function $ui2fp.i6.bvlongdouble(rm: rmode, i: i6) returns (bvlongdouble);
function $ui2fp.i8.bvlongdouble(rm: rmode, i: i8) returns (bvlongdouble);
function $ui2fp.i16.bvlongdouble(rm: rmode, i: i16) returns (bvlongdouble);
function $ui2fp.i24.bvlongdouble(rm: rmode, i: i24) returns (bvlongdouble);
function $ui2fp.i32.bvlongdouble(rm: rmode, i: i32) returns (bvlongdouble);
function $ui2fp.i40.bvlongdouble(rm: rmode, i: i40) returns (bvlongdouble);
function $ui2fp.i48.bvlongdouble(rm: rmode, i: i48) returns (bvlongdouble);
function $ui2fp.i56.bvlongdouble(rm: rmode, i: i56) returns (bvlongdouble);
function $ui2fp.i64.bvlongdouble(rm: rmode, i: i64) returns (bvlongdouble);
function $ui2fp.i80.bvlongdouble(rm: rmode, i: i80) returns (bvlongdouble);
function $ui2fp.i88.bvlongdouble(rm: rmode, i: i88) returns (bvlongdouble);
function $ui2fp.i96.bvlongdouble(rm: rmode, i: i96) returns (bvlongdouble);
function $ui2fp.i128.bvlongdouble(rm: rmode, i: i128) returns (bvlongdouble);
function $ui2fp.i160.bvlongdouble(rm: rmode, i: i160) returns (bvlongdouble);
function $ui2fp.i256.bvlongdouble(rm: rmode, i: i256) returns (bvlongdouble);
// Floating-point conversion
function {:builtin "(_ to_fp 8 24)"} $fpext.bvhalf.bvfloat(rm: rmode, f: bvhalf) returns (bvfloat);
function {:builtin "(_ to_fp 11 53)"} $fpext.bvhalf.bvdouble(rm: rmode, f: bvhalf) returns (bvdouble);
function {:builtin "(_ to_fp 15 65)"} $fpext.bvhalf.bvlongdouble(rm: rmode, f: bvhalf) returns (bvlongdouble);
function {:builtin "(_ to_fp 5 11)"} $fptrunc.bvfloat.bvhalf(rm: rmode, f: bvfloat) returns (bvhalf);
function {:builtin "(_ to_fp 11 53)"} $fpext.bvfloat.bvdouble(rm: rmode, f: bvfloat) returns (bvdouble);
function {:builtin "(_ to_fp 15 65)"} $fpext.bvfloat.bvlongdouble(rm: rmode, f: bvfloat) returns (bvlongdouble);
function {:builtin "(_ to_fp 5 11)"} $fptrunc.bvdouble.bvhalf(rm: rmode, f: bvdouble) returns (bvhalf);
function {:builtin "(_ to_fp 8 24)"} $fptrunc.bvdouble.bvfloat(rm: rmode, f: bvdouble) returns (bvfloat);
function {:builtin "(_ to_fp 15 65)"} $fpext.bvdouble.bvlongdouble(rm: rmode, f: bvdouble) returns (bvlongdouble);
function {:builtin "(_ to_fp 5 11)"} $fptrunc.bvlongdouble.bvhalf(rm: rmode, f: bvlongdouble) returns (bvhalf);
function {:builtin "(_ to_fp 8 24)"} $fptrunc.bvlongdouble.bvfloat(rm: rmode, f: bvlongdouble) returns (bvfloat);
function {:builtin "(_ to_fp 11 53)"} $fptrunc.bvlongdouble.bvdouble(rm: rmode, f: bvlongdouble) returns (bvdouble);
// Floating-point load/store operations
function {:inline} $load.bvhalf(M: [ref] bvhalf, p: ref) returns (bvhalf) { M[p] }
function {:inline} $store.bvhalf(M: [ref] bvhalf, p: ref, f: bvhalf) returns ([ref] bvhalf) { M[p := f] }
function {:inline} $load.unsafe.bvhalf(M: [ref] i8, p: ref) returns (bvhalf) { $bitcast.i16.bvhalf($load.i16(M, p)) }
function {:inline} $store.unsafe.bvhalf(M: [ref] i8, p: ref, f: bvhalf) returns ([ref] i8) { $store.i16(M, p, $bitcast.bvhalf.i16(f)) }
function {:inline} $load.bvfloat(M: [ref] bvfloat, p: ref) returns (bvfloat) { M[p] }
function {:inline} $store.bvfloat(M: [ref] bvfloat, p: ref, f: bvfloat) returns ([ref] bvfloat) { M[p := f] }
function {:inline} $load.unsafe.bvfloat(M: [ref] i8, p: ref) returns (bvfloat) { $bitcast.i32.bvfloat($load.i32(M, p)) }
function {:inline} $store.unsafe.bvfloat(M: [ref] i8, p: ref, f: bvfloat) returns ([ref] i8) { $store.i32(M, p, $bitcast.bvfloat.i32(f)) }
function {:inline} $load.bvdouble(M: [ref] bvdouble, p: ref) returns (bvdouble) { M[p] }
function {:inline} $store.bvdouble(M: [ref] bvdouble, p: ref, f: bvdouble) returns ([ref] bvdouble) { M[p := f] }
function {:inline} $load.unsafe.bvdouble(M: [ref] i8, p: ref) returns (bvdouble) { $bitcast.i64.bvdouble($load.i64(M, p)) }
function {:inline} $store.unsafe.bvdouble(M: [ref] i8, p: ref, f: bvdouble) returns ([ref] i8) { $store.i64(M, p, $bitcast.bvdouble.i64(f)) }
function {:inline} $load.bvlongdouble(M: [ref] bvlongdouble, p: ref) returns (bvlongdouble) { M[p] }
function {:inline} $store.bvlongdouble(M: [ref] bvlongdouble, p: ref, f: bvlongdouble) returns ([ref] bvlongdouble) { M[p := f] }
function {:inline} $load.unsafe.bvlongdouble(M: [ref] i8, p: ref) returns (bvlongdouble) { $bitcast.i80.bvlongdouble($load.i80(M, p)) }
function {:inline} $store.unsafe.bvlongdouble(M: [ref] i8, p: ref, f: bvlongdouble) returns ([ref] i8) { $store.i80(M, p, $bitcast.bvlongdouble.i80(f)) }
function $extractvalue.bvhalf(p: ref, i: int) returns (bvhalf);
function $extractvalue.bvfloat(p: ref, i: int) returns (bvfloat);
function $extractvalue.bvdouble(p: ref, i: int) returns (bvdouble);
function $extractvalue.bvlongdouble(p: ref, i: int) returns (bvlongdouble);
const result: ref;
axiom (result == $sub.ref(0, 1028));
const .str: ref;
axiom (.str == $sub.ref(0, 2056));
const {:count 10} .str.1: ref;
axiom (.str.1 == $sub.ref(0, 3090));
const {:count 11} .str.2: ref;
axiom (.str.2 == $sub.ref(0, 4125));
const {:count 14} .str.3: ref;
axiom (.str.3 == $sub.ref(0, 5163));
const {:count 5} __func__.main: ref;
axiom (__func__.main == $sub.ref(0, 6192));
const {:count 18} .str.19: ref;
axiom (.str.19 == $sub.ref(0, 7234));
const {:count 75} .str.20: ref;
axiom (.str.20 == $sub.ref(0, 8333));
const {:count 11} __func__._ZZ4mainENK3$_0clEP18emscripten_fetch_t: ref;
axiom (__func__._ZZ4mainENK3$_0clEP18emscripten_fetch_t == $sub.ref(0, 9368));
const {:count 6} .str.4: ref;
axiom (.str.4 == $sub.ref(0, 10398));
const {:count 64} .str.15: ref;
axiom (.str.15 == $sub.ref(0, 11486));
const {:count 32} .str.16: ref;
axiom (.str.16 == $sub.ref(0, 12542));
const {:count 36} .str.17: ref;
axiom (.str.17 == $sub.ref(0, 13602));
const {:count 57} .str.18: ref;
axiom (.str.18 == $sub.ref(0, 14683));
const {:count 11} .str.6: ref;
axiom (.str.6 == $sub.ref(0, 15718));
const {:count 33} .str.7: ref;
axiom (.str.7 == $sub.ref(0, 16775));
const {:count 15} .str.8: ref;
axiom (.str.8 == $sub.ref(0, 17814));
const {:count 41} .str.9: ref;
axiom (.str.9 == $sub.ref(0, 18879));
const {:count 33} .str.5: ref;
axiom (.str.5 == $sub.ref(0, 19936));
const {:count 26} .str.10: ref;
axiom (.str.10 == $sub.ref(0, 20986));
const {:count 37} .str.11: ref;
axiom (.str.11 == $sub.ref(0, 22047));
const {:count 17} .str.12: ref;
axiom (.str.12 == $sub.ref(0, 23088));
const {:count 21} .str.13: ref;
axiom (.str.13 == $sub.ref(0, 24133));
const {:count 17} .str.14: ref;
axiom (.str.14 == $sub.ref(0, 25174));
const {:count 28} .str.24: ref;
axiom (.str.24 == $sub.ref(0, 26226));
const {:count 26} .str.25: ref;
axiom (.str.25 == $sub.ref(0, 27276));
const env_value_str: ref;
axiom (env_value_str == $sub.ref(0, 28304));
const {:count 3} .str.2.42: ref;
axiom (.str.2.42 == $sub.ref(0, 29331));
const {:count 49} .str.43: ref;
axiom (.str.43 == $sub.ref(0, 30404));
const {:count 14} .str.1.44: ref;
axiom (.str.1.44 == $sub.ref(0, 31442));
const errno_global: ref;
axiom (errno_global == $sub.ref(0, 32470));
const {:count 24} .str.45: ref;
axiom (.str.45 == $sub.ref(0, 33518));
const {:count 37} .str.1.46: ref;
axiom (.str.1.46 == $sub.ref(0, 34579));
const {:count 49} .str.16.47: ref;
axiom (.str.16.47 == $sub.ref(0, 35652));
const {:count 31} .str.2.48: ref;
axiom (.str.2.48 == $sub.ref(0, 36707));
const {:count 34} .str.3.49: ref;
axiom (.str.3.49 == $sub.ref(0, 37765));
const {:count 31} .str.4.50: ref;
axiom (.str.4.50 == $sub.ref(0, 38820));
const {:count 31} .str.5.51: ref;
axiom (.str.5.51 == $sub.ref(0, 39875));
const {:count 31} .str.6.52: ref;
axiom (.str.6.52 == $sub.ref(0, 40930));
const {:count 33} .str.7.53: ref;
axiom (.str.7.53 == $sub.ref(0, 41987));
const {:count 29} .str.8.54: ref;
axiom (.str.8.54 == $sub.ref(0, 43040));
const {:count 28} .str.9.55: ref;
axiom (.str.9.55 == $sub.ref(0, 44092));
const {:count 28} .str.10.56: ref;
axiom (.str.10.56 == $sub.ref(0, 45144));
const {:count 37} .str.11.57: ref;
axiom (.str.11.57 == $sub.ref(0, 46205));
const {:count 50} .str.14.58: ref;
axiom (.str.14.58 == $sub.ref(0, 47279));
const {:count 54} .str.15.59: ref;
axiom (.str.15.59 == $sub.ref(0, 48357));
const {:count 52} .str.12.60: ref;
axiom (.str.12.60 == $sub.ref(0, 49433));
const {:count 55} .str.13.61: ref;
axiom (.str.13.61 == $sub.ref(0, 50512));
const {:count 23} .str.17.62: ref;
axiom (.str.17.62 == $sub.ref(0, 51559));
const {:count 35} .str.18.63: ref;
axiom (.str.18.63 == $sub.ref(0, 52618));
const {:count 49} .str.33: ref;
axiom (.str.33 == $sub.ref(0, 53691));
const {:count 30} .str.19.64: ref;
axiom (.str.19.64 == $sub.ref(0, 54745));
const {:count 33} .str.20.65: ref;
axiom (.str.20.65 == $sub.ref(0, 55802));
const {:count 30} .str.21.66: ref;
axiom (.str.21.66 == $sub.ref(0, 56856));
const {:count 30} .str.22.67: ref;
axiom (.str.22.67 == $sub.ref(0, 57910));
const {:count 30} .str.23.68: ref;
axiom (.str.23.68 == $sub.ref(0, 58964));
const {:count 32} .str.24.69: ref;
axiom (.str.24.69 == $sub.ref(0, 60020));
const {:count 27} .str.25.70: ref;
axiom (.str.25.70 == $sub.ref(0, 61071));
const {:count 26} .str.26: ref;
axiom (.str.26 == $sub.ref(0, 62121));
const {:count 26} .str.27: ref;
axiom (.str.27 == $sub.ref(0, 63171));
const {:count 35} .str.28: ref;
axiom (.str.28 == $sub.ref(0, 64230));
const {:count 50} .str.31: ref;
axiom (.str.31 == $sub.ref(0, 65304));
const {:count 54} .str.32: ref;
axiom (.str.32 == $sub.ref(0, 66382));
const {:count 52} .str.29: ref;
axiom (.str.29 == $sub.ref(0, 67458));
const {:count 55} .str.30: ref;
axiom (.str.30 == $sub.ref(0, 68537));
const {:count 27} .str.34: ref;
axiom (.str.34 == $sub.ref(0, 69588));
const {:count 39} .str.35: ref;
axiom (.str.35 == $sub.ref(0, 70651));
const {:count 53} .str.50: ref;
axiom (.str.50 == $sub.ref(0, 71728));
const {:count 34} .str.36: ref;
axiom (.str.36 == $sub.ref(0, 72786));
const {:count 37} .str.37: ref;
axiom (.str.37 == $sub.ref(0, 73847));
const {:count 34} .str.38: ref;
axiom (.str.38 == $sub.ref(0, 74905));
const {:count 34} .str.39: ref;
axiom (.str.39 == $sub.ref(0, 75963));
const {:count 34} .str.40: ref;
axiom (.str.40 == $sub.ref(0, 77021));
const {:count 36} .str.41: ref;
axiom (.str.41 == $sub.ref(0, 78081));
const {:count 31} .str.42: ref;
axiom (.str.42 == $sub.ref(0, 79136));
const {:count 30} .str.43.71: ref;
axiom (.str.43.71 == $sub.ref(0, 80190));
const {:count 30} .str.44: ref;
axiom (.str.44 == $sub.ref(0, 81244));
const {:count 39} .str.45.72: ref;
axiom (.str.45.72 == $sub.ref(0, 82307));
const {:count 54} .str.48: ref;
axiom (.str.48 == $sub.ref(0, 83385));
const {:count 58} .str.49: ref;
axiom (.str.49 == $sub.ref(0, 84467));
const {:count 56} .str.46: ref;
axiom (.str.46 == $sub.ref(0, 85547));
const {:count 59} .str.47: ref;
axiom (.str.47 == $sub.ref(0, 86630));
const {:count 29} .str.73: ref;
axiom (.str.73 == $sub.ref(0, 87683));
const {:count 29} .str.1.74: ref;
axiom (.str.1.74 == $sub.ref(0, 88736));
const {:count 29} .str.2.75: ref;
axiom (.str.2.75 == $sub.ref(0, 89789));
const {:count 29} .str.3.76: ref;
axiom (.str.3.76 == $sub.ref(0, 90842));
const {:count 15} .str.4.77: ref;
axiom (.str.4.77 == $sub.ref(0, 91881));
const {:count 15} .str.5.78: ref;
axiom (.str.5.78 == $sub.ref(0, 92920));
const {:count 15} .str.6.79: ref;
axiom (.str.6.79 == $sub.ref(0, 93959));
const {:count 15} .str.7.80: ref;
axiom (.str.7.80 == $sub.ref(0, 94998));
const _ZTISt9bad_alloc: ref;
axiom (_ZTISt9bad_alloc == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32772)));
const main: ref;
axiom (main == $sub.ref(0, 96026));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
$bb0:
  call $initialize();
  assume {:sourceloc "to_memory.cpp", 21, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  assume {:verifier.code 0} true;
  call $p0 := $alloc($mul.ref(92, 1));
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(1, 1));
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(1, 1));
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(1, 1));
  assume true;
  assume {:sourceloc "to_memory.cpp", 21, 3} true;
  assume {:verifier.code 0} true;
  call emscripten_fetch_attr_init($p0);
  assume {:sourceloc "to_memory.cpp", 22, 15} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($add.ref($p0, $mul.ref(0, 92)), $mul.ref(0, 1));
  $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 92)), $mul.ref(0, 1)), $mul.ref(0, 1));
  assume {:sourceloc "to_memory.cpp", 22, 3} true;
  assume {:verifier.code 0} true;
  call $p6 := _Z6strcpyPcPKc($p5, .str);
  assume $isExternal($p6);
  assume {:sourceloc "to_memory.cpp", 23, 8} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($add.ref($p0, $mul.ref(0, 92)), $mul.ref(32, 1));
  $p8 := $bitcast.ref.ref($p7);
  $p9 := $bitcast.ref.ref($i2p.i64.ref(4));
  call __SMACK_check_memory_safety($p8, $p9);
  assume {:sourceloc "to_memory.cpp", 23, 17} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p7, $i2p.i32.ref(305419896));
  assume {:sourceloc "to_memory.cpp", 24, 8} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($add.ref($p0, $mul.ref(0, 92)), $mul.ref(52, 1));
  $p11 := $bitcast.ref.ref($p10);
  $p12 := $bitcast.ref.ref($i2p.i64.ref(4));
  call __SMACK_check_memory_safety($p11, $p12);
  assume {:sourceloc "to_memory.cpp", 24, 19} true;
  assume {:verifier.code 0} true;
  $M.2 := $store.i32($M.2, $p10, 17);
  assume {:sourceloc "to_memory.cpp", 26, 20} true;
  assume {:verifier.code 0} true;
  call $p13 := _ZZ4mainENK3$_0cvPFvP18emscripten_fetch_tEEv($p1);
  assume {:sourceloc "to_memory.cpp", 26, 8} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($add.ref($p0, $mul.ref(0, 92)), $mul.ref(36, 1));
  $p15 := $bitcast.ref.ref($p14);
  $p16 := $bitcast.ref.ref($i2p.i64.ref(4));
  call __SMACK_check_memory_safety($p15, $p16);
  assume {:sourceloc "to_memory.cpp", 26, 18} true;
  assume {:verifier.code 0} true;
  $M.3 := $store.ref($M.3, $p14, $p13);
  assume {:sourceloc "to_memory.cpp", 56, 21} true;
  assume {:verifier.code 0} true;
  call $p17 := _ZZ4mainENK3$_1cvPFvP18emscripten_fetch_tEEv($p2);
  assume {:sourceloc "to_memory.cpp", 56, 8} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($add.ref($p0, $mul.ref(0, 92)), $mul.ref(44, 1));
  $p19 := $bitcast.ref.ref($p18);
  $p20 := $bitcast.ref.ref($i2p.i64.ref(4));
  call __SMACK_check_memory_safety($p19, $p20);
  assume {:sourceloc "to_memory.cpp", 56, 19} true;
  assume {:verifier.code 0} true;
  $M.4 := $store.ref($M.4, $p18, $p17);
  assume {:sourceloc "to_memory.cpp", 77, 18} true;
  assume {:verifier.code 0} true;
  call $p21 := _ZZ4mainENK3$_2cvPFvP18emscripten_fetch_tEEv($p3);
  assume {:sourceloc "to_memory.cpp", 77, 8} true;
  assume {:verifier.code 0} true;
  $p22 := $add.ref($add.ref($p0, $mul.ref(0, 92)), $mul.ref(40, 1));
  $p23 := $bitcast.ref.ref($p22);
  $p24 := $bitcast.ref.ref($i2p.i64.ref(4));
  call __SMACK_check_memory_safety($p23, $p24);
  assume {:sourceloc "to_memory.cpp", 77, 16} true;
  assume {:verifier.code 0} true;
  $M.5 := $store.ref($M.5, $p22, $p21);
  assume {:sourceloc "to_memory.cpp", 96, 31} true;
  assume {:verifier.code 0} true;
  call $p25 := emscripten_fetch($p0, .str.1);
  assume $isExternal($p25);
  assume {:sourceloc "to_memory.cpp", 97, 3} true;
  assume {:verifier.code 0} true;
  $i26 := $ne.ref($p25, $0.ref);
  assume {:sourceloc "to_memory.cpp", 97, 3} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i26} true;
  goto $bb1, $bb3;
$bb1:
  assume {:sourceloc "to_memory.cpp", 97, 3} true;
  assume {:verifier.code 0} true;
  assume ($i26 == 1);
  goto $bb2;
$bb2:
  assume {:sourceloc "to_memory.cpp", 98, 10} true;
  assume {:verifier.code 0} true;
  $p27 := $bitcast.ref.ref($p0);
  assume {:sourceloc "to_memory.cpp", 98, 3} true;
  assume {:verifier.code 0} true;
  call $p28 := _Z6memsetPvim($p27, 0, 92);
  assume $isExternal($p28);
  call __SMACK_check_memory_leak();
  assume {:sourceloc "to_memory.cpp", 99, 1} true;
  assume {:verifier.code 0} true;
  $r := 0;
  $exn := false;
  return;
$bb3:
  assume !(($i26 == 1));
  assume {:sourceloc "to_memory.cpp", 97, 3} true;
  assume {:verifier.code 0} true;
  call __assert_fail(.str.2, .str.3, 97, __func__.main);
  assume {:sourceloc "to_memory.cpp", 97, 3} true;
  assume {:verifier.code 0} true;
  assume false;
$bb4:
  assume {:sourceloc "to_memory.cpp", 97, 3} true;
  assume {:verifier.code 0} true;
  goto $bb2;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 97054));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const emscripten_fetch_attr_init: ref;
axiom (emscripten_fetch_attr_init == $sub.ref(0, 98082));
procedure  emscripten_fetch_attr_init($p0: ref);
const _Z6strcpyPcPKc: ref;
axiom (_Z6strcpyPcPKc == $sub.ref(0, 99110));
procedure  _Z6strcpyPcPKc($p0: ref, $p1: ref)
  returns ($r: ref);
const _ZZ4mainENK3$_0cvPFvP18emscripten_fetch_tEEv: ref;
axiom (_ZZ4mainENK3$_0cvPFvP18emscripten_fetch_tEEv == $sub.ref(0, 100138));
procedure  _ZZ4mainENK3$_0cvPFvP18emscripten_fetch_tEEv($p0: ref)
  returns ($r: ref)
{
$bb0:
  assume {:sourceloc "to_memory.cpp", 26, 20} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "to_memory.cpp", 26, 20} true;
  assume {:verifier.code 0} true;
  $r := _ZZ4mainEN3$_08__invokeEP18emscripten_fetch_t;
  $exn := false;
  return;
}
const _ZZ4mainENK3$_1cvPFvP18emscripten_fetch_tEEv: ref;
axiom (_ZZ4mainENK3$_1cvPFvP18emscripten_fetch_tEEv == $sub.ref(0, 101166));
procedure  _ZZ4mainENK3$_1cvPFvP18emscripten_fetch_tEEv($p0: ref)
  returns ($r: ref)
{
$bb0:
  assume {:sourceloc "to_memory.cpp", 56, 21} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "to_memory.cpp", 56, 21} true;
  assume {:verifier.code 0} true;
  $r := _ZZ4mainEN3$_18__invokeEP18emscripten_fetch_t;
  $exn := false;
  return;
}
const _ZZ4mainENK3$_2cvPFvP18emscripten_fetch_tEEv: ref;
axiom (_ZZ4mainENK3$_2cvPFvP18emscripten_fetch_tEEv == $sub.ref(0, 102194));
procedure  _ZZ4mainENK3$_2cvPFvP18emscripten_fetch_tEEv($p0: ref)
  returns ($r: ref)
{
$bb0:
  assume {:sourceloc "to_memory.cpp", 77, 18} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "to_memory.cpp", 77, 18} true;
  assume {:verifier.code 0} true;
  $r := _ZZ4mainEN3$_28__invokeEP18emscripten_fetch_t;
  $exn := false;
  return;
}
const emscripten_fetch: ref;
axiom (emscripten_fetch == $sub.ref(0, 103222));
procedure  emscripten_fetch($p0: ref, $p1: ref)
  returns ($r: ref);
const __assert_fail: ref;
axiom (__assert_fail == $sub.ref(0, 104250));
procedure  __assert_fail($p0: ref, $p1: ref, $i2: i32, $p3: ref);
const _Z6memsetPvim: ref;
axiom (_Z6memsetPvim == $sub.ref(0, 105278));
procedure  _Z6memsetPvim($p0: ref, $i1: i32, $i2: i32)
  returns ($r: ref);
const _ZZ4mainEN3$_28__invokeEP18emscripten_fetch_t: ref;
axiom (_ZZ4mainEN3$_28__invokeEP18emscripten_fetch_t == $sub.ref(0, 106306));
procedure  _ZZ4mainEN3$_28__invokeEP18emscripten_fetch_t($p0: ref)
{
$bb0:
  assume {:sourceloc "to_memory.cpp", 77, 18} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "to_memory.cpp", 77, 18} true;
  assume {:verifier.code 0} true;
  call _ZZ4mainENK3$_2clEP18emscripten_fetch_t($u0, $p0);
  assume {:sourceloc "to_memory.cpp", 77, 18} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const _ZZ4mainENK3$_2clEP18emscripten_fetch_t: ref;
axiom (_ZZ4mainENK3$_2clEP18emscripten_fetch_t == $sub.ref(0, 107334));
procedure  _ZZ4mainENK3$_2clEP18emscripten_fetch_t($p0: ref, $p1: ref)
{
  var $i2: i32;
$bb0:
  assume {:sourceloc "to_memory.cpp", 78, 5} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "to_memory.cpp", 78, 5} true;
  assume {:verifier.code 0} true;
  call $i2 := printf.ref(.str.19);
  assume {:sourceloc "to_memory.cpp", 80, 5} true;
  assume {:verifier.code 0} true;
  call __assert_fail(.str.20, .str.3, 80, __func__._ZZ4mainENK3$_0clEP18emscripten_fetch_t);
  assume {:sourceloc "to_memory.cpp", 80, 5} true;
  assume {:verifier.code 0} true;
  assume false;
}
const printf: ref;
axiom (printf == $sub.ref(0, 108362));
procedure  printf.ref.i32($p0: ref, p.1: i32)
  returns ($r: i32);
procedure  printf.ref.i64($p0: ref, p.1: i64)
  returns ($r: i32);
procedure  printf.ref.bvdouble($p0: ref, p.1: bvdouble)
  returns ($r: i32);
procedure  printf.ref.i64.i64.i64($p0: ref, p.1: i64, p.2: i64, p.3: i64)
  returns ($r: i32);
procedure  printf.ref($p0: ref)
  returns ($r: i32);
const _ZZ4mainEN3$_18__invokeEP18emscripten_fetch_t: ref;
axiom (_ZZ4mainEN3$_18__invokeEP18emscripten_fetch_t == $sub.ref(0, 109390));
procedure  _ZZ4mainEN3$_18__invokeEP18emscripten_fetch_t($p0: ref)
{
$bb0:
  assume {:sourceloc "to_memory.cpp", 56, 21} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "to_memory.cpp", 56, 21} true;
  assume {:verifier.code 0} true;
  call _ZZ4mainENK3$_1clEP18emscripten_fetch_t($u0, $p0);
  assume {:sourceloc "to_memory.cpp", 56, 21} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const _ZZ4mainENK3$_1clEP18emscripten_fetch_t: ref;
axiom (_ZZ4mainENK3$_1clEP18emscripten_fetch_t == $sub.ref(0, 110418));
procedure  _ZZ4mainENK3$_1clEP18emscripten_fetch_t($p0: ref, $p1: ref)
{
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i64;
  var $f36: bvdouble;
  var $f37: bvdouble;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $f42: bvdouble;
  var $f43: bvdouble;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i64;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i64;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $i72: i32;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i64;
  var $i83: i64;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i64;
  var $i88: i1;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i1;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: i32;
  var $i99: i1;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i32;
  var $i104: i1;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i32;
  var $i110: i1;
$bb0:
  assume {:sourceloc "to_memory.cpp", 57, 5} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "to_memory.cpp", 57, 5} true;
  assume {:verifier.code 0} true;
  $i2 := $ne.ref($p1, $0.ref);
  assume {:sourceloc "to_memory.cpp", 57, 5} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb3;
$bb1:
  assume {:sourceloc "to_memory.cpp", 57, 5} true;
  assume {:verifier.code 0} true;
  assume ($i2 == 1);
  goto $bb2;
$bb2:
  assume {:sourceloc "to_memory.cpp", 58, 16} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(42, 1));
  $p4 := $bitcast.ref.ref($p3);
  $p5 := $bitcast.ref.ref($i2p.i64.ref(2));
  call __SMACK_check_memory_safety($p4, $p5);
  assume {:sourceloc "to_memory.cpp", 58, 16} true;
  assume {:verifier.code 0} true;
  $i6 := $load.i16($M.6, $p3);
  assume {:sourceloc "to_memory.cpp", 58, 9} true;
  assume {:verifier.code 0} true;
  $i7 := $zext.i16.i32($i6);
  assume {:sourceloc "to_memory.cpp", 58, 23} true;
  assume {:verifier.code 0} true;
  $i8 := $ne.i32($i7, 200);
  assume {:sourceloc "to_memory.cpp", 58, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb5, $bb6;
$bb3:
  assume !(($i2 == 1));
  assume {:sourceloc "to_memory.cpp", 57, 5} true;
  assume {:verifier.code 0} true;
  call __assert_fail(.str.4, .str.3, 57, __func__._ZZ4mainENK3$_0clEP18emscripten_fetch_t);
  assume {:sourceloc "to_memory.cpp", 57, 5} true;
  assume {:verifier.code 0} true;
  assume false;
$bb4:
  assume {:sourceloc "to_memory.cpp", 57, 5} true;
  assume {:verifier.code 0} true;
  goto $bb2;
$bb5:
  assume ($i8 == 1);
  assume {:sourceloc "to_memory.cpp", 58, 31} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb6:
  assume !(($i8 == 1));
  assume {:sourceloc "to_memory.cpp", 59, 87} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(24, 1));
  $p10 := $bitcast.ref.ref($p9);
  $p11 := $bitcast.ref.ref($i2p.i64.ref(8));
  call __SMACK_check_memory_safety($p10, $p11);
  assume {:sourceloc "to_memory.cpp", 59, 87} true;
  assume {:verifier.code 0} true;
  $i12 := $load.i64($M.7, $p9);
  assume {:sourceloc "to_memory.cpp", 59, 106} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(16, 1));
  $p14 := $bitcast.ref.ref($p13);
  $p15 := $bitcast.ref.ref($i2p.i64.ref(8));
  call __SMACK_check_memory_safety($p14, $p15);
  assume {:sourceloc "to_memory.cpp", 59, 106} true;
  assume {:verifier.code 0} true;
  $i16 := $load.i64($M.8, $p13);
  assume {:sourceloc "to_memory.cpp", 59, 123} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(32, 1));
  $p18 := $bitcast.ref.ref($p17);
  $p19 := $bitcast.ref.ref($i2p.i64.ref(8));
  call __SMACK_check_memory_safety($p18, $p19);
  assume {:sourceloc "to_memory.cpp", 59, 123} true;
  assume {:verifier.code 0} true;
  $i20 := $load.i64($M.9, $p17);
  assume {:sourceloc "to_memory.cpp", 59, 5} true;
  assume {:verifier.code 0} true;
  call $i21 := printf.ref.i64.i64.i64(.str.15, $i12, $i16, $i20);
  assume {:sourceloc "to_memory.cpp", 60, 16} true;
  assume {:verifier.code 0} true;
  $p22 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(32, 1));
  $p23 := $bitcast.ref.ref($p22);
  $p24 := $bitcast.ref.ref($i2p.i64.ref(8));
  call __SMACK_check_memory_safety($p23, $p24);
  assume {:sourceloc "to_memory.cpp", 60, 16} true;
  assume {:verifier.code 0} true;
  $i25 := $load.i64($M.9, $p22);
  assume {:sourceloc "to_memory.cpp", 60, 27} true;
  assume {:verifier.code 0} true;
  $i26 := $ugt.i64($i25, 0);
  assume {:sourceloc "to_memory.cpp", 60, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i26} true;
  goto $bb8, $bb9;
$bb7:
  assume {:sourceloc "to_memory.cpp", 75, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb8:
  assume ($i26 == 1);
  assume {:sourceloc "to_memory.cpp", 61, 58} true;
  assume {:verifier.code 0} true;
  $p27 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(24, 1));
  $p28 := $bitcast.ref.ref($p27);
  $p29 := $bitcast.ref.ref($i2p.i64.ref(8));
  call __SMACK_check_memory_safety($p28, $p29);
  assume {:sourceloc "to_memory.cpp", 61, 58} true;
  assume {:verifier.code 0} true;
  $i30 := $load.i64($M.7, $p27);
  assume {:sourceloc "to_memory.cpp", 61, 78} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(16, 1));
  $p32 := $bitcast.ref.ref($p31);
  $p33 := $bitcast.ref.ref($i2p.i64.ref(8));
  call __SMACK_check_memory_safety($p32, $p33);
  assume {:sourceloc "to_memory.cpp", 61, 78} true;
  assume {:verifier.code 0} true;
  $i34 := $load.i64($M.8, $p31);
  assume {:sourceloc "to_memory.cpp", 61, 69} true;
  assume {:verifier.code 0} true;
  $i35 := $add.i64($i30, $i34);
  assume {:sourceloc "to_memory.cpp", 61, 50} true;
  assume {:verifier.code 0} true;
  $f36 := $ui2fp.i64.bvdouble($rmode, $i35);
  assume {:sourceloc "to_memory.cpp", 61, 88} true;
  assume {:verifier.code 0} true;
  $f37 := $fmul.bvdouble($rmode, $f36, 0x6.4000000000000e1f53e11);
  assume {:sourceloc "to_memory.cpp", 61, 105} true;
  assume {:verifier.code 0} true;
  $p38 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(32, 1));
  $p39 := $bitcast.ref.ref($p38);
  $p40 := $bitcast.ref.ref($i2p.i64.ref(8));
  call __SMACK_check_memory_safety($p39, $p40);
  assume {:sourceloc "to_memory.cpp", 61, 105} true;
  assume {:verifier.code 0} true;
  $i41 := $load.i64($M.9, $p38);
  assume {:sourceloc "to_memory.cpp", 61, 98} true;
  assume {:verifier.code 0} true;
  $f42 := $ui2fp.i64.bvdouble($rmode, $i41);
  assume {:sourceloc "to_memory.cpp", 61, 96} true;
  assume {:verifier.code 0} true;
  $f43 := $fdiv.bvdouble($rmode, $f37, $f42);
  assume {:sourceloc "to_memory.cpp", 61, 7} true;
  assume {:verifier.code 0} true;
  call $i44 := printf.ref.bvdouble(.str.16, $f43);
  assume {:sourceloc "to_memory.cpp", 62, 5} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb9:
  assume !(($i26 == 1));
  assume {:sourceloc "to_memory.cpp", 63, 61} true;
  assume {:verifier.code 0} true;
  $p45 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(24, 1));
  $p46 := $bitcast.ref.ref($p45);
  $p47 := $bitcast.ref.ref($i2p.i64.ref(8));
  call __SMACK_check_memory_safety($p46, $p47);
  assume {:sourceloc "to_memory.cpp", 63, 61} true;
  assume {:verifier.code 0} true;
  $i48 := $load.i64($M.7, $p45);
  assume {:sourceloc "to_memory.cpp", 63, 81} true;
  assume {:verifier.code 0} true;
  $p49 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(16, 1));
  $p50 := $bitcast.ref.ref($p49);
  $p51 := $bitcast.ref.ref($i2p.i64.ref(8));
  call __SMACK_check_memory_safety($p50, $p51);
  assume {:sourceloc "to_memory.cpp", 63, 81} true;
  assume {:verifier.code 0} true;
  $i52 := $load.i64($M.8, $p49);
  assume {:sourceloc "to_memory.cpp", 63, 72} true;
  assume {:verifier.code 0} true;
  $i53 := $add.i64($i48, $i52);
  assume {:sourceloc "to_memory.cpp", 63, 7} true;
  assume {:verifier.code 0} true;
  call $i54 := printf.ref.i64(.str.17, $i53);
  assume {:verifier.code 0} true;
  goto $bb10;
$bb10:
  assume {:sourceloc "to_memory.cpp", 69, 16} true;
  assume {:verifier.code 0} true;
  $p55 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(24, 1));
  $p56 := $bitcast.ref.ref($p55);
  $p57 := $bitcast.ref.ref($i2p.i64.ref(8));
  call __SMACK_check_memory_safety($p56, $p57);
  assume {:sourceloc "to_memory.cpp", 69, 16} true;
  assume {:verifier.code 0} true;
  $i58 := $load.i64($M.7, $p55);
  assume {:sourceloc "to_memory.cpp", 69, 36} true;
  assume {:verifier.code 0} true;
  $p59 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(16, 1));
  $p60 := $bitcast.ref.ref($p59);
  $p61 := $bitcast.ref.ref($i2p.i64.ref(8));
  call __SMACK_check_memory_safety($p60, $p61);
  assume {:sourceloc "to_memory.cpp", 69, 36} true;
  assume {:verifier.code 0} true;
  $i62 := $load.i64($M.8, $p59);
  assume {:sourceloc "to_memory.cpp", 69, 27} true;
  assume {:verifier.code 0} true;
  $i63 := $add.i64($i58, $i62);
  assume {:sourceloc "to_memory.cpp", 69, 55} true;
  assume {:verifier.code 0} true;
  $p64 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(32, 1));
  $p65 := $bitcast.ref.ref($p64);
  $p66 := $bitcast.ref.ref($i2p.i64.ref(8));
  call __SMACK_check_memory_safety($p65, $p66);
  assume {:sourceloc "to_memory.cpp", 69, 55} true;
  assume {:verifier.code 0} true;
  $i67 := $load.i64($M.9, $p64);
  assume {:sourceloc "to_memory.cpp", 69, 45} true;
  assume {:verifier.code 0} true;
  $i68 := $eq.i64($i63, $i67);
  assume {:sourceloc "to_memory.cpp", 69, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i68} true;
  goto $bb11, $bb12;
$bb11:
  assume ($i68 == 1);
  $p69 := $bitcast.ref.ref(result);
  $p70 := $bitcast.ref.ref($i2p.i64.ref(4));
  call __SMACK_check_memory_safety($p69, $p70);
  assume {:sourceloc "to_memory.cpp", 69, 67} true;
  assume {:verifier.code 0} true;
  $i71 := $M.10;
  assume {:sourceloc "to_memory.cpp", 69, 67} true;
  assume {:verifier.code 0} true;
  $i72 := $add.i32($i71, 1);
  $p73 := $bitcast.ref.ref(result);
  $p74 := $bitcast.ref.ref($i2p.i64.ref(4));
  call __SMACK_check_memory_safety($p73, $p74);
  assume {:sourceloc "to_memory.cpp", 69, 67} true;
  assume {:verifier.code 0} true;
  $M.10 := $i72;
  call {:cexpr "result"} boogie_si_record_i32($i72);
  assume {:sourceloc "to_memory.cpp", 69, 67} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb12:
  assume {:sourceloc "to_memory.cpp", 69, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i68 == 1));
  goto $bb13;
$bb13:
  assume {:sourceloc "to_memory.cpp", 70, 5} true;
  assume {:verifier.code 0} true;
  $p75 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(24, 1));
  $p76 := $bitcast.ref.ref($p75);
  $p77 := $bitcast.ref.ref($i2p.i64.ref(8));
  call __SMACK_check_memory_safety($p76, $p77);
  assume {:sourceloc "to_memory.cpp", 70, 5} true;
  assume {:verifier.code 0} true;
  $i78 := $load.i64($M.7, $p75);
  assume {:sourceloc "to_memory.cpp", 70, 5} true;
  assume {:verifier.code 0} true;
  $p79 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(16, 1));
  $p80 := $bitcast.ref.ref($p79);
  $p81 := $bitcast.ref.ref($i2p.i64.ref(8));
  call __SMACK_check_memory_safety($p80, $p81);
  assume {:sourceloc "to_memory.cpp", 70, 5} true;
  assume {:verifier.code 0} true;
  $i82 := $load.i64($M.8, $p79);
  assume {:sourceloc "to_memory.cpp", 70, 5} true;
  assume {:verifier.code 0} true;
  $i83 := $add.i64($i78, $i82);
  assume {:sourceloc "to_memory.cpp", 70, 5} true;
  assume {:verifier.code 0} true;
  $p84 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(32, 1));
  $p85 := $bitcast.ref.ref($p84);
  $p86 := $bitcast.ref.ref($i2p.i64.ref(8));
  call __SMACK_check_memory_safety($p85, $p86);
  assume {:sourceloc "to_memory.cpp", 70, 5} true;
  assume {:verifier.code 0} true;
  $i87 := $load.i64($M.9, $p84);
  assume {:sourceloc "to_memory.cpp", 70, 5} true;
  assume {:verifier.code 0} true;
  $i88 := $ule.i64($i83, $i87);
  assume {:sourceloc "to_memory.cpp", 70, 5} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i88} true;
  goto $bb14, $bb16;
$bb14:
  assume {:sourceloc "to_memory.cpp", 70, 5} true;
  assume {:verifier.code 0} true;
  assume ($i88 == 1);
  goto $bb15;
$bb15:
  assume {:sourceloc "to_memory.cpp", 71, 5} true;
  assume {:verifier.code 0} true;
  $p89 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
  $p90 := $bitcast.ref.ref($p89);
  $p91 := $bitcast.ref.ref($i2p.i64.ref(4));
  call __SMACK_check_memory_safety($p90, $p91);
  assume {:sourceloc "to_memory.cpp", 71, 5} true;
  assume {:verifier.code 0} true;
  $p92 := $load.ref($M.11, $p89);
  assume {:sourceloc "to_memory.cpp", 71, 5} true;
  assume {:verifier.code 0} true;
  $i93 := $ne.ref($p92, $0.ref);
  assume {:sourceloc "to_memory.cpp", 71, 5} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i93} true;
  goto $bb18, $bb20;
$bb16:
  assume !(($i88 == 1));
  assume {:sourceloc "to_memory.cpp", 70, 5} true;
  assume {:verifier.code 0} true;
  call __assert_fail(.str.18, .str.3, 70, __func__._ZZ4mainENK3$_0clEP18emscripten_fetch_t);
  assume {:sourceloc "to_memory.cpp", 70, 5} true;
  assume {:verifier.code 0} true;
  assume false;
$bb17:
  assume {:sourceloc "to_memory.cpp", 70, 5} true;
  assume {:verifier.code 0} true;
  goto $bb15;
$bb18:
  assume {:sourceloc "to_memory.cpp", 71, 5} true;
  assume {:verifier.code 0} true;
  assume ($i93 == 1);
  goto $bb19;
$bb19:
  assume {:sourceloc "to_memory.cpp", 72, 5} true;
  assume {:verifier.code 0} true;
  $p94 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
  $p95 := $bitcast.ref.ref($p94);
  $p96 := $bitcast.ref.ref($i2p.i64.ref(4));
  call __SMACK_check_memory_safety($p95, $p96);
  assume {:sourceloc "to_memory.cpp", 72, 5} true;
  assume {:verifier.code 0} true;
  $p97 := $load.ref($M.11, $p94);
  assume {:sourceloc "to_memory.cpp", 72, 5} true;
  assume {:verifier.code 0} true;
  call $i98 := _Z6strcmpPKcS0_($p97, .str.1);
  assume {:sourceloc "to_memory.cpp", 72, 5} true;
  assume {:verifier.code 0} true;
  $i99 := $ne.i32($i98, 0);
  assume {:sourceloc "to_memory.cpp", 72, 5} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i99} true;
  goto $bb22, $bb23;
$bb20:
  assume !(($i93 == 1));
  assume {:sourceloc "to_memory.cpp", 71, 5} true;
  assume {:verifier.code 0} true;
  call __assert_fail(.str.6, .str.3, 71, __func__._ZZ4mainENK3$_0clEP18emscripten_fetch_t);
  assume {:sourceloc "to_memory.cpp", 71, 5} true;
  assume {:verifier.code 0} true;
  assume false;
$bb21:
  assume {:sourceloc "to_memory.cpp", 71, 5} true;
  assume {:verifier.code 0} true;
  goto $bb19;
$bb22:
  assume ($i99 == 1);
  assume {:sourceloc "to_memory.cpp", 72, 5} true;
  assume {:verifier.code 0} true;
  call __assert_fail(.str.7, .str.3, 72, __func__._ZZ4mainENK3$_0clEP18emscripten_fetch_t);
  assume {:sourceloc "to_memory.cpp", 72, 5} true;
  assume {:verifier.code 0} true;
  assume false;
$bb23:
  assume {:sourceloc "to_memory.cpp", 72, 5} true;
  assume {:verifier.code 0} true;
  assume !(($i99 == 1));
  goto $bb24;
$bb24:
  assume {:sourceloc "to_memory.cpp", 73, 5} true;
  assume {:verifier.code 0} true;
  $p100 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(0, 1));
  $p101 := $bitcast.ref.ref($p100);
  $p102 := $bitcast.ref.ref($i2p.i64.ref(4));
  call __SMACK_check_memory_safety($p101, $p102);
  assume {:sourceloc "to_memory.cpp", 73, 5} true;
  assume {:verifier.code 0} true;
  $i103 := $load.i32($M.12, $p100);
  assume {:sourceloc "to_memory.cpp", 73, 5} true;
  assume {:verifier.code 0} true;
  $i104 := $ne.i32($i103, 0);
  assume {:sourceloc "to_memory.cpp", 73, 5} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i104} true;
  goto $bb26, $bb28;
$bb25:
  assume {:sourceloc "to_memory.cpp", 72, 5} true;
  assume {:verifier.code 0} true;
  goto $bb24;
$bb26:
  assume {:sourceloc "to_memory.cpp", 73, 5} true;
  assume {:verifier.code 0} true;
  assume ($i104 == 1);
  goto $bb27;
$bb27:
  assume {:sourceloc "to_memory.cpp", 74, 5} true;
  assume {:verifier.code 0} true;
  $p105 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(4, 1));
  $p106 := $bitcast.ref.ref($p105);
  $p107 := $bitcast.ref.ref($i2p.i64.ref(4));
  call __SMACK_check_memory_safety($p106, $p107);
  assume {:sourceloc "to_memory.cpp", 74, 5} true;
  assume {:verifier.code 0} true;
  $p108 := $load.ref($M.13, $p105);
  assume {:sourceloc "to_memory.cpp", 74, 5} true;
  assume {:verifier.code 0} true;
  $i109 := $p2i.ref.i32($p108);
  assume {:sourceloc "to_memory.cpp", 74, 5} true;
  assume {:verifier.code 0} true;
  $i110 := $eq.i32($i109, 305419896);
  assume {:sourceloc "to_memory.cpp", 74, 5} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i110} true;
  goto $bb30, $bb32;
$bb28:
  assume !(($i104 == 1));
  assume {:sourceloc "to_memory.cpp", 73, 5} true;
  assume {:verifier.code 0} true;
  call __assert_fail(.str.8, .str.3, 73, __func__._ZZ4mainENK3$_0clEP18emscripten_fetch_t);
  assume {:sourceloc "to_memory.cpp", 73, 5} true;
  assume {:verifier.code 0} true;
  assume false;
$bb29:
  assume {:sourceloc "to_memory.cpp", 73, 5} true;
  assume {:verifier.code 0} true;
  goto $bb27;
$bb30:
  assume {:sourceloc "to_memory.cpp", 74, 5} true;
  assume {:verifier.code 0} true;
  assume ($i110 == 1);
  goto $bb31;
$bb31:
  assume {:sourceloc "to_memory.cpp", 75, 3} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb32:
  assume !(($i110 == 1));
  assume {:sourceloc "to_memory.cpp", 74, 5} true;
  assume {:verifier.code 0} true;
  call __assert_fail(.str.9, .str.3, 74, __func__._ZZ4mainENK3$_0clEP18emscripten_fetch_t);
  assume {:sourceloc "to_memory.cpp", 74, 5} true;
  assume {:verifier.code 0} true;
  assume false;
$bb33:
  assume {:sourceloc "to_memory.cpp", 74, 5} true;
  assume {:verifier.code 0} true;
  goto $bb31;
}
const _Z6strcmpPKcS0_: ref;
axiom (_Z6strcmpPKcS0_ == $sub.ref(0, 111446));
procedure  _Z6strcmpPKcS0_($p0: ref, $p1: ref)
  returns ($r: i32);
const _ZZ4mainEN3$_08__invokeEP18emscripten_fetch_t: ref;
axiom (_ZZ4mainEN3$_08__invokeEP18emscripten_fetch_t == $sub.ref(0, 112474));
procedure  _ZZ4mainEN3$_08__invokeEP18emscripten_fetch_t($p0: ref)
{
$bb0:
  assume {:sourceloc "to_memory.cpp", 26, 20} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "to_memory.cpp", 26, 20} true;
  assume {:verifier.code 0} true;
  call _ZZ4mainENK3$_0clEP18emscripten_fetch_t($u0, $p0);
  assume {:sourceloc "to_memory.cpp", 26, 20} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const _ZZ4mainENK3$_0clEP18emscripten_fetch_t: ref;
axiom (_ZZ4mainENK3$_0clEP18emscripten_fetch_t == $sub.ref(0, 113502));
procedure  _ZZ4mainENK3$_0clEP18emscripten_fetch_t($p0: ref, $p1: ref)
{
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i1;
  var $i49: i8;
  var $i50: i32;
  var $i51: i64;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i8;
  var $i65: i32;
  var $i66: i32;
  var $i67: i32;
  var $i68: i8;
  var $i69: i32;
  var $i70: i32;
  var $i71: i32;
  var $i72: i32;
  var $i73: i1;
  var $i74: i32;
$bb0:
  assume {:sourceloc "to_memory.cpp", 30, 5} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "to_memory.cpp", 30, 5} true;
  assume {:verifier.code 0} true;
  $i2 := $ne.ref($p1, $0.ref);
  assume {:sourceloc "to_memory.cpp", 30, 5} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i2} true;
  goto $bb1, $bb3;
$bb1:
  assume {:sourceloc "to_memory.cpp", 30, 5} true;
  assume {:verifier.code 0} true;
  assume ($i2 == 1);
  goto $bb2;
$bb2:
  assume {:sourceloc "to_memory.cpp", 31, 56} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(16, 1));
  $p4 := $bitcast.ref.ref($p3);
  $p5 := $bitcast.ref.ref($i2p.i64.ref(8));
  call __SMACK_check_memory_safety($p4, $p5);
  assume {:sourceloc "to_memory.cpp", 31, 56} true;
  assume {:verifier.code 0} true;
  $i6 := $load.i64($M.14, $p3);
  assume {:sourceloc "to_memory.cpp", 31, 5} true;
  assume {:verifier.code 0} true;
  call $i7 := printf.ref.i64(.str.5, $i6);
  assume {:sourceloc "to_memory.cpp", 32, 5} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
  $p9 := $bitcast.ref.ref($p8);
  $p10 := $bitcast.ref.ref($i2p.i64.ref(4));
  call __SMACK_check_memory_safety($p9, $p10);
  assume {:sourceloc "to_memory.cpp", 32, 5} true;
  assume {:verifier.code 0} true;
  $p11 := $load.ref($M.15, $p8);
  assume {:sourceloc "to_memory.cpp", 32, 5} true;
  assume {:verifier.code 0} true;
  $i12 := $ne.ref($p11, $0.ref);
  assume {:sourceloc "to_memory.cpp", 32, 5} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i12} true;
  goto $bb5, $bb7;
$bb3:
  assume !(($i2 == 1));
  assume {:sourceloc "to_memory.cpp", 30, 5} true;
  assume {:verifier.code 0} true;
  call __assert_fail(.str.4, .str.3, 30, __func__._ZZ4mainENK3$_0clEP18emscripten_fetch_t);
  assume {:sourceloc "to_memory.cpp", 30, 5} true;
  assume {:verifier.code 0} true;
  assume false;
$bb4:
  assume {:sourceloc "to_memory.cpp", 30, 5} true;
  assume {:verifier.code 0} true;
  goto $bb2;
$bb5:
  assume {:sourceloc "to_memory.cpp", 32, 5} true;
  assume {:verifier.code 0} true;
  assume ($i12 == 1);
  goto $bb6;
$bb6:
  assume {:sourceloc "to_memory.cpp", 33, 5} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(8, 1));
  $p14 := $bitcast.ref.ref($p13);
  $p15 := $bitcast.ref.ref($i2p.i64.ref(4));
  call __SMACK_check_memory_safety($p14, $p15);
  assume {:sourceloc "to_memory.cpp", 33, 5} true;
  assume {:verifier.code 0} true;
  $p16 := $load.ref($M.15, $p13);
  assume {:sourceloc "to_memory.cpp", 33, 5} true;
  assume {:verifier.code 0} true;
  call $i17 := _Z6strcmpPKcS0_($p16, .str.1);
  assume {:sourceloc "to_memory.cpp", 33, 5} true;
  assume {:verifier.code 0} true;
  $i18 := $ne.i32($i17, 0);
  assume {:sourceloc "to_memory.cpp", 33, 5} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i18} true;
  goto $bb9, $bb10;
$bb7:
  assume !(($i12 == 1));
  assume {:sourceloc "to_memory.cpp", 32, 5} true;
  assume {:verifier.code 0} true;
  call __assert_fail(.str.6, .str.3, 32, __func__._ZZ4mainENK3$_0clEP18emscripten_fetch_t);
  assume {:sourceloc "to_memory.cpp", 32, 5} true;
  assume {:verifier.code 0} true;
  assume false;
$bb8:
  assume {:sourceloc "to_memory.cpp", 32, 5} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb9:
  assume ($i18 == 1);
  assume {:sourceloc "to_memory.cpp", 33, 5} true;
  assume {:verifier.code 0} true;
  call __assert_fail(.str.7, .str.3, 33, __func__._ZZ4mainENK3$_0clEP18emscripten_fetch_t);
  assume {:sourceloc "to_memory.cpp", 33, 5} true;
  assume {:verifier.code 0} true;
  assume false;
$bb10:
  assume {:sourceloc "to_memory.cpp", 33, 5} true;
  assume {:verifier.code 0} true;
  assume !(($i18 == 1));
  goto $bb11;
$bb11:
  assume {:sourceloc "to_memory.cpp", 34, 5} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(0, 1));
  $p20 := $bitcast.ref.ref($p19);
  $p21 := $bitcast.ref.ref($i2p.i64.ref(4));
  call __SMACK_check_memory_safety($p20, $p21);
  assume {:sourceloc "to_memory.cpp", 34, 5} true;
  assume {:verifier.code 0} true;
  $i22 := $load.i32($M.16, $p19);
  assume {:sourceloc "to_memory.cpp", 34, 5} true;
  assume {:verifier.code 0} true;
  $i23 := $ne.i32($i22, 0);
  assume {:sourceloc "to_memory.cpp", 34, 5} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i23} true;
  goto $bb13, $bb15;
$bb12:
  assume {:sourceloc "to_memory.cpp", 33, 5} true;
  assume {:verifier.code 0} true;
  goto $bb11;
$bb13:
  assume {:sourceloc "to_memory.cpp", 34, 5} true;
  assume {:verifier.code 0} true;
  assume ($i23 == 1);
  goto $bb14;
$bb14:
  assume {:sourceloc "to_memory.cpp", 35, 5} true;
  assume {:verifier.code 0} true;
  $p24 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(4, 1));
  $p25 := $bitcast.ref.ref($p24);
  $p26 := $bitcast.ref.ref($i2p.i64.ref(4));
  call __SMACK_check_memory_safety($p25, $p26);
  assume {:sourceloc "to_memory.cpp", 35, 5} true;
  assume {:verifier.code 0} true;
  $p27 := $load.ref($M.17, $p24);
  assume {:sourceloc "to_memory.cpp", 35, 5} true;
  assume {:verifier.code 0} true;
  $i28 := $p2i.ref.i32($p27);
  assume {:sourceloc "to_memory.cpp", 35, 5} true;
  assume {:verifier.code 0} true;
  $i29 := $eq.i32($i28, 305419896);
  assume {:sourceloc "to_memory.cpp", 35, 5} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i29} true;
  goto $bb17, $bb19;
$bb15:
  assume !(($i23 == 1));
  assume {:sourceloc "to_memory.cpp", 34, 5} true;
  assume {:verifier.code 0} true;
  call __assert_fail(.str.8, .str.3, 34, __func__._ZZ4mainENK3$_0clEP18emscripten_fetch_t);
  assume {:sourceloc "to_memory.cpp", 34, 5} true;
  assume {:verifier.code 0} true;
  assume false;
$bb16:
  assume {:sourceloc "to_memory.cpp", 34, 5} true;
  assume {:verifier.code 0} true;
  goto $bb14;
$bb17:
  assume {:sourceloc "to_memory.cpp", 35, 5} true;
  assume {:verifier.code 0} true;
  assume ($i29 == 1);
  goto $bb18;
$bb18:
  assume {:sourceloc "to_memory.cpp", 36, 5} true;
  assume {:verifier.code 0} true;
  $p30 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(32, 1));
  $p31 := $bitcast.ref.ref($p30);
  $p32 := $bitcast.ref.ref($i2p.i64.ref(8));
  call __SMACK_check_memory_safety($p31, $p32);
  assume {:sourceloc "to_memory.cpp", 36, 5} true;
  assume {:verifier.code 0} true;
  $i33 := $load.i64($M.18, $p30);
  assume {:sourceloc "to_memory.cpp", 36, 5} true;
  assume {:verifier.code 0} true;
  $i34 := $eq.i64($i33, 6407);
  assume {:sourceloc "to_memory.cpp", 36, 5} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i34} true;
  goto $bb21, $bb23;
$bb19:
  assume !(($i29 == 1));
  assume {:sourceloc "to_memory.cpp", 35, 5} true;
  assume {:verifier.code 0} true;
  call __assert_fail(.str.9, .str.3, 35, __func__._ZZ4mainENK3$_0clEP18emscripten_fetch_t);
  assume {:sourceloc "to_memory.cpp", 35, 5} true;
  assume {:verifier.code 0} true;
  assume false;
$bb20:
  assume {:sourceloc "to_memory.cpp", 35, 5} true;
  assume {:verifier.code 0} true;
  goto $bb18;
$bb21:
  assume {:sourceloc "to_memory.cpp", 36, 5} true;
  assume {:verifier.code 0} true;
  assume ($i34 == 1);
  goto $bb22;
$bb22:
  assume {:sourceloc "to_memory.cpp", 37, 5} true;
  assume {:verifier.code 0} true;
  $p35 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(16, 1));
  $p36 := $bitcast.ref.ref($p35);
  $p37 := $bitcast.ref.ref($i2p.i64.ref(8));
  call __SMACK_check_memory_safety($p36, $p37);
  assume {:sourceloc "to_memory.cpp", 37, 5} true;
  assume {:verifier.code 0} true;
  $i38 := $load.i64($M.14, $p35);
  assume {:sourceloc "to_memory.cpp", 37, 5} true;
  assume {:verifier.code 0} true;
  $p39 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(32, 1));
  $p40 := $bitcast.ref.ref($p39);
  $p41 := $bitcast.ref.ref($i2p.i64.ref(8));
  call __SMACK_check_memory_safety($p40, $p41);
  assume {:sourceloc "to_memory.cpp", 37, 5} true;
  assume {:verifier.code 0} true;
  $i42 := $load.i64($M.18, $p39);
  assume {:sourceloc "to_memory.cpp", 37, 5} true;
  assume {:verifier.code 0} true;
  $i43 := $eq.i64($i38, $i42);
  assume {:sourceloc "to_memory.cpp", 37, 5} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i43} true;
  goto $bb25, $bb27;
$bb23:
  assume !(($i34 == 1));
  assume {:sourceloc "to_memory.cpp", 36, 5} true;
  assume {:verifier.code 0} true;
  call __assert_fail(.str.10, .str.3, 36, __func__._ZZ4mainENK3$_0clEP18emscripten_fetch_t);
  assume {:sourceloc "to_memory.cpp", 36, 5} true;
  assume {:verifier.code 0} true;
  assume false;
$bb24:
  assume {:sourceloc "to_memory.cpp", 36, 5} true;
  assume {:verifier.code 0} true;
  goto $bb22;
$bb25:
  assume {:sourceloc "to_memory.cpp", 37, 5} true;
  assume {:verifier.code 0} true;
  assume ($i43 == 1);
  goto $bb26;
$bb26:
  assume {:sourceloc "to_memory.cpp", 38, 5} true;
  assume {:verifier.code 0} true;
  $p44 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(12, 1));
  $p45 := $bitcast.ref.ref($p44);
  $p46 := $bitcast.ref.ref($i2p.i64.ref(4));
  call __SMACK_check_memory_safety($p45, $p46);
  assume {:sourceloc "to_memory.cpp", 38, 5} true;
  assume {:verifier.code 0} true;
  $p47 := $load.ref($M.19, $p44);
  assume {:sourceloc "to_memory.cpp", 38, 5} true;
  assume {:verifier.code 0} true;
  $i48 := $ne.ref($p47, $0.ref);
  assume {:sourceloc "to_memory.cpp", 38, 5} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i48} true;
  goto $bb29, $bb31;
$bb27:
  assume !(($i43 == 1));
  assume {:sourceloc "to_memory.cpp", 37, 5} true;
  assume {:verifier.code 0} true;
  call __assert_fail(.str.11, .str.3, 37, __func__._ZZ4mainENK3$_0clEP18emscripten_fetch_t);
  assume {:sourceloc "to_memory.cpp", 37, 5} true;
  assume {:verifier.code 0} true;
  assume false;
$bb28:
  assume {:sourceloc "to_memory.cpp", 37, 5} true;
  assume {:verifier.code 0} true;
  goto $bb26;
$bb29:
  assume {:sourceloc "to_memory.cpp", 38, 5} true;
  assume {:verifier.code 0} true;
  assume ($i48 == 1);
  goto $bb30;
$bb30:
  assume {:sourceloc "to_memory.cpp", 41, 9} true;
  assume {:verifier.code 0} true;
  $i49, $i50 := 0, 0;
  goto $bb33;
$bb31:
  assume !(($i48 == 1));
  assume {:sourceloc "to_memory.cpp", 38, 5} true;
  assume {:verifier.code 0} true;
  call __assert_fail(.str.12, .str.3, 38, __func__._ZZ4mainENK3$_0clEP18emscripten_fetch_t);
  assume {:sourceloc "to_memory.cpp", 38, 5} true;
  assume {:verifier.code 0} true;
  assume false;
$bb32:
  assume {:sourceloc "to_memory.cpp", 38, 5} true;
  assume {:verifier.code 0} true;
  goto $bb30;
$bb33:
  assume {:sourceloc "to_memory.cpp", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "to_memory.cpp", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "to_memory.cpp", 41, 20} true;
  assume {:verifier.code 0} true;
  $i51 := $sext.i32.i64($i50);
  assume {:sourceloc "to_memory.cpp", 41, 31} true;
  assume {:verifier.code 0} true;
  $p52 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(16, 1));
  $p53 := $bitcast.ref.ref($p52);
  $p54 := $bitcast.ref.ref($i2p.i64.ref(8));
  call __SMACK_check_memory_safety($p53, $p54);
  assume {:sourceloc "to_memory.cpp", 41, 31} true;
  assume {:verifier.code 0} true;
  $i55 := $load.i64($M.14, $p52);
  assume {:sourceloc "to_memory.cpp", 41, 22} true;
  assume {:verifier.code 0} true;
  $i56 := $ult.i64($i51, $i55);
  assume {:sourceloc "to_memory.cpp", 41, 5} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i56} true;
  goto $bb34, $bb35;
$bb34:
  assume ($i56 == 1);
  assume {:sourceloc "to_memory.cpp", 42, 26} true;
  assume {:verifier.code 0} true;
  $p57 := $add.ref($add.ref($p1, $mul.ref(0, 208)), $mul.ref(12, 1));
  $p58 := $bitcast.ref.ref($p57);
  $p59 := $bitcast.ref.ref($i2p.i64.ref(4));
  call __SMACK_check_memory_safety($p58, $p59);
  assume {:sourceloc "to_memory.cpp", 42, 26} true;
  assume {:verifier.code 0} true;
  $p60 := $load.ref($M.19, $p57);
  assume {:sourceloc "to_memory.cpp", 42, 19} true;
  assume {:verifier.code 0} true;
  $p61 := $add.ref($p60, $mul.ref($i50, 1));
  $p62 := $bitcast.ref.ref($p61);
  $p63 := $bitcast.ref.ref($i2p.i64.ref(1));
  call __SMACK_check_memory_safety($p62, $p63);
  assume {:sourceloc "to_memory.cpp", 42, 19} true;
  assume {:verifier.code 0} true;
  $i64 := $load.i8($M.20, $p61);
  assume {:sourceloc "to_memory.cpp", 42, 19} true;
  assume {:verifier.code 0} true;
  $i65 := $sext.i8.i32($i64);
  assume {:sourceloc "to_memory.cpp", 42, 16} true;
  assume {:verifier.code 0} true;
  $i66 := $zext.i8.i32($i49);
  assume {:sourceloc "to_memory.cpp", 42, 16} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: to_memory.cpp:42:16: warning: over-approximating bitwise operation xor;
  $i67 := $xor.i32($i66, $i65);
  assume {:sourceloc "to_memory.cpp", 42, 16} true;
  assume {:verifier.code 0} true;
  $i68 := $trunc.i32.i8($i67);
  call {:cexpr "checksum"} boogie_si_record_i8($i68);
  assume {:sourceloc "to_memory.cpp", 42, 7} true;
  assume {:verifier.code 0} true;
  goto $bb36;
$bb35:
  assume !(($i56 == 1));
  assume {:sourceloc "to_memory.cpp", 43, 37} true;
  assume {:verifier.code 0} true;
  $i70 := $zext.i8.i32($i49);
  assume {:sourceloc "to_memory.cpp", 43, 5} true;
  assume {:verifier.code 0} true;
  call $i71 := printf.ref.i32(.str.13, $i70);
  assume {:sourceloc "to_memory.cpp", 44, 5} true;
  assume {:verifier.code 0} true;
  $i72 := $zext.i8.i32($i49);
  assume {:sourceloc "to_memory.cpp", 44, 5} true;
  assume {:verifier.code 0} true;
  $i73 := $eq.i32($i72, 8);
  assume {:sourceloc "to_memory.cpp", 44, 5} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i73} true;
  goto $bb37, $bb39;
$bb36:
  assume {:sourceloc "to_memory.cpp", 41, 41} true;
  assume {:verifier.code 0} true;
  $i69 := $add.i32($i50, 1);
  call {:cexpr "i"} boogie_si_record_i32($i69);
  assume {:sourceloc "to_memory.cpp", 41, 5} true;
  assume {:verifier.code 0} true;
  $i49, $i50 := $i68, $i69;
  goto $bb33;
$bb37:
  assume {:sourceloc "to_memory.cpp", 44, 5} true;
  assume {:verifier.code 0} true;
  assume ($i73 == 1);
  goto $bb38;
$bb38:
  assume {:sourceloc "to_memory.cpp", 45, 5} true;
  assume {:verifier.code 0} true;
  call $i74 := emscripten_fetch_close($p1);
  assume {:sourceloc "to_memory.cpp", 54, 3} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb39:
  assume !(($i73 == 1));
  assume {:sourceloc "to_memory.cpp", 44, 5} true;
  assume {:verifier.code 0} true;
  call __assert_fail(.str.14, .str.3, 44, __func__._ZZ4mainENK3$_0clEP18emscripten_fetch_t);
  assume {:sourceloc "to_memory.cpp", 44, 5} true;
  assume {:verifier.code 0} true;
  assume false;
$bb40:
  assume {:sourceloc "to_memory.cpp", 44, 5} true;
  assume {:verifier.code 0} true;
  goto $bb38;
}
const emscripten_fetch_close: ref;
axiom (emscripten_fetch_close == $sub.ref(0, 114530));
procedure  emscripten_fetch_close($p0: ref)
  returns ($r: i32);
const __VERIFIER_assume: ref;
axiom (__VERIFIER_assume == $sub.ref(0, 115558));
procedure  __VERIFIER_assume($i0: i32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 247, 29} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 247, 29} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 38, 3} true;
  assume {:verifier.code 1} true;
  assume $i0 != $0;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 39, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_code: ref;
axiom (__SMACK_code == $sub.ref(0, 116586));
procedure  __SMACK_code.ref($p0: ref);
procedure  __SMACK_code.ref.i32($p0: ref, p.1: i32);
const __SMACK_dummy: ref;
axiom (__SMACK_dummy == $sub.ref(0, 117614));
procedure  __SMACK_dummy($i0: i32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 247, 29} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__SMACK_dummy:arg:v"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 247, 29} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 247, 59} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_check_overflow: ref;
axiom (__SMACK_check_overflow == $sub.ref(0, 118642));
procedure  __SMACK_check_overflow($i0: i32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 247, 29} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__SMACK_check_overflow:arg:flag"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 247, 29} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 52, 3} true;
  assume {:verifier.code 1} true;
  assert {:overflow} $i0 == $0;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 53, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_nondet_char: ref;
axiom (__SMACK_nondet_char == $sub.ref(0, 119670));
procedure  __SMACK_nondet_char()
  returns ($r: i8);
const __SMACK_nondet_signed_char: ref;
axiom (__SMACK_nondet_signed_char == $sub.ref(0, 120698));
procedure  __SMACK_nondet_signed_char()
  returns ($r: i8);
const __SMACK_nondet_unsigned_char: ref;
axiom (__SMACK_nondet_unsigned_char == $sub.ref(0, 121726));
procedure  __SMACK_nondet_unsigned_char()
  returns ($r: i8);
const __SMACK_nondet_short: ref;
axiom (__SMACK_nondet_short == $sub.ref(0, 122754));
procedure  __SMACK_nondet_short()
  returns ($r: i16);
const __SMACK_nondet_signed_short: ref;
axiom (__SMACK_nondet_signed_short == $sub.ref(0, 123782));
procedure  __SMACK_nondet_signed_short()
  returns ($r: i16);
const __SMACK_nondet_signed_short_int: ref;
axiom (__SMACK_nondet_signed_short_int == $sub.ref(0, 124810));
procedure  __SMACK_nondet_signed_short_int()
  returns ($r: i16);
const __SMACK_nondet_unsigned_short: ref;
axiom (__SMACK_nondet_unsigned_short == $sub.ref(0, 125838));
procedure  __SMACK_nondet_unsigned_short()
  returns ($r: i16);
const __SMACK_nondet_unsigned_short_int: ref;
axiom (__SMACK_nondet_unsigned_short_int == $sub.ref(0, 126866));
procedure  __SMACK_nondet_unsigned_short_int()
  returns ($r: i16);
const __SMACK_nondet_int: ref;
axiom (__SMACK_nondet_int == $sub.ref(0, 127894));
procedure  __SMACK_nondet_int()
  returns ($r: i32);
const __SMACK_nondet_signed_int: ref;
axiom (__SMACK_nondet_signed_int == $sub.ref(0, 128922));
procedure  __SMACK_nondet_signed_int()
  returns ($r: i32);
const __SMACK_nondet_unsigned: ref;
axiom (__SMACK_nondet_unsigned == $sub.ref(0, 129950));
procedure  __SMACK_nondet_unsigned()
  returns ($r: i32);
const __SMACK_nondet_unsigned_int: ref;
axiom (__SMACK_nondet_unsigned_int == $sub.ref(0, 130978));
procedure  __SMACK_nondet_unsigned_int()
  returns ($r: i32);
const __SMACK_nondet_long: ref;
axiom (__SMACK_nondet_long == $sub.ref(0, 132006));
procedure  __SMACK_nondet_long()
  returns ($r: i32);
const __SMACK_nondet_long_int: ref;
axiom (__SMACK_nondet_long_int == $sub.ref(0, 133034));
procedure  __SMACK_nondet_long_int()
  returns ($r: i32);
const __SMACK_nondet_signed_long: ref;
axiom (__SMACK_nondet_signed_long == $sub.ref(0, 134062));
procedure  __SMACK_nondet_signed_long()
  returns ($r: i32);
const __SMACK_nondet_signed_long_int: ref;
axiom (__SMACK_nondet_signed_long_int == $sub.ref(0, 135090));
procedure  __SMACK_nondet_signed_long_int()
  returns ($r: i32);
const __SMACK_nondet_unsigned_long: ref;
axiom (__SMACK_nondet_unsigned_long == $sub.ref(0, 136118));
procedure  __SMACK_nondet_unsigned_long()
  returns ($r: i32);
const __SMACK_nondet_unsigned_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_int == $sub.ref(0, 137146));
procedure  __SMACK_nondet_unsigned_long_int()
  returns ($r: i32);
const __SMACK_nondet_long_long: ref;
axiom (__SMACK_nondet_long_long == $sub.ref(0, 138174));
procedure  __SMACK_nondet_long_long()
  returns ($r: i64);
const __SMACK_nondet_long_long_int: ref;
axiom (__SMACK_nondet_long_long_int == $sub.ref(0, 139202));
procedure  __SMACK_nondet_long_long_int()
  returns ($r: i64);
const __SMACK_nondet_signed_long_long: ref;
axiom (__SMACK_nondet_signed_long_long == $sub.ref(0, 140230));
procedure  __SMACK_nondet_signed_long_long()
  returns ($r: i64);
const __SMACK_nondet_signed_long_long_int: ref;
axiom (__SMACK_nondet_signed_long_long_int == $sub.ref(0, 141258));
procedure  __SMACK_nondet_signed_long_long_int()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_long: ref;
axiom (__SMACK_nondet_unsigned_long_long == $sub.ref(0, 142286));
procedure  __SMACK_nondet_unsigned_long_long()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 143314));
procedure  __SMACK_nondet_unsigned_long_long_int()
  returns ($r: i64);
const __SMACK_decls: ref;
axiom (__SMACK_decls == $sub.ref(0, 144342));
type $mop;
procedure  boogie_si_record_mop(m: $mop);
const $MOP: $mop;
var $exn: bool;
var $exnv: int;
procedure  corral_atomic_begin();
procedure  corral_atomic_end();
procedure  $alloc(n: ref) returns (p: ref)
{
  call corral_atomic_begin();
  call p := $$alloc(n);
  call corral_atomic_end();
}

implementation __SMACK_check_memory_safety(p: ref, size: ref)
{
  assert {:valid_deref} $Alloc[$base(p)];
  assert {:valid_deref} $sle.ref.bool($base(p), p);
  assert {:valid_deref} $sle.ref.bool($add.ref(p, size), $add.ref($base(p), $Size($base(p))));
}

function $base(ref) returns (ref);
var $allocatedCounter: int;

procedure  $malloc(n: ref) returns (p: ref)
modifies $allocatedCounter;
{
  call corral_atomic_begin();
  if ($ne.ref.bool(n, $0.ref)) {
    $allocatedCounter := $allocatedCounter + 1;
  }
  call p := $$alloc(n);
  call corral_atomic_end();
}

var $Alloc: [ref] bool;
function $Size(ref) returns (ref);
var $CurrAddr:ref;

procedure  $galloc(base_addr: ref, size: ref)
{
  assume $Size(base_addr) == size;
  assume (forall addr: ref :: {$base(addr)} $sle.ref.bool(base_addr, addr) && $slt.ref.bool(addr, $add.ref(base_addr, size)) ==> $base(addr) == base_addr);
  $Alloc[base_addr] := true;
}

procedure {:inline 1} $$alloc(n: ref) returns (p: ref)
modifies $Alloc, $CurrAddr;
{
  assume $sle.ref.bool($0.ref, n);
  if ($slt.ref.bool($0.ref, n)) {
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    assume $Size(p) == n;
    assume (forall q: ref :: {$base(q)} $sle.ref.bool(p, q) && $slt.ref.bool(q, $add.ref(p, n)) ==> $base(q) == p);
    $Alloc[p] := true;
  } else {
    p := $0.ref;
  }
}

procedure  $free(p: ref)
modifies $Alloc, $allocatedCounter;
{
  call corral_atomic_begin();
  if ($ne.ref.bool(p, $0.ref)) {
    assert {:valid_free} $eq.ref.bool($base(p), p);
    assert {:valid_free} $Alloc[p];
    assert {:valid_free} $slt.ref.bool($0.ref, p);
    $Alloc[p] := false;
    $allocatedCounter := $allocatedCounter - 1;
  }
  call corral_atomic_end();
}

const __SMACK_top_decl: ref;
axiom (__SMACK_top_decl == $sub.ref(0, 145370));
procedure  __SMACK_top_decl.ref($p0: ref);
const __SMACK_check_memory_safety: ref;
axiom (__SMACK_check_memory_safety == $sub.ref(0, 146398));
procedure  __SMACK_check_memory_safety($p0: ref, $p1: ref);
const __SMACK_check_memory_leak: ref;
axiom (__SMACK_check_memory_leak == $sub.ref(0, 147426));
procedure  __SMACK_check_memory_leak()
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 522, 3} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 522, 3} true;
  assume {:verifier.code 1} true;
  assert {:valid_memtrack} $allocatedCounter == 0;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 523, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_init_func_memory_model: ref;
axiom (__SMACK_init_func_memory_model == $sub.ref(0, 148454));
procedure  __SMACK_init_func_memory_model()
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 528, 3} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 528, 3} true;
  assume {:verifier.code 1} true;
  $CurrAddr := $1024.ref;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 531, 3} true;
  assume {:verifier.code 1} true;
  $allocatedCounter := 0;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 533, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __gxx_personality_v0: ref;
axiom (__gxx_personality_v0 == $sub.ref(0, 149482));
procedure  __gxx_personality_v0()
  returns ($r: i32);
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 150510));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 151538));
procedure  __SMACK_static_init()
{
$bb0:
  $M.10 := 0;
  call {:cexpr "result"} boogie_si_record_i32(0);
  $M.21 := .str.2.42;
  $M.22 := 0;
  call {:cexpr "errno_global"} boogie_si_record_i32(0);
  $exn := false;
  return;
}
const $u0: ref;
procedure  boogie_si_record_i32(x: i32);
procedure  boogie_si_record_i8(x: i8);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call $global_allocations();
  call __SMACK_static_init();
  call __SMACK_init_func_memory_model();
  $rmode := RNE;
  return;
}
